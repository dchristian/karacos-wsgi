
[WARNING] Try to use a single 'var' statement per scope.
(a);};}else{ ---> var  <--- l=b.fn.remove;b.

[WARNING] Try to use a single 'var' statement per scope.
d+"' for "+a+" widget instance";} ---> var  <--- i=g[d].apply(g

[WARNING] Try to use a single 'var' statement per scope.
.event.props.length;for( ---> var  <--- f;a;){f=b.

[WARNING] Try to use a single 'var' statement per scope.
()-d.scrollLeft(); ---> var  <--- g=a.my[0]==="left"

[WARNING] Try to use a single 'var' statement per scope.
()-d.scrollTop(); ---> var  <--- g=a.my[1]==="top"

[WARNING] Try to use a single 'var' statement per scope.
(this.element,b)){ ---> var  <--- c=this;d(this.helper)

[WARNING] Try to use a single 'var' statement per scope.
a.containment.constructor!=Array){ ---> var  <--- b=d(a.containment)[0

[WARNING] Try to use a single 'var' statement per scope.
a.containment).offset(); ---> var  <--- c=d(b).css("overflow"

[WARNING] Try to use a single 'var' statement per scope.
;h>=0;h--){ ---> var  <--- i=c.snapElements[h].left

[WARNING] Try to use a single 'var' statement per scope.
if(f.snapMode!="inner"){ ---> var  <--- p=Math.abs(j-o)

[WARNING] Try to use a single 'var' statement per scope.
-c.margins.left;}} ---> var  <--- t=p||q||r||s;

[WARNING] Try to use a single 'var' statement per scope.
);if(a.length){ ---> var  <--- b=parseInt(a[0].style

[WARNING] Try to use a single 'var' statement per scope.
[0]){returnfalse;} ---> var  <--- e=false;this.element.find(

[WARNING] Try to use a single 'var' statement per scope.
a.element))){for( ---> var  <--- h=0;h<g.length;

[WARNING] Try to use a single 'var' statement per scope.
isover==0?"isover":null){ ---> var  <--- e;if(this.options.greedy)

[WARNING] Try to use a single 'var' statement per scope.
if(this.options.greedy){ ---> var  <--- g=this.element.parents(":data(droppable):eq(0)")

[WARNING] Try to use a single 'var' statement per scope.
){this.handles="n,e,s,w,se,sw,ne,nw";} ---> var  <--- c=this.handles.split(",")

[WARNING] Try to use a single 'var' statement per scope.
this.handles={};for( ---> var  <--- d=0;d<c.length;

[WARNING] Try to use a single 'var' statement per scope.
<c.length;d++){ ---> var  <--- f=e.trim(c[d]

[WARNING] Try to use a single 'var' statement per scope.
.nodeName.match(/textarea|input|select|button/i)){ ---> var  <--- j=e(this.handles[i]

[WARNING] Try to use a single 'var' statement per scope.
){b(this.element); ---> var  <--- a=this.element;a.after(

[WARNING] Try to use a single 'var' statement per scope.
){var a=false;for( ---> var  <--- c in this.handles){if(e

[WARNING] Try to use a single 'var' statement per scope.
.helper.css("left")); ---> var  <--- f=m(this.helper.css(

[WARNING] Try to use a single 'var' statement per scope.
this;if(this._helper){ ---> var  <--- d=this._proportionallyResizeElements,f=d.

[WARNING] Try to use a single 'var' statement per scope.
c.originalPosition.left)||null; ---> var  <--- g=parseInt(c.element.css(

[WARNING] Try to use a single 'var' statement per scope.
b.height=a.maxHeight;} ---> var  <--- i=this.originalPosition.left+this.

[WARNING] Try to use a single 'var' statement per scope.
._proportionallyResizeElements.length;a++){ ---> var  <--- c=this._proportionallyResizeElements[a];if

[WARNING] Try to use a single 'var' statement per scope.
;if(!this.borderDif){ ---> var  <--- d=[c.css("borderTopWidth"),

[WARNING] Try to use a single 'var' statement per scope.
this.helper||e('<div style="overflow:hidden;"></div>'); ---> var  <--- a=e.browser.msie&&e.

[WARNING] Try to use a single 'var' statement per scope.
"resizable");b=c.options; ---> var  <--- d=c.originalSize,f=c.

[WARNING] Try to use a single 'var' statement per scope.
a.originalPosition.left)||null; ---> var  <--- h=parseInt(a.element.css(

[WARNING] Try to use a single 'var' statement per scope.
.parentNode.scrollHeight};}else{ ---> var  <--- d=e(a),f=[

[WARNING] Try to use a single 'var' statement per scope.
]};c=b.containerOffset; ---> var  <--- g=b.containerSize.height,h=

[WARNING] Try to use a single 'var' statement per scope.
=a._aspectRatio||b.shiftKey; ---> var  <--- g={top:0,left:0

[WARNING] Try to use a single 'var' statement per scope.
a.grid]:a.grid; ---> var  <--- h=Math.round((c.width

[WARNING] Try to use a single 'var' statement per scope.
"ui-selectable");this.dragged=false; ---> var  <--- f;this.refresh=function(){

[WARNING] Try to use a single 'var' statement per scope.
(!this.options.disabled){ ---> var  <--- d=this.options;this.selectees=

[WARNING] Try to use a single 'var' statement per scope.
,"selectable-item");if(b){ ---> var  <--- g=!c.metaKey||!b.

[WARNING] Try to use a single 'var' statement per scope.
(!this.options.disabled){ ---> var  <--- d=this.options,b=this.

[WARNING] Try to use a single 'var' statement per scope.
pageY;if(b>h){ ---> var  <--- j=h;h=b;b=

[WARNING] Try to use a single 'var' statement per scope.
f.element[0])){ ---> var  <--- k=false;if(d.tolerance==

[WARNING] Try to use a single 'var' statement per scope.
.options.handle&&!b){ ---> var  <--- f=false;d(this.options.

[WARNING] Try to use a single 'var' statement per scope.
c=this.items[b]; ---> var  <--- e=c.item[0],f

[WARNING] Try to use a single 'var' statement per scope.
.currentItem.show();for( ---> var  <--- b=this.containers.length-1;

[WARNING] Try to use a single 'var' statement per scope.
;a=this._getDragVerticalDirection(); ---> var  <--- c=this._getDragHorizontalDirection();if(

[WARNING] Try to use a single 'var' statement per scope.
width/2,a.width); ---> var  <--- c=this._getDragVerticalDirection(),e=

[WARNING] Try to use a single 'var' statement per scope.
>=0;a--){for( ---> var  <--- f=d(e[a]),

[WARNING] Try to use a single 'var' statement per scope.
;g>=0;g--){ ---> var  <--- h=d.data(f[g]

[WARNING] Try to use a single 'var' statement per scope.
.length;b++){for( ---> var  <--- c=0;c<a.length;

[WARNING] Try to use a single 'var' statement per scope.
);if(e){for( ---> var  <--- f=e.length-1;f>=

[WARNING] Try to use a single 'var' statement per scope.
>=0;f--){for( ---> var  <--- g=d(e[f]),

[WARNING] Try to use a single 'var' statement per scope.
;h>=0;h--){ ---> var  <--- i=d.data(g[h]

[WARNING] Try to use a single 'var' statement per scope.
;b>=0;b--){ ---> var  <--- c=this.items[b],e

[WARNING] Try to use a single 'var' statement per scope.
c.placeholder.constructor==String){ ---> var  <--- e=c.placeholder;c.placeholder=

[WARNING] Try to use a single 'var' statement per scope.
=10000;e=null;for( ---> var  <--- f=this.positionAbs[this.containers[

[WARNING] Try to use a single 'var' statement per scope.
].item[0])){ ---> var  <--- h=this.items[g][this

[WARNING] Try to use a single 'var' statement per scope.
.test(a.containment)){ ---> var  <--- b=d(a.containment)[0

[WARNING] Try to use a single 'var' statement per scope.
a.containment).offset(); ---> var  <--- c=d(b).css("overflow"

[WARNING] Try to use a single 'var' statement per scope.
relative=this._getRelativeOffset();} ---> var  <--- f=a.pageX,g=a.

[WARNING] Try to use a single 'var' statement per scope.
.currentItem[0]){for( ---> var  <--- e in this._storedCSS){if(this

[WARNING] Try to use a single 'var' statement per scope.
);if(b.navigation){ ---> var  <--- d=a.element.find("a")

[WARNING] Try to use a single 'var' statement per scope.
);if(d.length){ ---> var  <--- f=d.closest(".ui-accordion-header");a

[WARNING] Try to use a single 'var' statement per scope.
"tabIndex");this._destroyIcons(); ---> var  <--- b=this.headers.next().

[WARNING] Try to use a single 'var' statement per scope.
if(c.browser.msie){ ---> var  <--- d=this.element.parent().

[WARNING] Try to use a single 'var' statement per scope.
next().addClass("ui-accordion-content-active"); ---> var  <--- f=this.active.next(),

[WARNING] Try to use a single 'var' statement per scope.
=b;h.data=d; ---> var  <--- j=function(){if(h)

[WARNING] Try to use a single 'var' statement per scope.
=c.ui.accordion.animations; ---> var  <--- i=e.duration,k=e.

[WARNING] Try to use a single 'var' statement per scope.
("ui-dialog-content ui-widget-content").appendTo(g); ---> var  <--- e=(a.uiDialogTitlebar=c("<div></div>"

[WARNING] Try to use a single 'var' statement per scope.
cookie);a=0;for( ---> var  <--- j;j=this.lis[a]

[WARNING] Try to use a single 'var' statement per scope.
if(c.event!=="mouseover"){ ---> var  <--- k=function(g,f){f

[WARNING] Try to use a single 'var' statement per scope.
("li"));});} ---> var  <--- m,o;if(c.fx)

[WARNING] Try to use a single 'var' statement per scope.
=o=c.fx;}} ---> var  <--- r=o?function(g,f)

[WARNING] Try to use a single 'var' statement per scope.
){this.href=e;} ---> var  <--- b=d(this).unbind(".tabs"

[WARNING] Try to use a single 'var' statement per scope.
).data("destroy.tabs",true); ---> var  <--- j=d("#"+a);j

[WARNING] Try to use a single 'var' statement per scope.
);if(b.spinner){ ---> var  <--- j=d("span",c);j

[WARNING] Try to use a single 'var' statement per scope.
){var c=null;for( ---> var  <--- e in this._defaults){var f=

[WARNING] Try to use a single 'var' statement per scope.
(var e in this._defaults){ ---> var  <--- f=a.getAttribute("date:"+e)

[WARNING] Using 'eval' is not recommended.
};try{c[e]= ---> eval <--- (f);}catch(h){

[WARNING] Try to use a single 'var' statement per scope.
id="dp"+this.uuid;} ---> var  <--- i=this._newInst(d(a)

[WARNING] Try to use a single 'var' statement per scope.
this._get(b,"buttonText"); ---> var  <--- f=this._get(b,"buttonImage")

[WARNING] Try to use a single 'var' statement per scope.
(c.match(/[DM]/)){ ---> var  <--- e=function(f){for(var 

[WARNING] Try to use a single 'var' statement per scope.
.hasClass(this.markerClassName)){ ---> var  <--- e=a.nodeName.toLowerCase();

[WARNING] Try to use a single 'var' statement per scope.
.hasClass(this.markerClassName)){ ---> var  <--- e=a.nodeName.toLowerCase();

[WARNING] Try to use a single 'var' statement per scope.
.hasClass(this.markerClassName)){ ---> var  <--- e=a.nodeName.toLowerCase();

[WARNING] Try to use a single 'var' statement per scope.
(e,b):null;} ---> var  <--- f=b||{};if(typeof

[WARNING] Try to use a single 'var' statement per scope.
==e&&this._hideDatepicker(); ---> var  <--- h=this._getDateDatepicker(a,true)

[WARNING] Try to use a single 'var' statement per scope.
._get(b,"dateFormat")); ---> var  <--- c=String.fromCharCode(a.charCode==

[WARNING] Try to use a single 'var' statement per scope.
dpDiv.stop(true,true); ---> var  <--- c=d.datepicker._get(b,

[WARNING] Try to use a single 'var' statement per scope.
[1]+=a.offsetHeight;} ---> var  <--- e=false;d(a).parents

[WARNING] Try to use a single 'var' statement per scope.
datepicker._get(b,"showAnim"); ---> var  <--- f=d.datepicker._get(b,

[WARNING] Try to use a single 'var' statement per scope.
c=this._getNumberOfMonths(a); ---> var  <--- e=c[1];e>1

[WARNING] Try to use a single 'var' statement per scope.
this._get(b,"showAnim"); ---> var  <--- c=this._get(b,"duration")

[WARNING] Try to use a single 'var' statement per scope.
selectedYear=b.currentYear;}else{ ---> var  <--- c=new Date;b.selectedDay=c

[WARNING] Try to use a single 'var' statement per scope.
,"altField");if(b){ ---> var  <--- c=this._get(a,"altFormat")

[WARNING] Try to use a single 'var' statement per scope.
("y");break;case"@": ---> var  <--- v=new Date(m("@"))

[WARNING] Try to use a single 'var' statement per scope.
null)||this._defaults.monthNames; ---> var  <--- i=function(o){(o=

[WARNING] Try to use a single 'var' statement per scope.
false;if(b){for( ---> var  <--- j=0;j<a.length;

[WARNING] Try to use a single 'var' statement per scope.
h=this._getDefaultDate(a); ---> var  <--- i=this._getFormatConfig(a);try

[WARNING] Try to use a single 'var' statement per scope.
=g.getDate();for( ---> var  <--- u=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,j=u.exec(

[WARNING] Try to use a single 'var' statement per scope.
,b.getDate())); ---> var  <--- c=this._get(a,"isRTL")

[WARNING] Try to use a single 'var' statement per scope.
;g=a.drawMonth-g; ---> var  <--- m=a.drawYear;if(g<

[WARNING] Try to use a single 'var' statement per scope.
m--;}if(o){ ---> var  <--- n=this._daylightSavingAdjust(new Date(o

[WARNING] Try to use a single 'var' statement per scope.
"w")+'">'+n+"</span></a>"; ---> var  <--- r=this._get(a,"nextText")

[WARNING] Try to use a single 'var' statement per scope.
this._get(a,"dayNamesShort"); ---> var  <--- s=this._get(a,"dayNamesMin")

[WARNING] Try to use a single 'var' statement per scope.
_get(a,"calculateWeek");for( ---> var  <--- M=this._getDefaultDate(a),I

[WARNING] Try to use a single 'var' statement per scope.
0];C++){for( ---> var  <--- N="",D=0;D<

[WARNING] Try to use a single 'var' statement per scope.
i[1];D++){ ---> var  <--- J=this._daylightSavingAdjust(new Date(m

[WARNING] Try to use a single 'var' statement per scope.
0,z,v)+'</div><table class="ui-datepicker-calendar"><thead><tr>'; ---> var  <--- A=k?'<th class="ui-datepicker-week-col">'+this._get(

[WARNING] Try to use a single 'var' statement per scope.
;t<7;t++){ ---> var  <--- q=(t+h)%7;

[WARNING] Try to use a single 'var' statement per scope.
,1-t));for( ---> var  <--- O=0;O<A;O++

[WARNING] Try to use a single 'var' statement per scope.
;O++){x+="<tr>"; ---> var  <--- P=!k?"":'<td class="ui-datepicker-week-col">'+this

[WARNING] Try to use a single 'var' statement per scope.
;t<7;t++){ ---> var  <--- F=p?p.apply(a.

[WARNING] Try to use a single 'var' statement per scope.
&&e.getFullYear()==c; ---> var  <--- m=f&&f.getFullYear()==

[WARNING] Try to use a single 'var' statement per scope.
+a.id+"');\">";for( ---> var  <--- n=0;n<12;n++

[WARNING] Try to use a single 'var' statement per scope.
,"yearRange").split(":"); ---> var  <--- r=(new Date).getFullYear()

[WARNING] Try to use a single 'var' statement per scope.
c[0]]){for( ---> var  <--- e=c.length;e--;)

[WARNING] Try to use a single 'var' statement per scope.
,callback:a[3]}; ---> var  <--- b=f.effects[c];return

[WARNING] Try to use a single 'var' statement per scope.
g);a.show(); ---> var  <--- e=b.effects.createWrapper(a)

[WARNING] Try to use a single 'var' statement per scope.
e.css(h,0); ---> var  <--- i={};i[h]=

[WARNING] Try to use a single 'var' statement per scope.
e.effects.createWrapper(a); ---> var  <--- f=d=="up"||d=="down"?

[WARNING] Try to use a single 'var' statement per scope.
--;if(h=="show"){ ---> var  <--- g={opacity:1};g[

[WARNING] Try to use a single 'var' statement per scope.
;g<m;g++){ ---> var  <--- j={},k={};

[WARNING] Try to use a single 'var' statement per scope.
i);a.show(); ---> var  <--- d=b.effects.createWrapper(a)

[WARNING] Try to use a single 'var' statement per scope.
.tagName=="IMG"?d:a; ---> var  <--- g={size:c=="vertical"?"height"

[WARNING] Try to use a single 'var' statement per scope.
.position,c/2);} ---> var  <--- h={};h[g.size

[WARNING] Try to use a single 'var' statement per scope.
c.effects.createWrapper(a); ---> var  <--- f=b=="up"||b=="down"?

[WARNING] Try to use a single 'var' statement per scope.
||b=="left"?"pos":"neg"; ---> var  <--- g=d.options.distance||(f

[WARNING] Try to use a single 'var' statement per scope.
"pos"?-g:g);} ---> var  <--- i={opacity:e=="show"?1

[WARNING] Try to use a single 'var' statement per scope.
:"show":a.options.mode; ---> var  <--- b=j(this).show()

[WARNING] Try to use a single 'var' statement per scope.
),10)||0;for( ---> var  <--- h=b.outerWidth(true),i

[WARNING] Try to use a single 'var' statement per scope.
<c;e++){for( ---> var  <--- f=0;f<d;f++

[WARNING] Try to use a single 'var' statement per scope.
j);b.show(); ---> var  <--- e=c.effects.createWrapper(b)

[WARNING] Try to use a single 'var' statement per scope.
),e.width()]; ---> var  <--- i=/([0-9]+)%/.exec(g);if

[WARNING] Try to use a single 'var' statement per scope.
.width)*l.x;} ---> var  <--- d={from:{y:a.

[WARNING] Try to use a single 'var' statement per scope.
a.options.mode||"effect"); ---> var  <--- c=a.options.direction||"left",

[WARNING] Try to use a single 'var' statement per scope.
d.effects.createWrapper(b); ---> var  <--- g=c=="up"||c=="down"?

[WARNING] Try to use a single 'var' statement per scope.
"pos":"neg";c={}; ---> var  <--- i={},k={};

[WARNING] Try to use a single 'var' statement per scope.
css({overflow:"hidden"}); ---> var  <--- f=b=="up"||b=="down"?

[WARNING] Try to use a single 'var' statement per scope.
||b=="left"?"pos":"neg"; ---> var  <--- g=d.options.distance||(f

[WARNING] Try to use a single 'var' statement per scope.
"pos"?-g:g);} ---> var  <--- i={};i[f]=

[WARNING] Try to use a single 'var' statement per scope.
;d=b.offset(); ---> var  <--- f=e('<div class="ui-effects-transfer"></div>').appendTo(document

[WARNING] Try to use a single 'var' statement per scope.
24*60*60*1000); ---> var  <--- __daysIn=[31,28,31,30

[WARNING] Try to use a single 'var' statement per scope.
30,31,30,31]; ---> var  <--- __iframe=null;var __initialized=false;var 

[WARNING] Try to use a single 'var' statement per scope.
,31];var __iframe=null; ---> var  <--- __initialized=false;var __msie6=(navigator.

[WARNING] Try to use a single 'var' statement per scope.
__iframe=null;var __initialized=false; ---> var  <--- __msie6=(navigator.userAgent.indexOf("MSIE 6"

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("MSIE 6")>0); ---> var  <--- __msie7=(navigator.userAgent.indexOf("MSIE 7"

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("MSIE 7")>0); ---> var  <--- __pickers=[];jQuery.prototype.AnyTime_picker

[WARNING] Try to use a single 'var' statement per scope.
(options){var _flen=0; ---> var  <--- _longDay=9;var _longMon=9;var 

[WARNING] Try to use a single 'var' statement per scope.
_flen=0;var _longDay=9; ---> var  <--- _longMon=9;var _shortDay=6;var 

[WARNING] Try to use a single 'var' statement per scope.
_longDay=9;var _longMon=9; ---> var  <--- _shortDay=6;var _shortMon=3;var 

[WARNING] Try to use a single 'var' statement per scope.
_longMon=9;var _shortDay=6; ---> var  <--- _shortMon=3;var _offAl=Number.MIN_VALUE

[WARNING] Try to use a single 'var' statement per scope.
_shortDay=6;var _shortMon=3; ---> var  <--- _offAl=Number.MIN_VALUE;var _offCap=Number

[WARNING] Try to use a single 'var' statement per scope.
3;var _offAl=Number.MIN_VALUE; ---> var  <--- _offCap=Number.MIN_VALUE;var _offF=Number

[WARNING] Try to use a single 'var' statement per scope.
MIN_VALUE;var _offCap=Number.MIN_VALUE; ---> var  <--- _offF=Number.MIN_VALUE;var _offFSI=(

[WARNING] Try to use a single 'var' statement per scope.
MIN_VALUE;var _offF=Number.MIN_VALUE; ---> var  <--- _offFSI=(-1);var _offP=

[WARNING] Try to use a single 'var' statement per scope.
;var _offFSI=(-1); ---> var  <--- _offP=Number.MIN_VALUE;var _offPSI=(

[WARNING] Try to use a single 'var' statement per scope.
);var _offP=Number.MIN_VALUE; ---> var  <--- _offPSI=(-1);var _captureOffset=

[WARNING] Try to use a single 'var' statement per scope.
;var _offPSI=(-1); ---> var  <--- _captureOffset=false;this.fmt="%Y-%m-%d %T";

[WARNING] Try to use a single 'var' statement per scope.
+(_offF*60000));} ---> var  <--- t;var str="";for(var 

[WARNING] Try to use a single 'var' statement per scope.
*60000));}var t; ---> var  <--- str="";for(var f=0

[WARNING] Try to use a single 'var' statement per scope.
t;var str="";for( ---> var  <--- f=0;f<_flen;f++

[WARNING] Try to use a single 'var' statement per scope.
.charAt(f);}else{ ---> var  <--- ch=this.fmt.charAt(f+

[WARNING] Try to use a single 'var' statement per scope.
-1);var era=1; ---> var  <--- time=new Date(0,0,1

[WARNING] Try to use a single 'var' statement per scope.
0,0,0,0); ---> var  <--- slen=str.length;var s=0

[WARNING] Try to use a single 'var' statement per scope.
);var slen=str.length; ---> var  <--- s=0;var tzSign=1,tzOff

[WARNING] Try to use a single 'var' statement per scope.
str.length;var s=0; ---> var  <--- tzSign=1,tzOff=_offP;var i

[WARNING] Try to use a single 'var' statement per scope.
var tzSign=1,tzOff=_offP; ---> var  <--- i,matched,sub,sublen,temp;

[WARNING] Try to use a single 'var' statement per scope.
,sub,sublen,temp;for( ---> var  <--- f=0;f<_flen;f++

[WARNING] Try to use a single 'var' statement per scope.
.charAt(f)=="%"){ ---> var  <--- ch=this.fmt.charAt(f+

[WARNING] Try to use a single 'var' statement per scope.
;i<12;i++){ ---> var  <--- len=_this.mNames[i].length

[WARNING] The variable len has already been declared in the same scope...
i<12;i++){var  ---> len <--- =_this.mNames[i].length;

[WARNING] Try to use a single 'var' statement per scope.
options.labelTimeZone||"Time Zone";var i; ---> var  <--- t;var lab;var shownFields=0;

[WARNING] Try to use a single 'var' statement per scope.
||"Time Zone";var i;var t; ---> var  <--- lab;var shownFields=0;var format=

[WARNING] Try to use a single 'var' statement per scope.
var i;var t;var lab; ---> var  <--- shownFields=0;var format=this.conv

[WARNING] Try to use a single 'var' statement per scope.
;var lab;var shownFields=0; ---> var  <--- format=this.conv.fmt;if(

[WARNING] Try to use a single 'var' statement per scope.
indexOf("%E")>=0);} ---> var  <--- askYear=(format.indexOf("%Y")>=

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("%z")>=0); ---> var  <--- askMonth=(format.indexOf("%b")>=

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("%m")>=0); ---> var  <--- askDoM=(format.indexOf("%D")>=

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("%e")>=0); ---> var  <--- askDate=askYear||askMonth||askDoM;this.

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("%r")>=0); ---> var  <--- askHour=this.twelveHr||(format.indexOf

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("%T")>=0); ---> var  <--- askMinute=(format.indexOf("%i")>=

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("%T")>=0); ---> var  <--- askSec=((format.indexOf("%r")

[WARNING] Try to use a single 'var' statement per scope.
){askSec=options.askSecond;} ---> var  <--- askOff=((format.indexOf("%#")

[WARNING] Try to use a single 'var' statement per scope.
indexOf("%@")>=0)); ---> var  <--- askTime=askHour||askMinute||askSec||askOff;

[WARNING] Try to use a single 'var' statement per scope.
0,width:"1px"});} ---> var  <--- t=null;var xDiv=null;if

[WARNING] The variable t has already been declared in the same scope...
,width:"1px"});}var  ---> t <--- =null;var xDiv=null;if(

[WARNING] Try to use a single 'var' statement per scope.
});}var t=null; ---> var  <--- xDiv=null;if(this.pop)

[WARNING] Try to use a single 'var' statement per scope.
dismiss(e);});} ---> var  <--- lab="";if(askDate){this

[WARNING] The variable lab has already been declared in the same scope...
(e);});}var  ---> lab <--- ="";if(askDate){this.

[WARNING] Try to use a single 'var' statement per scope.
;i<12;i++){ ---> var  <--- mBtn=this.btn(this.dMo,

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- mo=event.target.AnyTime_month;var t

[WARNING] Try to use a single 'var' statement per scope.
var mo=event.target.AnyTime_month; ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
this.dDoM.append(t); ---> var  <--- tr=$('<tr class="AnyTime-dow"/>');t.append

[WARNING] Try to use a single 'var' statement per scope.
)%7]+"</th>");} ---> var  <--- tbody=$('<tbody class="AnyTime-dom-body" />');this.dDoM

[WARNING] Try to use a single 'var' statement per scope.
dDoM.append(tbody);for( ---> var  <--- r=0;r<6;r++

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- dom=Number(elem.html())

[WARNING] Try to use a single 'var' statement per scope.
());if(dom){ ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
++;}}if(askTime){ ---> var  <--- tensDiv,onesDiv;this.dT=$(

[WARNING] Try to use a single 'var' statement per scope.
('<h6 class="AnyTime-lbl AnyTime-lbl-hr">'+lab+"</h6>")); ---> var  <--- amDiv=$('<ul class="AnyTime-hrs-am"/>');this.dH

[WARNING] Try to use a single 'var' statement per scope.
this.dH.append(amDiv); ---> var  <--- pmDiv=$('<ul class="AnyTime-hrs-pm"/>');this.dH

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
dO.append(this.oLab); ---> var  <--- offDiv=$('<ul class="AnyTime-off-list ui-helper-reset" />');this.dO

[WARNING] Try to use a single 'var' statement per scope.
inp.val();}else{ ---> var  <--- opt=(this.inp[0].

[WARNING] Try to use a single 'var' statement per scope.
oDiv.append(this.oBody); ---> var  <--- oBHS=this.oBody.AnyTime_height(true)

[WARNING] Try to use a single 'var' statement per scope.
this.oBody.AnyTime_height(true); ---> var  <--- oBWS=this.oBody.AnyTime_width(true)

[WARNING] Try to use a single 'var' statement per scope.
this.oBody.AnyTime_width(true); ---> var  <--- oTWS=title.AnyTime_width(true);var 

[WARNING] Try to use a single 'var' statement per scope.
oTWS=title.AnyTime_width(true); ---> var  <--- xDiv=$('<div class="AnyTime-x-btn ui-state-default">'+this.lX+

[WARNING] Try to use a single 'var' statement per scope.
length*0.8)+"em");} ---> var  <--- oBW=title.AnyTime_width(true)-oBWS

[WARNING] Try to use a single 'var' statement per scope.
title.AnyTime_width(true)-oBWS; ---> var  <--- cont=$('<ul class="AnyTime-off-off" />');var last=

[WARNING] Try to use a single 'var' statement per scope.
;var cont=$('<ul class="AnyTime-off-off" />'); ---> var  <--- last=null;this.oBody.append(

[WARNING] Try to use a single 'var' statement per scope.
this.oBody.append(cont); ---> var  <--- useSubIndex=(this.oConv.fmt.indexOf

[WARNING] Try to use a single 'var' statement per scope.
.indexOf("%@")>=0); ---> var  <--- btnW=0;if(AnyTime.utcLabel)

[WARNING] Try to use a single 'var' statement per scope.
if(AnyTime.utcLabel){for( ---> var  <--- o=-720;o<720;o

[WARNING] Try to use a single 'var' statement per scope.
oConv.setUtcFormatOffsetAlleged(o);for( ---> var  <--- i=0;i<AnyTime.utcLabel[

[WARNING] Try to use a single 'var' statement per scope.
last[0].AnyTime_offSI=i; ---> var  <--- w=last.width();if(

[WARNING] Try to use a single 'var' statement per scope.
(btnW);if(last){ ---> var  <--- lW=last.AnyTime_width(true);if

[WARNING] Try to use a single 'var' statement per scope.
.width(oBW-oTWS);} ---> var  <--- oH=this.oDiv.AnyTime_height(true)

[WARNING] Try to use a single 'var' statement per scope.
this.oDiv.AnyTime_height(true); ---> var  <--- oHmax=this.div.height()*

[WARNING] Try to use a single 'var' statement per scope.
);this.updODiv(null); ---> var  <--- f=this.oDiv.find(".AnyTime-off-off-btn.AnyTime-cur-btn:first")

[WARNING] Try to use a single 'var' statement per scope.
this.yDiv.append(title); ---> var  <--- xDiv=$('<div class="AnyTime-x-btn ui-state-default">'+this.lX+

[WARNING] Try to use a single 'var' statement per scope.
title.append(this.lY); ---> var  <--- yBody=$('<div class="AnyTime-body AnyTime-body-yr-selector" />');var yW=

[WARNING] Try to use a single 'var' statement per scope.
;var yBody=$('<div class="AnyTime-body AnyTime-body-yr-selector" />'); ---> var  <--- yW=yBody.AnyTime_width(true);var 

[WARNING] Try to use a single 'var' statement per scope.
yW=yBody.AnyTime_width(true); ---> var  <--- yH=0;this.yDiv.append(

[WARNING] Try to use a single 'var' statement per scope.
this.time.getTime()); ---> var  <--- year=t.getFullYear();if(

[WARNING] Try to use a single 'var' statement per scope.
this.time.getTime()); ---> var  <--- year=t.getFullYear();if(

[WARNING] Try to use a single 'var' statement per scope.
=="ul")?"li":"td"); ---> var  <--- div$="<"+tagName+' class="AnyTime-btn';for(

[WARNING] Try to use a single 'var' statement per scope.
="<"+tagName+' class="AnyTime-btn';for( ---> var  <--- i=0;i<classes.length;

[WARNING] Try to use a single 'var' statement per scope.
+classes[i]+"-btn";} ---> var  <--- div=$(div$+' ui-state-default">'+text+

[WARNING] Try to use a single 'var' statement per scope.
.oBody.offset().top; ---> var  <--- btnT=btn.offset().top;

[WARNING] Try to use a single 'var' statement per scope.
=btn.offset().top; ---> var  <--- btnH=btn.AnyTime_height(true);if

[WARNING] Try to use a single 'var' statement per scope.
(event){var t=null; ---> var  <--- elem=this.div.find(".AnyTime-focus-btn")

[WARNING] Try to use a single 'var' statement per scope.
this.div.find(".AnyTime-focus-btn"); ---> var  <--- key=event.keyCode||event.which;

[WARNING] Try to use a single 'var' statement per scope.
()-1);}else{ ---> var  <--- mo=t.getMonth()-1;

[WARNING] Try to use a single 'var' statement per scope.
()+1);}else{ ---> var  <--- mo=t.getMonth()+1;

[WARNING] The variable mo has already been declared in the same scope...
)+1);}else{var  ---> mo <--- =t.getMonth()+1;if

[WARNING] Try to use a single 'var' statement per scope.
val("").change(); ---> var  <--- _this=this;setTimeout(function(){

[WARNING] Try to use a single 'var' statement per scope.
:function(event){var h; ---> var  <--- t;var elem=$(event.target

[WARNING] Try to use a single 'var' statement per scope.
event){var h;var t; ---> var  <--- elem=$(event.target);if

[WARNING] Try to use a single 'var' statement per scope.
.text());}else{ ---> var  <--- str=elem.text();t=

[WARNING] Try to use a single 'var' statement per scope.
offSI=elem[0].AnyTime_offSI; ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- txt=elem.text();if(

[WARNING] Try to use a single 'var' statement per scope.
.askYear(event);}else{ ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
hasClass("AnyTime-out-btn")){return;} ---> var  <--- era=1;var year=this.time

[WARNING] Try to use a single 'var' statement per scope.
{return;}var era=1; ---> var  <--- year=this.time.getFullYear();

[WARNING] Try to use a single 'var' statement per scope.
=="0000"){year=1;} ---> var  <--- t=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
=this.inp.offset(); ---> var  <--- bodyWidth=$(document.body).outerWidth

[WARNING] Try to use a single 'var' statement per scope.
.body).outerWidth(true); ---> var  <--- pickerWidth=this.div.outerWidth(true)

[WARNING] Try to use a single 'var' statement per scope.
this.div.outerWidth(true); ---> var  <--- left=off.left;if(left+

[WARNING] Try to use a single 'var' statement per scope.
bodyWidth-(pickerWidth+20);} ---> var  <--- top=off.top-this.div.

[WARNING] Try to use a single 'var' statement per scope.
:left)+"px"});} ---> var  <--- wOff=this.div.offset();

[WARNING] Try to use a single 'var' statement per scope.
.oDiv.is(":visible")){ ---> var  <--- oOff=this.oLab.offset();

[WARNING] Try to use a single 'var' statement per scope.
:0,left:0};} ---> var  <--- oW=this.oDiv.AnyTime_width(true)

[WARNING] Try to use a single 'var' statement per scope.
this.oDiv.AnyTime_width(true); ---> var  <--- wW=this.div.AnyTime_width(true)

[WARNING] Try to use a single 'var' statement per scope.
{oOff.left=2;}} ---> var  <--- oH=this.oDiv.AnyTime_height(true)

[WARNING] Try to use a single 'var' statement per scope.
this.oDiv.AnyTime_height(true); ---> var  <--- wH=this.div.AnyTime_height(true)

[WARNING] Try to use a single 'var' statement per scope.
.yDiv.is(":visible")){ ---> var  <--- yOff=this.yLab.offset();

[WARNING] Try to use a single 'var' statement per scope.
0,0,0,0); ---> var  <--- cmpHi=new Date(this.time.getTime

[WARNING] Try to use a single 'var' statement per scope.
23,59,59,999); ---> var  <--- current=this.time.getFullYear();

[WARNING] Try to use a single 'var' statement per scope.
this.time.getFullYear()); ---> var  <--- i=0;current=this.time.

[WARNING] Try to use a single 'var' statement per scope.
=this.time.getDate(); ---> var  <--- currentMonth=this.time.getMonth();

[WARNING] Try to use a single 'var' statement per scope.
=this.time.getMonth(); ---> var  <--- dow1=cmpLo.getDay();if(

[WARNING] Try to use a single 'var' statement per scope.
>dow1){dow1+=7;} ---> var  <--- wom=0,dow=0;$(

[WARNING] Try to use a single 'var' statement per scope.
this.time.getDate()); ---> var  <--- not12=!this.twelveHr;var hr=

[WARNING] Try to use a single 'var' statement per scope.
;var not12=!this.twelveHr; ---> var  <--- hr=this.time.getHours();

[WARNING] Try to use a single 'var' statement per scope.
){var html=this.innerHTML; ---> var  <--- i;if(not12){i=Number

[WARNING] Try to use a single 'var' statement per scope.
this.time.getHours()); ---> var  <--- units=this.time.getMinutes();

[WARNING] Try to use a single 'var' statement per scope.
=this.time.getMinutes(); ---> var  <--- tens=String(Math.floor(units/

[WARNING] Try to use a single 'var' statement per scope.
.floor(units/10)); ---> var  <--- ones=String(units%10);$

[WARNING] Try to use a single 'var' statement per scope.
oConv.setUtcFormatOffsetSubIndex(this.offSI); ---> var  <--- tzs=this.oConv.format(this.

[WARNING] Try to use a single 'var' statement per scope.
;this.div.show(); ---> var  <--- d,totH=0,totW=0,

[WARNING] Try to use a single 'var' statement per scope.
dMinW;totH+=this.dMinH;} ---> var  <--- w=0,h=0,timeH=

[WARNING] Try to use a single 'var' statement per scope.
;}if(this.dO){ ---> var  <--- dOW=this.dT.width()-

[WARNING] Try to use a single 'var' statement per scope.
(fBtn){var i,legal; ---> var  <--- era=1;var yearValue=this.time

[WARNING] Try to use a single 'var' statement per scope.
i,legal;var era=1; ---> var  <--- yearValue=this.time.getFullYear();

[WARNING] Try to use a single 'var' statement per scope.
AnyTime.pad(yearValue,4); ---> var  <--- eY=_this.earliest&&new Date(_this

[WARNING] Try to use a single 'var' statement per scope.
_this.earliest).getFullYear(); ---> var  <--- lY=_this.latest&&new Date(_this

[WARNING] Try to use a single 'var' statement per scope.
=form.fields.length;for( ---> var  <--- i=0,len=arLen;i<

[WARNING] Try to use a single 'var' statement per scope.
=action.form.length;for( ---> var  <--- i=0,len=arLen;i<

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(c,j){function ---> k <--- (a){return!c(a)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{functionk(a){return! ---> c <--- (a).parents().andSelf(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
k(a){return!c( ---> a <--- ).parents().andSelf().

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).filter(function(){return ---> c <--- .curCSS(this,"visibility")==="hidden"||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
curCSS(this,"visibility")==="hidden"|| ---> c <--- .expr.filters.hidden(this);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this);}).length;} ---> c <--- .ui=c.ui||{};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).length;}c.ui= ---> c <--- .ui||{};if(!c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui||{};if(! ---> c <--- .ui.version){c.extend(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(!c.ui.version){ ---> c <--- .extend(c.ui,{version:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.version){c.extend( ---> c <--- .ui,{version:"1.8.5",keyCode:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
38,WINDOWS:91}}); ---> c <--- .fn.extend({_focus:c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.fn.extend({_focus: ---> c <--- .fn.focus,focus:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){returntypeof ---> a <--- ==="number"?this.each(function()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(){var  ---> d <--- =this;setTimeout(function(){c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this;setTimeout(function(){ ---> c <--- (d).focus();b&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;setTimeout(function(){c( ---> d <--- ).focus();b&&b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c(d).focus(); ---> b <--- &&b.call(d);},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d).focus();b&& ---> b <--- .call(d);},a)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
();b&&b.call( ---> d <--- );},a);}):

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.call(d);}, ---> a <--- );}):this._focus.apply

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},scrollParent:function(){var  ---> a <--- ;a=c.browser.msie&&/(static|relative)/

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollParent:function(){var a; ---> a <--- =c.browser.msie&&/(static|relative)/.test

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var a;a= ---> c <--- .browser.msie&&/(static|relative)/.test(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){return/(relative|absolute|fixed)/.test( ---> c <--- .curCSS(this,"position",1))

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,1))&&/(auto|scroll)/.test( ---> c <--- .curCSS(this,"overflow",1)+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
curCSS(this,"overflow",1)+ ---> c <--- .curCSS(this,"overflow-y",1)+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
curCSS(this,"overflow-y",1)+ ---> c <--- .curCSS(this,"overflow-x",1))

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){return/(auto|scroll)/.test( ---> c <--- .curCSS(this,"overflow",1)+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
curCSS(this,"overflow",1)+ ---> c <--- .curCSS(this,"overflow-y",1)+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
curCSS(this,"overflow-y",1)+ ---> c <--- .curCSS(this,"overflow-x",1))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.css("position"))||! ---> a <--- .length?c(document):a;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"position"))||!a.length? ---> c <--- (document):a;},zIndex:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.length?c(document): ---> a <--- ;},zIndex:function(a){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
zIndex:function(a){if( ---> a <--- !==j){returnthis.css("zIndex"

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){if(a!== ---> j <--- ){returnthis.css("zIndex",a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnthis.css("zIndex", ---> a <--- );}if(this.length){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(this.length){ ---> a <--- =c(this[0]);for

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.length){a= ---> c <--- (this[0]);for(var 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this[0]);for(var  ---> b <--- ;a.length&&a[0]!==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0]);for(var b; ---> a <--- .length&&a[0]!==document;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var b;a.length&& ---> a <--- [0]!==document;){b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a[0]!==document;){ ---> b <--- =a.css("position");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0]!==document;){b= ---> a <--- .css("position");if(b===

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.css("position");if( ---> b <--- ==="absolute"||b==="relative"||b==="fixed"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"position");if(b==="absolute"|| ---> b <--- ==="relative"||b==="fixed"){b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b==="absolute"||b==="relative"|| ---> b <--- ==="fixed"){b=parseInt(a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b==="relative"||b==="fixed"){ ---> b <--- =parseInt(a.css("zIndex"))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b==="fixed"){b=parseInt( ---> a <--- .css("zIndex"));if(!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"zIndex"));if(!isNaN( ---> b <--- )&&b!=0){returnb;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!isNaN(b)&& ---> b <--- !=0){returnb;}}a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b)&&b!=0){return ---> b <--- ;}}a=a.parent()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!=0){returnb;}} ---> a <--- =a.parent();}}return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnb;}}a= ---> a <--- .parent();}}return0;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
bind("mousedown.ui-disableSelection selectstart.ui-disableSelection",function(a){ ---> a <--- .preventDefault();});},

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
unbind(".ui-disableSelection");}}); ---> c <--- .each(["Width","Height"],function

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(a,b){function ---> d <--- (f,g,l,m){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f,g,l,m){ ---> c <--- .each(e,function(){g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
l,m){c.each( ---> e <--- ,function(){g-=parseFloat(c

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(e,function(){ ---> g <--- -=parseFloat(c.curCSS(f,"padding"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){g-=parseFloat( ---> c <--- .curCSS(f,"padding"+this,true

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{g-=parseFloat(c.curCSS( ---> f <--- ,"padding"+this,true))||0

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,true))||0;if( ---> l <--- ){g-=parseFloat(c.curCSS(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)||0;if(l){ ---> g <--- -=parseFloat(c.curCSS(f,"border"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(l){g-=parseFloat( ---> c <--- .curCSS(f,"border"+this+"Width"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{g-=parseFloat(c.curCSS( ---> f <--- ,"border"+this+"Width",true))

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
true))||0;}if( ---> m <--- ){g-=parseFloat(c.curCSS(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
||0;}if(m){ ---> g <--- -=parseFloat(c.curCSS(f,"margin"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(m){g-=parseFloat( ---> c <--- .curCSS(f,"margin"+this,true

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{g-=parseFloat(c.curCSS( ---> f <--- ,"margin"+this,true))||0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)||0;}});return ---> g <--- ;}var e=b==="Width"?[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}});returng;}var  ---> e <--- =b==="Width"?["Left","Right"]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);returng;}var e= ---> b <--- ==="Width"?["Left","Right"]:[

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"Right"]:["Top","Bottom"], ---> h <--- =b.toLowerCase(),i={

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:["Top","Bottom"],h= ---> b <--- .toLowerCase(),i={innerWidth:

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=b.toLowerCase(), ---> i <--- ={innerWidth:c.fn.innerWidth,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
toLowerCase(),i={innerWidth: ---> c <--- .fn.innerWidth,innerHeight:c.fn

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.fn.innerWidth,innerHeight: ---> c <--- .fn.innerHeight,outerWidth:c.fn

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.fn.innerHeight,outerWidth: ---> c <--- .fn.outerWidth,outerHeight:c.fn

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.fn.outerWidth,outerHeight: ---> c <--- .fn.outerHeight};c.fn[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
outerHeight:c.fn.outerHeight}; ---> c <--- .fn["inner"+b]=function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
outerHeight};c.fn["inner"+ ---> b <--- ]=function(f){if(f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
]=function(f){if( ---> f <--- ===j){returni["inner"+b

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
function(f){if(f=== ---> j <--- ){returni["inner"+b].

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(f===j){return ---> i <--- ["inner"+b].call(this)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
===j){returni["inner"+ ---> b <--- ].call(this);}returnthis

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.each(function(){ ---> c <--- .style(this,h,d(this

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(){c.style(this, ---> h <--- ,d(this,f)+"px")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.style(this,h, ---> d <--- (this,f)+"px");}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,h,d(this, ---> f <--- )+"px");});};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+"px");});}; ---> c <--- .fn["outer"+b]=function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;};c.fn["outer"+ ---> b <--- ]=function(f,g){if

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(f,g){if(typeof ---> f <--- !=="number"){returni["outer"+b

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
if(typeoff!=="number"){return ---> i <--- ["outer"+b].call(this,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
!=="number"){returni["outer"+ ---> b <--- ].call(this,f);}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"outer"+b].call(this, ---> f <--- );}returnthis.each(function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.each(function(){ ---> c <--- .style(this,h,d(this

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(){c.style(this, ---> h <--- ,d(this,f,true,g

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.style(this,h, ---> d <--- (this,f,true,g)+

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,h,d(this, ---> f <--- ,true,g)+"px");}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,d(this,f,true, ---> g <--- )+"px");});};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;});};}); ---> c <--- .extend(c.expr[":"],

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
};});c.extend( ---> c <--- .expr[":"],{data:function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d){return!! ---> c <--- .data(a,d[3])

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){return!!c.data( ---> a <--- ,d[3]);},focusable

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
return!!c.data(a, ---> d <--- [3]);},focusable:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,focusable:function(a){var  ---> b <--- =a.nodeName.toLowerCase(),d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> a <--- .nodeName.toLowerCase(),d=c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.nodeName.toLowerCase(), ---> d <--- =c.attr(a,"tabindex");

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.nodeName.toLowerCase(),d= ---> c <--- .attr(a,"tabindex");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(),d=c.attr( ---> a <--- ,"tabindex");if("area"===b)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"tabindex");if("area"=== ---> b <--- ){b=a.parentNode;d=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);if("area"===b){ ---> b <--- =a.parentNode;d=b.name

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if("area"===b){b= ---> a <--- .parentNode;d=b.name;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b){b=a.parentNode; ---> d <--- =b.name;if(!a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=a.parentNode;d= ---> b <--- .name;if(!a.href||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=b.name;if(! ---> a <--- .href||!d||b.nodeName.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!a.href||! ---> d <--- ||b.nodeName.toLowerCase()!=="map"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(!a.href||!d|| ---> b <--- .nodeName.toLowerCase()!=="map"){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)!=="map"){returnfalse;} ---> a <--- =c("img[usemap=#"+d+"]")[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"map"){returnfalse;}a= ---> c <--- ("img[usemap=#"+d+"]")[0]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
false;}a=c("img[usemap=#"+ ---> d <--- +"]")[0];return!!

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"]")[0];return!! ---> a <--- &&k(a);}return(/input|select|textarea|button|object/

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
[0];return!!a&& ---> k <--- (a);}return(/input|select|textarea|button|object/.test

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
];return!!a&&k( ---> a <--- );}return(/input|select|textarea|button|object/.test(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);}return(/input|select|textarea|button|object/.test( ---> b <--- )?!a.disabled:"a"==b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(/input|select|textarea|button|object/.test(b)?! ---> a <--- .disabled:"a"==b?a.href

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)?!a.disabled:"a"== ---> b <--- ?a.href||!isNaN(d)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!a.disabled:"a"==b? ---> a <--- .href||!isNaN(d):!

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b?a.href||!isNaN( ---> d <--- ):!isNaN(d))&&k

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!isNaN(d):!isNaN( ---> d <--- ))&&k(a);},

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
):!isNaN(d))&& ---> k <--- (a);},tabbable:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!isNaN(d))&&k( ---> a <--- );},tabbable:function(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,tabbable:function(a){var  ---> b <--- =c.attr(a,"tabindex");

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> c <--- .attr(a,"tabindex");return(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=c.attr( ---> a <--- ,"tabindex");return(isNaN(b)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"tabindex");return(isNaN( ---> b <--- )||b>=0)&&c(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);return(isNaN(b)|| ---> b <--- >=0)&&c(a).is

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(b)||b>=0)&& ---> c <--- (a).is(":focusable");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)||b>=0)&&c( ---> a <--- ).is(":focusable");}})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
is(":focusable");}}); ---> c <--- (function(){var a=document.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);c(function(){var  ---> a <--- =document.createElement("div"),b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a=document.createElement("div"), ---> b <--- =document.body;c.extend(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"div"),b=document.body; ---> c <--- .extend(a.style,{minHeight:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=document.body;c.extend( ---> a <--- .style,{minHeight:"100px",height:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,borderWidth:0}); ---> c <--- .support.minHeight=b.appendChild(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
});c.support.minHeight= ---> b <--- .appendChild(a).offsetHeight===100;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.support.minHeight=b.appendChild( ---> a <--- ).offsetHeight===100;b.removeChild(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
appendChild(a).offsetHeight===100; ---> b <--- .removeChild(a).style.display=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetHeight===100;b.removeChild( ---> a <--- ).style.display="none";})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
style.display="none";}); ---> c <--- .extend(c.ui,{plugin:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"none";});c.extend( ---> c <--- .ui,{plugin:{add:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b,d){ ---> a <--- =c.ui[a].prototype;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,d){a= ---> c <--- .ui[a].prototype;for(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d){a=c.ui[ ---> a <--- ].prototype;for(var e in d

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[a].prototype;for(var  ---> e <---  in d){a.plugins[e]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
].prototype;for(var e in  ---> d <--- ){a.plugins[e]=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(var e in d){ ---> a <--- .plugins[e]=a.plugins[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e in d){a.plugins[ ---> e <--- ]=a.plugins[e]||[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){a.plugins[e]= ---> a <--- .plugins[e]||[];a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
plugins[e]=a.plugins[ ---> e <--- ]||[];a.plugins[e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.plugins[e]||[]; ---> a <--- .plugins[e].push([b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]||[];a.plugins[ ---> e <--- ].push([b,d[e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.plugins[e].push([ ---> b <--- ,d[e]]);}}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[e].push([b, ---> d <--- [e]]);}},call

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
].push([b,d[ ---> e <--- ]]);}},call:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d){if(( ---> b <--- =a.plugins[b])&&a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d){if((b= ---> a <--- .plugins[b])&&a.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if((b=a.plugins[ ---> b <--- ])&&a.element[0].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.plugins[b])&& ---> a <--- .element[0].parentNode){for

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0].parentNode){for(var  ---> e <--- =0;e<b.length;e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var e=0; ---> e <--- <b.length;e++){a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var e=0;e< ---> b <--- .length;e++){a.options

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;e<b.length; ---> e <--- ++){a.options[b[e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<b.length;e++){ ---> a <--- .options[b[e][0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;e++){a.options[ ---> b <--- [e][0]]&&b[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
++){a.options[b[ ---> e <--- ][0]]&&b[e]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b[e][0]]&& ---> b <--- [e][1].apply(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e][0]]&&b[ ---> e <--- ][1].apply(a.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[e][1].apply( ---> a <--- .element,d);}}}}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
1].apply(a.element, ---> d <--- );}}}},contains:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){returndocument.compareDocumentPosition? ---> a <--- .compareDocumentPosition(b)&16:a!==

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
returndocument.compareDocumentPosition?a.compareDocumentPosition( ---> b <--- )&16:a!==b&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.compareDocumentPosition(b)&16: ---> a <--- !==b&&a.contains(b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
compareDocumentPosition(b)&16:a!== ---> b <--- &&a.contains(b);},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b)&16:a!==b&& ---> a <--- .contains(b);},hasScroll:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:a!==b&&a.contains( ---> b <--- );},hasScroll:function(a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){if( ---> c <--- (a).css("overflow")==="hidden"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b){if(c( ---> a <--- ).css("overflow")==="hidden"){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)==="hidden"){returnfalse;} ---> b <--- =b&&b==="left"?"scrollLeft":"scrollTop"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"hidden"){returnfalse;}b= ---> b <--- &&b==="left"?"scrollLeft":"scrollTop";var 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnfalse;}b=b&& ---> b <--- ==="left"?"scrollLeft":"scrollTop";var d=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b==="left"?"scrollLeft":"scrollTop";var  ---> d <--- =false;if(a[b]>

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"scrollTop";var d=false;if( ---> a <--- [b]>0){returntrue;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var d=false;if(a[ ---> b <--- ]>0){returntrue;}a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]>0){returntrue;} ---> a <--- [b]=1;d=a[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0){returntrue;}a[ ---> b <--- ]=1;d=a[b]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}a[b]=1; ---> d <--- =a[b]>0;a[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a[b]=1;d= ---> a <--- [b]>0;a[b]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b]=1;d=a[ ---> b <--- ]>0;a[b]=0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=a[b]>0; ---> a <--- [b]=0;returnd;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a[b]>0;a[ ---> b <--- ]=0;returnd;},isOverAxis

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;a[b]=0;return ---> d <--- ;},isOverAxis:function(a,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b,d){return ---> a <--- >b&&a<b+d;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d){returna> ---> b <--- &&a<b+d;},isOver

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d){returna>b&& ---> a <--- <b+d;},isOver:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){returna>b&&a< ---> b <--- +d;},isOver:function(a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
returna>b&&a<b+ ---> d <--- ;},isOver:function(a,b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,e,h,i){return ---> c <--- .ui.isOverAxis(a,d,h

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnc.ui.isOverAxis( ---> a <--- ,d,h)&&c.ui.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
returnc.ui.isOverAxis(a, ---> d <--- ,h)&&c.ui.isOverAxis(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.isOverAxis(a,d, ---> h <--- )&&c.ui.isOverAxis(b,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
isOverAxis(a,d,h)&& ---> c <--- .ui.isOverAxis(b,e,i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
h)&&c.ui.isOverAxis( ---> b <--- ,e,i);}});

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.ui.isOverAxis(b, ---> e <--- ,i);}});}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.isOverAxis(b,e, ---> i <--- );}});}})(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(b,j){if( ---> b <--- .cleanData){var k=b.cleanData

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(b.cleanData){var  ---> k <--- =b.cleanData;b.cleanData=function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.cleanData){var k= ---> b <--- .cleanData;b.cleanData=function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var k=b.cleanData; ---> b <--- .cleanData=function(a){for(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(a){for(var  ---> c <--- =0,d;(d=a[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var c=0, ---> d <--- ;(d=a[c])!=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(var c=0,d;( ---> d <--- =a[c])!=null;c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c=0,d;(d= ---> a <--- [c])!=null;c++)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0,d;(d=a[ ---> c <--- ])!=null;c++){b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=a[c])!=null; ---> c <--- ++){b(d).triggerHandler(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
])!=null;c++){ ---> b <--- (d).triggerHandler("remove");}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!=null;c++){b( ---> d <--- ).triggerHandler("remove");}k(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
d).triggerHandler("remove");} ---> k <--- (a);};}else{var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.triggerHandler("remove");}k( ---> a <--- );};}else{var l=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
a);};}else{var  ---> l <--- =b.fn.remove;b.fn

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;};}else{var l= ---> b <--- .fn.remove;b.fn.remove

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var l=b.fn.remove; ---> b <--- .fn.remove=function(a,c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){if(! ---> c <--- ){if(!a||b.filter

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!c){if(! ---> a <--- ||b.filter(a,[this]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
!c){if(!a|| ---> b <--- .filter(a,[this]).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!a||b.filter( ---> a <--- ,[this]).length){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,[this]).length){ ---> b <--- ("*",this).add([this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
]).each(function(){ ---> b <--- (this).triggerHandler("remove");}

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
"remove");});}}return ---> l <--- .call(b(this),a,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);}}returnl.call( ---> b <--- (this),a,c);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
l.call(b(this), ---> a <--- ,c);});};}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
call(b(this),a, ---> c <--- );});};}b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c);});};} ---> b <--- .widget=function(a,c,d

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,c,d){var  ---> e <--- =a.split(".")[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c,d){var e= ---> a <--- .split(".")[0],f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.split(".")[0], ---> f <--- ;a=a.split(".")[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(".")[0],f; ---> a <--- =a.split(".")[1]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)[0],f;a= ---> a <--- .split(".")[1];f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.split(".")[1]; ---> f <--- =e+"-"+a;if(!

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(".")[1];f= ---> e <--- +"-"+a;if(!d)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1];f=e+"-"+ ---> a <--- ;if(!d){d=c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e+"-"+a;if(! ---> d <--- ){d=c;c=b.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+a;if(!d){ ---> d <--- =c;c=b.Widget;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!d){d= ---> c <--- ;c=b.Widget;}b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(!d){d=c; ---> c <--- =b.Widget;}b.expr[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d){d=c;c= ---> b <--- .Widget;}b.expr[":"]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c;c=b.Widget;} ---> b <--- .expr[":"][f]=function

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;}b.expr[":"][ ---> f <--- ]=function(h){return!!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(h){return!! ---> b <--- .data(h,a);};

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){return!!b.data( ---> h <--- ,a);};b[e]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
return!!b.data(h, ---> a <--- );};b[e]=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
data(h,a);}; ---> b <--- [e]=b[e]||{

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h,a);};b[ ---> e <--- ]=b[e]||{};

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);};b[e]= ---> b <--- [e]||{};b[e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
};b[e]=b[ ---> e <--- ]||{};b[e][

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b[e]||{}; ---> b <--- [e][a]=function(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[e]||{};b[ ---> e <--- ][a]=function(h,g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||{};b[e][ ---> a <--- ]=function(h,g){arguments

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{arguments.length&&this._createWidget( ---> h <--- ,g);};c=new c

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.length&&this._createWidget(h, ---> g <--- );};c=new c;c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_createWidget(h,g);}; ---> c <--- =new c;c.options=b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,g);};c=new  ---> c <--- ;c.options=b.extend(true

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);};c=new c; ---> c <--- .options=b.extend(true,{

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c=new c;c.options= ---> b <--- .extend(true,{},c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.extend(true,{}, ---> c <--- .options);b[e][a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,{},c.options); ---> b <--- [e][a].prototype=b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
},c.options);b[ ---> e <--- ][a].prototype=b.extend

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options);b[e][ ---> a <--- ].prototype=b.extend(true,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[e][a].prototype= ---> b <--- .extend(true,c,{namespace:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.prototype=b.extend(true, ---> c <--- ,{namespace:e,widgetName:a,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
extend(true,c,{namespace: ---> e <--- ,widgetName:a,widgetEventPrefix:b[e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c,{namespace:e,widgetName: ---> a <--- ,widgetEventPrefix:b[e][a]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:e,widgetName:a,widgetEventPrefix: ---> b <--- [e][a].prototype.widgetEventPrefix

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,widgetName:a,widgetEventPrefix:b[ ---> e <--- ][a].prototype.widgetEventPrefix||a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,widgetEventPrefix:b[e][ ---> a <--- ].prototype.widgetEventPrefix||a,widgetBaseClass:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
][a].prototype.widgetEventPrefix|| ---> a <--- ,widgetBaseClass:f},d);b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.prototype.widgetEventPrefix||a,widgetBaseClass: ---> f <--- },d);b.widget.bridge

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
widgetEventPrefix||a,widgetBaseClass:f}, ---> d <--- );b.widget.bridge(a,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,widgetBaseClass:f},d); ---> b <--- .widget.bridge(a,b[e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d);b.widget.bridge( ---> a <--- ,b[e][a]);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.widget.bridge(a, ---> b <--- [e][a]);};

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.widget.bridge(a,b[ ---> e <--- ][a]);};b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
bridge(a,b[e][ ---> a <--- ]);};b.widget.bridge

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e][a]);}; ---> b <--- .widget.bridge=function(a,c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
bridge=function(a,c){ ---> b <--- .fn[a]=function(d)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,c){b.fn[ ---> a <--- ]=function(d){var e=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a]=function(d){var  ---> e <--- =typeofd==="string",f=Array.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(d){var e=typeof ---> d <--- ==="string",f=Array.prototype.slice

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{var e=typeofd==="string", ---> f <--- =Array.prototype.slice.call(arguments

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
slice.call(arguments,1), ---> h <--- =this;d=!e&&f.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
arguments,1),h=this; ---> d <--- =!e&&f.length?b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
),h=this;d=! ---> e <--- &&f.length?b.extend.apply

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
h=this;d=!e&& ---> f <--- .length?b.extend.apply(null

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d=!e&&f.length? ---> b <--- .extend.apply(null,[true,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
extend.apply(null,[true, ---> d <--- ].concat(f)):d;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,[true,d].concat( ---> f <--- )):d;if(e&&d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d].concat(f)): ---> d <--- ;if(e&&d.substring(0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(f)):d;if( ---> e <--- &&d.substring(0,1)===

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)):d;if(e&& ---> d <--- .substring(0,1)==="_")

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
0,1)==="_"){return ---> h <--- ;}e?this.each(function(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)==="_"){returnh;} ---> e <--- ?this.each(function(){var 

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(){var  ---> g <--- =b.data(this,a);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var g= ---> b <--- .data(this,a);if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var g=b.data(this, ---> a <--- );if(!g){throw"cannot call methods on "

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,a);if(! ---> g <--- ){throw"cannot call methods on "+a+" prior to initialization; attempted to call method '"+d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!g){throw"cannot call methods on "+ ---> a <--- +" prior to initialization; attempted to call method '"+d+"'";}if(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){throw"cannot call methods on "+a+" prior to initialization; attempted to call method '"+ ---> d <--- +"'";}if(!b.isFunction

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+d+"'";}if(! ---> b <--- .isFunction(g[d])){

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(!b.isFunction( ---> g <--- [d])){throw"no such method '"+d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!b.isFunction(g[ ---> d <--- ])){throw"no such method '"+d+"' for "

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[d])){throw"no such method '"+ ---> d <--- +"' for "+a+" widget instance";}var i

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){throw"no such method '"+d+"' for "+ ---> a <--- +" widget instance";}var i=g[d

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+"' for "+a+" widget instance";}var  ---> i <--- =g[d].apply(g,

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+a+" widget instance";}var i= ---> g <--- [d].apply(g,f)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+" widget instance";}var i=g[ ---> d <--- ].apply(g,f);if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
i=g[d].apply( ---> g <--- ,f);if(i!==g&&

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
g[d].apply(g, ---> f <--- );if(i!==g&&i!==

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(g,f);if( ---> i <--- !==g&&i!==j){h=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g,f);if(i!== ---> g <--- &&i!==j){h=i;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
f);if(i!==g&& ---> i <--- !==j){h=i;returnfalse

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(i!==g&&i!== ---> j <--- ){h=i;returnfalse;}

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
i!==g&&i!==j){ ---> h <--- =i;returnfalse;}}):

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
g&&i!==j){h= ---> i <--- ;returnfalse;}}):this.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(){var  ---> g <--- =b.data(this,a);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var g= ---> b <--- .data(this,a);g?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var g=b.data(this, ---> a <--- );g?g.option(d||

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b.data(this,a); ---> g <--- ?g.option(d||{})

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
data(this,a);g? ---> g <--- .option(d||{})._init

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a);g?g.option( ---> d <--- ||{})._init():b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||{})._init(): ---> b <--- .data(this,a,new c(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
():b.data(this, ---> a <--- ,new c(d,this));

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.data(this,a,new  ---> c <--- (d,this));});

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
data(this,a,new c( ---> d <--- ,this));});returnh

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,this));});return ---> h <--- ;};};b.Widget=function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);returnh;};}; ---> b <--- .Widget=function(a,c){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{arguments.length&&this._createWidget( ---> a <--- ,c);};b.Widget.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.length&&this._createWidget(a, ---> c <--- );};b.Widget.prototype=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_createWidget(a,c);}; ---> b <--- .Widget.prototype={widgetName:"widget",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_createWidget:function(a,c){ ---> b <--- .data(c,this.widgetName,this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,c){b.data( ---> c <--- ,this.widgetName,this);this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
widgetName,this);this.element= ---> b <--- (c);this.options=b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this);this.element=b( ---> c <--- );this.options=b.extend(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b(c);this.options= ---> b <--- .extend(true,{},this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
true,{},this.options, ---> b <--- .metadata&&b.metadata.get(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,this.options,b.metadata&& ---> b <--- .metadata.get(c)[this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.metadata&&b.metadata.get( ---> c <--- )[this.widgetName],a);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)[this.widgetName], ---> a <--- );var d=this;this.element

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.widgetName],a);var  ---> d <--- =this;this.element.bind("remove."

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.widgetName,function(){ ---> d <--- .destroy();});this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,c){var  ---> d <--- =a,e=this;if(arguments

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,c){var d= ---> a <--- ,e=this;if(arguments.length

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,c){var d=a, ---> e <--- =this;if(arguments.length===0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(arguments.length===0){return ---> b <--- .extend({},e.options)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnb.extend({}, ---> e <--- .options);}if(typeofa===

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e.options);}if(typeof ---> a <--- ==="string"){if(c===j)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofa==="string"){if( ---> c <--- ===j){returnthis.options[a

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
a==="string"){if(c=== ---> j <--- ){returnthis.options[a];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
===j){returnthis.options[ ---> a <--- ];}d={};d[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.options[a];} ---> d <--- ={};d[a]=c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a];}d={}; ---> d <--- [a]=c;}b.each

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}d={};d[ ---> a <--- ]=c;}b.each(d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
={};d[a]= ---> c <--- ;}b.each(d,function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;d[a]=c;} ---> b <--- .each(d,function(f,h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
]=c;}b.each( ---> d <--- ,function(f,h){e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d,function(f,h){ ---> e <--- ._setOption(f,h);})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f,h){e._setOption( ---> f <--- ,h);});returne;

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
h){e._setOption(f, ---> h <--- );});returne;},

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
f,h);});return ---> e <--- ;},_setOption:function(a,c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,c){this.options[ ---> a <--- ]=c;if(a==="disabled")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.options[a]= ---> c <--- ;if(a==="disabled"){this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options[a]=c;if( ---> a <--- ==="disabled"){this.widget()[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"disabled"){this.widget()[ ---> c <--- ?"addClass":"removeClass"](this.widgetBaseClass+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
widgetBaseClass+"-disabled ui-state-disabled").attr("aria-disabled", ---> c <--- );}returnthis;},enable:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,c,d){var  ---> e <--- =this.options[a];c=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var e=this.options[ ---> a <--- ];c=b.Event(c)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
e=this.options[a]; ---> c <--- =b.Event(c);c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options[a];c= ---> b <--- .Event(c);c.type=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a];c=b.Event( ---> c <--- );c.type=(a===this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=b.Event(c); ---> c <--- .type=(a===this.widgetEventPrefix?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c);c.type=( ---> a <--- ===this.widgetEventPrefix?a:this.widgetEventPrefix

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
type=(a===this.widgetEventPrefix? ---> a <--- :this.widgetEventPrefix+a).toLowerCase(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.widgetEventPrefix?a:this.widgetEventPrefix+ ---> a <--- ).toLowerCase();d=d||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
widgetEventPrefix+a).toLowerCase(); ---> d <--- =d||{};if(c.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a).toLowerCase();d= ---> d <--- ||{};if(c.originalEvent)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d=d||{};if( ---> c <--- .originalEvent){a=b.event.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
};if(c.originalEvent){ ---> a <--- =b.event.props.length;for

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c.originalEvent){a= ---> b <--- .event.props.length;for(var 

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
event.props.length;for(var  ---> f <--- ;a;){f=b.event

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
props.length;for(var f; ---> a <--- ;){f=b.event.props

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var f;a;){ ---> f <--- =b.event.props[--a]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var f;a;){f= ---> b <--- .event.props[--a];c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f=b.event.props[-- ---> a <--- ];c[f]=c.originalEvent

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.event.props[--a]; ---> c <--- [f]=c.originalEvent[f]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.props[--a];c[ ---> f <--- ]=c.originalEvent[f];}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
--a];c[f]= ---> c <--- .originalEvent[f];}}this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c[f]=c.originalEvent[ ---> f <--- ];}}this.element.trigger(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}this.element.trigger( ---> c <--- ,d);return!(b.isFunction

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}this.element.trigger(c, ---> d <--- );return!(b.isFunction(e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,d);return!( ---> b <--- .isFunction(e)&&e.call(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);return!(b.isFunction( ---> e <--- )&&e.call(this.element[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
!(b.isFunction(e)&& ---> e <--- .call(this.element[0],

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this.element[0], ---> c <--- ,d)===false||c.isDefaultPrevented(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element[0],c, ---> d <--- )===false||c.isDefaultPrevented())

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
],c,d)===false|| ---> c <--- .isDefaultPrevented());}};}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);
 * jQuery UI Mouse 1.8.5
 *
 * Copyright 2010, AUTHORS.txt (http://jqueryui.com/about)
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * http://docs.jquery.com/UI/Mouse
 *
 * Depends:
 *	jquery.ui.widget.js
 (function(c){ ---> c <--- .widget("ui.mouse",{options:{cancel

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_mouseInit:function(){var  ---> a <--- =this;this.element.bind("mousedown."

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.widgetName,function(b){return ---> a <--- ._mouseDown(b);}).bind

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b){returna._mouseDown( ---> b <--- );}).bind("click."+this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
widgetName,function(b){if( ---> a <--- ._preventClickEvent){a._preventClickEvent=false;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(a._preventClickEvent){ ---> a <--- ._preventClickEvent=false;b.stopImmediatePropagation()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_preventClickEvent){a._preventClickEvent=false; ---> b <--- .stopImmediatePropagation();returnfalse;}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_mouseDown:function(a){ ---> a <--- .originalEvent=a.originalEvent||{};

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){a.originalEvent= ---> a <--- .originalEvent||{};if(!a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.originalEvent||{};if(! ---> a <--- .originalEvent.mouseHandled){this._mouseStarted&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this._mouseStarted&&this._mouseUp( ---> a <--- );this._mouseDownEvent=a;var b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_mouseUp(a);this._mouseDownEvent= ---> a <--- ;var b=this,e=a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);this._mouseDownEvent=a;var  ---> b <--- =this,e=a.which==1

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_mouseDownEvent=a;var b=this, ---> e <--- =a.which==1,f=typeof

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a;var b=this,e= ---> a <--- .which==1,f=typeofthis.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=a.which==1, ---> f <--- =typeofthis.options.cancel=="string"?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofthis.options.cancel=="string"? ---> c <--- (a.target).parents().

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.cancel=="string"?c( ---> a <--- .target).parents().add(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
target).parents().add( ---> a <--- .target).filter(this.options.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
).length:false;if(! ---> e <--- ||f||!this._mouseCapture(a)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
length:false;if(!e|| ---> f <--- ||!this._mouseCapture(a)){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e||f||!this._mouseCapture( ---> a <--- )){returntrue;}this.mouseDelayMet

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseDelayTimer=setTimeout(function(){ ---> b <--- .mouseDelayMet=true;},this.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if(this._mouseDistanceMet( ---> a <--- )&&this._mouseDelayMet(a)){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_mouseDistanceMet(a)&&this._mouseDelayMet( ---> a <--- )){this._mouseStarted=this._mouseStart

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this._mouseStarted=this._mouseStart( ---> a <--- )!==false;if(!this._mouseStarted

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!this._mouseStarted){ ---> a <--- .preventDefault();returntrue;}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseMoveDelegate=function(d){return ---> b <--- ._mouseMove(d);};this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d){returnb._mouseMove( ---> d <--- );};this._mouseUpDelegate=function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseUpDelegate=function(d){return ---> b <--- ._mouseUp(d);};c(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d){returnb._mouseUp( ---> d <--- );};c(document).bind

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b._mouseUp(d);}; ---> c <--- (document).bind("mousemove."+this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.widgetName,this._mouseUpDelegate); ---> c <--- .browser.safari||a.preventDefault()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_mouseUpDelegate);c.browser.safari|| ---> a <--- .preventDefault();returna.originalEvent.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
safari||a.preventDefault();return ---> a <--- .originalEvent.mouseHandled=true;}},

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_mouseMove:function(a){if( ---> c <--- .browser.msie&&!a.button)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c.browser.msie&&! ---> a <--- .button){returnthis._mouseUp(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.button){returnthis._mouseUp( ---> a <--- );}if(this._mouseStarted){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._mouseStarted){this._mouseDrag( ---> a <--- );returna.preventDefault();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this._mouseDrag(a);return ---> a <--- .preventDefault();}if(this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if(this._mouseDistanceMet( ---> a <--- )&&this._mouseDelayMet(a)){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_mouseDistanceMet(a)&&this._mouseDelayMet( ---> a <--- )){(this._mouseStarted=this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._mouseStart(this._mouseDownEvent, ---> a <--- )!==false)?this._mouseDrag(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)!==false)?this._mouseDrag( ---> a <--- ):this._mouseUp(a);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_mouseDrag(a):this._mouseUp( ---> a <--- );}return!this._mouseStarted;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
},_mouseUp:function(a){ ---> c <--- (document).unbind("mousemove."+this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseStarted=false;this._preventClickEvent= ---> a <--- .target==this._mouseDownEvent.target;this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseDownEvent.target;this._mouseStop( ---> a <--- );}returnfalse;},_mouseDistanceMet:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(this._mouseDownEvent.pageX- ---> a <--- .pageX),Math.abs(this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(this._mouseDownEvent.pageY- ---> a <--- .pageY))>=this.options.distance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(c){ ---> c <--- .ui=c.ui||{};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(c){c.ui= ---> c <--- .ui||{};var n=/left|center|right/

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.ui||{};var  ---> n <--- =/left|center|right/,o=/top|center|bottom/,t=c

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
||{};var n=/left|center|right/, ---> o <--- =/top|center|bottom/,t=c.fn.position

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
var n=/left|center|right/,o=/top|center|bottom/, ---> t <--- =c.fn.position,u=c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=/left|center|right/,o=/top|center|bottom/,t= ---> c <--- .fn.position,u=c.fn

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
,t=c.fn.position, ---> u <--- =c.fn.offset;c.fn

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.fn.position,u= ---> c <--- .fn.offset;c.fn.position

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,u=c.fn.offset; ---> c <--- .fn.position=function(b){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(b){if(! ---> b <--- ||!b.of){returnt.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b){if(!b||! ---> b <--- .of){returnt.apply(this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
b||!b.of){return ---> t <--- .apply(this,arguments);}b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.apply(this,arguments);} ---> b <--- =c.extend({},b)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,arguments);}b= ---> c <--- .extend({},b);var 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=c.extend({}, ---> b <--- );var a=c(b.of

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
extend({},b);var  ---> a <--- =c(b.of),d=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{},b);var a= ---> c <--- (b.of),d=a[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b);var a=c( ---> b <--- .of),d=a[0]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a=c(b.of), ---> d <--- =a[0],g=(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c(b.of),d= ---> a <--- [0],g=(b.collision

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
),d=a[0], ---> g <--- =(b.collision||"flip").split

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a[0],g=( ---> b <--- .collision||"flip").split(" ")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
||"flip").split(" "), ---> e <--- =b.offset?b.offset.split

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).split(" "),e= ---> b <--- .offset?b.offset.split(" "

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
" "),e=b.offset? ---> b <--- .offset.split(" "):[0

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
" "):[0,0], ---> h <--- ,k,j;if(d.nodeType

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
:[0,0],h, ---> k <--- ,j;if(d.nodeType===9

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
0,0],h,k, ---> j <--- ;if(d.nodeType===9){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,h,k,j;if( ---> d <--- .nodeType===9){h=a.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d.nodeType===9){ ---> h <--- =a.width();k=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.nodeType===9){h= ---> a <--- .width();k=a.height

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{h=a.width(); ---> k <--- =a.height();j={

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.width();k= ---> a <--- .height();j={top:

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;k=a.height(); ---> j <--- ={top:0,left:0}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:0};}else{if( ---> d <--- .scrollTo&&d.document){h=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(d.scrollTo&& ---> d <--- .document){h=a.width(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
d.scrollTo&&d.document){ ---> h <--- =a.width();k=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollTo&&d.document){h= ---> a <--- .width();k=a.height

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{h=a.width(); ---> k <--- =a.height();j={

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.width();k= ---> a <--- .height();j={top:

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;k=a.height(); ---> j <--- ={top:a.scrollTop(),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
height();j={top: ---> a <--- .scrollTop(),left:a.scrollLeft

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.scrollTop(),left: ---> a <--- .scrollLeft()};}else{if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
()};}else{if( ---> d <--- .preventDefault){b.at="left top";

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(d.preventDefault){ ---> b <--- .at="left top";h=k=0

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
preventDefault){b.at="left top"; ---> h <--- =k=0;j={top:

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{b.at="left top";h= ---> k <--- =0;j={top:b.

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
="left top";h=k=0; ---> j <--- ={top:b.of.pageY,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
k=0;j={top: ---> b <--- .of.pageY,left:b.of

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.of.pageY,left: ---> b <--- .of.pageX};}else{h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.of.pageX};}else{ ---> h <--- =a.outerWidth();k=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageX};}else{h= ---> a <--- .outerWidth();k=a.outerHeight

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{h=a.outerWidth(); ---> k <--- =a.outerHeight();j=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.outerWidth();k= ---> a <--- .outerHeight();j=a.offset

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;k=a.outerHeight(); ---> j <--- =a.offset();}}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.outerHeight();j= ---> a <--- .offset();}}}c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.offset();}}} ---> c <--- .each(["my","at"],function

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,"at"],function(){var  ---> f <--- =(b[this]||"").

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){var f=( ---> b <--- [this]||"").split(" "

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
).split(" ");if( ---> f <--- .length===1){f=n.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
if(f.length===1){ ---> f <--- =n.test(f[0])

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
f.length===1){f= ---> n <--- .test(f[0])?f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
1){f=n.test( ---> f <--- [0])?f.concat([

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.test(f[0])? ---> f <--- .concat(["center"]):o.

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
f.concat(["center"]): ---> o <--- .test(f[0])?[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
["center"]):o.test( ---> f <--- [0])?["center"].concat

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
])?["center"].concat( ---> f <--- ):["center","center"];}f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
):["center","center"];} ---> f <--- [0]=n.test(f[

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
"center"];}f[0]= ---> n <--- .test(f[0])?f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f[0]=n.test( ---> f <--- [0])?f[0]:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.test(f[0])? ---> f <--- [0]:"center";f[1]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
)?f[0]:"center"; ---> f <--- [1]=o.test(f[

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
]:"center";f[1]= ---> o <--- .test(f[1])?f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f[1]=o.test( ---> f <--- [1])?f[1]:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.test(f[1])? ---> f <--- [1]:"center";b[this]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)?f[1]:"center"; ---> b <--- [this]=f;});if

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
]:"center";b[this]= ---> f <--- ;});if(g.length===

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
]=f;});if( ---> g <--- .length===1){g[1]

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
if(g.length===1){ ---> g <--- [1]=g[0];}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
===1){g[1]= ---> g <--- [0];}e[0]=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
1]=g[0];} ---> e <--- [0]=parseInt(e[0]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}e[0]=parseInt( ---> e <--- [0],10)||0;if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
],10)||0;if( ---> e <--- .length===1){e[1]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e.length===1){ ---> e <--- [1]=e[0];}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
===1){e[1]= ---> e <--- [0];}e[1]=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
1]=e[0];} ---> e <--- [1]=parseInt(e[1]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}e[1]=parseInt( ---> e <--- [1],10)||0;if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
],10)||0;if( ---> b <--- .at[0]==="right"){j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.at[0]==="right"){ ---> j <--- .left+=h;}else{if(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="right"){j.left+= ---> h <--- ;}else{if(b.at[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
left+=h;}else{if( ---> b <--- .at[0]==="center"){j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.at[0]==="center"){ ---> j <--- .left+=h/2;}}if

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="center"){j.left+= ---> h <--- /2;}}if(b.at

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+=h/2;}}if( ---> b <--- .at[1]==="bottom"){j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.at[1]==="bottom"){ ---> j <--- .top+=k;}else{if(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="bottom"){j.top+= ---> k <--- ;}else{if(b.at[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
top+=k;}else{if( ---> b <--- .at[1]==="center"){j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.at[1]==="center"){ ---> j <--- .top+=k/2;}}j

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="center"){j.top+= ---> k <--- /2;}}j.left+=e

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.top+=k/2;}} ---> j <--- .left+=e[0];j.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
/2;}}j.left+= ---> e <--- [0];j.top+=e[

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
j.left+=e[0]; ---> j <--- .top+=e[1];returnthis

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e[0];j.top+= ---> e <--- [1];returnthis.each(function

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(){var  ---> f <--- =c(this),l=f.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var f= ---> c <--- (this),l=f.outerWidth(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
{var f=c(this), ---> l <--- =f.outerWidth(),m=f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f=c(this),l= ---> f <--- .outerWidth(),m=f.outerHeight

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
,l=f.outerWidth(), ---> m <--- =f.outerHeight(),p=parseInt

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=f.outerWidth(),m= ---> f <--- .outerHeight(),p=parseInt(c

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
,m=f.outerHeight(), ---> p <--- =parseInt(c.curCSS(this,"marginLeft"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerHeight(),p=parseInt( ---> c <--- .curCSS(this,"marginLeft",true))

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
,"marginLeft",true))||0, ---> q <--- =parseInt(c.curCSS(this,"marginTop"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
))||0,q=parseInt( ---> c <--- .curCSS(this,"marginTop",true))

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
,"marginTop",true))||0, ---> v <--- =l+p+parseInt(c.curCSS

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,true))||0,v= ---> l <--- +p+parseInt(c.curCSS(this

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
))||0,v=l+ ---> p <--- +parseInt(c.curCSS(this,"marginRight"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,v=l+p+parseInt( ---> c <--- .curCSS(this,"marginRight",true))

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
,"marginRight",true))||0, ---> w <--- =m+q+parseInt(c.curCSS

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
,true))||0,w= ---> m <--- +q+parseInt(c.curCSS(this

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
))||0,w=m+ ---> q <--- +parseInt(c.curCSS(this,"marginBottom"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,w=m+q+parseInt( ---> c <--- .curCSS(this,"marginBottom",true))

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,"marginBottom",true))||0, ---> i <--- =c.extend({},j)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,true))||0,i= ---> c <--- .extend({},j),r

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
i=c.extend({}, ---> j <--- ),r;if(b.my[

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
.extend({},j), ---> r <--- ;if(b.my[0]===

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},j),r;if( ---> b <--- .my[0]==="right"){i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.my[0]==="right"){ ---> i <--- .left-=l;}else{if(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="right"){i.left-= ---> l <--- ;}else{if(b.my[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
left-=l;}else{if( ---> b <--- .my[0]==="center"){i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.my[0]==="center"){ ---> i <--- .left-=l/2;}}if

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="center"){i.left-= ---> l <--- /2;}}if(b.my

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-=l/2;}}if( ---> b <--- .my[1]==="bottom"){i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.my[1]==="bottom"){ ---> i <--- .top-=m;}else{if(

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="bottom"){i.top-= ---> m <--- ;}else{if(b.my[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
top-=m;}else{if( ---> b <--- .my[1]==="center"){i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.my[1]==="center"){ ---> i <--- .top-=m/2;}}i

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="center"){i.top-= ---> m <--- /2;}}i.left=parseInt

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.top-=m/2;}} ---> i <--- .left=parseInt(i.left);

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}i.left=parseInt( ---> i <--- .left);i.top=parseInt(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
left=parseInt(i.left); ---> i <--- .top=parseInt(i.top);

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
left);i.top=parseInt( ---> i <--- .top);r={left:i

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
top=parseInt(i.top); ---> r <--- ={left:i.left-p,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.top);r={left: ---> i <--- .left-p,top:i.top

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
r={left:i.left- ---> p <--- ,top:i.top-q};

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
:i.left-p,top: ---> i <--- .top-q};c.each(

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
-p,top:i.top- ---> q <--- };c.each(["left","top"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
top:i.top-q}; ---> c <--- .each(["left","top"],function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
],function(s,x){ ---> c <--- .ui.position[g[s]]

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
x){c.ui.position[ ---> g <--- [s]]&&c.ui.position

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.ui.position[g[ ---> s <--- ]]&&c.ui.position[g

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.position[g[s]]&& ---> c <--- .ui.position[g[s]]

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
]]&&c.ui.position[ ---> g <--- [s]][x](i,

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.ui.position[g[ ---> s <--- ]][x](i,{targetWidth

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
.position[g[s]][ ---> x <--- ](i,{targetWidth:h,targetHeight

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
g[s]][x]( ---> i <--- ,{targetWidth:h,targetHeight:k,

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
[x](i,{targetWidth: ---> h <--- ,targetHeight:k,elemWidth:l,elemHeight

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
i,{targetWidth:h,targetHeight: ---> k <--- ,elemWidth:l,elemHeight:m,collisionPosition

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
:h,targetHeight:k,elemWidth: ---> l <--- ,elemHeight:m,collisionPosition:r,collisionWidth

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
:k,elemWidth:l,elemHeight: ---> m <--- ,collisionPosition:r,collisionWidth:v,collisionHeight

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
:l,elemHeight:m,collisionPosition: ---> r <--- ,collisionWidth:v,collisionHeight:w,offset

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
:m,collisionPosition:r,collisionWidth: ---> v <--- ,collisionHeight:w,offset:e,my

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
:r,collisionWidth:v,collisionHeight: ---> w <--- ,offset:e,my:b.my

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:v,collisionHeight:w,offset: ---> e <--- ,my:b.my,at:b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:w,offset:e,my: ---> b <--- .my,at:b.at})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,my:b.my,at: ---> b <--- .at});});c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.at});}); ---> c <--- .fn.bgiframe&&f.bgiframe()

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
});c.fn.bgiframe&& ---> f <--- .bgiframe();f.offset(c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.bgiframe&&f.bgiframe(); ---> f <--- .offset(c.extend(i,{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.bgiframe();f.offset( ---> c <--- .extend(i,{using:b.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;f.offset(c.extend( ---> i <--- ,{using:b.using}))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.extend(i,{using: ---> b <--- .using}));});}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}));});}; ---> c <--- .ui.position={fit:{left

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(b,a){var  ---> d <--- =c(window);d=a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,a){var d= ---> c <--- (window);d=a.collisionPosition.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{var d=c(window); ---> d <--- =a.collisionPosition.left+a.collisionWidth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=c(window);d= ---> a <--- .collisionPosition.left+a.collisionWidth-d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d=a.collisionPosition.left+ ---> a <--- .collisionWidth-d.width()-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionPosition.left+a.collisionWidth- ---> d <--- .width()-d.scrollLeft()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionWidth-d.width()- ---> d <--- .scrollLeft();b.left=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
()-d.scrollLeft(); ---> b <--- .left=d>0?b.left

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollLeft();b.left= ---> d <--- >0?b.left-d:Math

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.left=d>0? ---> b <--- .left-d:Math.max(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=d>0?b.left- ---> d <--- :Math.max(b.left-a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.left-d:Math.max( ---> b <--- .left-a.collisionPosition.left,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:Math.max(b.left- ---> a <--- .collisionPosition.left,b.left);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.left-a.collisionPosition.left, ---> b <--- .left);},top:function(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(b,a){var  ---> d <--- =c(window);d=a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,a){var d= ---> c <--- (window);d=a.collisionPosition.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{var d=c(window); ---> d <--- =a.collisionPosition.top+a.collisionHeight

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=c(window);d= ---> a <--- .collisionPosition.top+a.collisionHeight-d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d=a.collisionPosition.top+ ---> a <--- .collisionHeight-d.height()-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionPosition.top+a.collisionHeight- ---> d <--- .height()-d.scrollTop()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionHeight-d.height()- ---> d <--- .scrollTop();b.top=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
()-d.scrollTop(); ---> b <--- .top=d>0?b.top

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollTop();b.top= ---> d <--- >0?b.top-d:Math

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.top=d>0? ---> b <--- .top-d:Math.max(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=d>0?b.top- ---> d <--- :Math.max(b.top-a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.top-d:Math.max( ---> b <--- .top-a.collisionPosition.top,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:Math.max(b.top- ---> a <--- .collisionPosition.top,b.top);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.top-a.collisionPosition.top, ---> b <--- .top);}},flip:{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(b,a){if( ---> a <--- .at[0]!=="center"){var 

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
at[0]!=="center"){var  ---> d <--- =c(window);d=a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0]!=="center"){var d= ---> c <--- (window);d=a.collisionPosition.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{var d=c(window); ---> d <--- =a.collisionPosition.left+a.collisionWidth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=c(window);d= ---> a <--- .collisionPosition.left+a.collisionWidth-d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d=a.collisionPosition.left+ ---> a <--- .collisionWidth-d.width()-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionPosition.left+a.collisionWidth- ---> d <--- .width()-d.scrollLeft()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionWidth-d.width()- ---> d <--- .scrollLeft();var g=a.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)-d.scrollLeft();var  ---> g <--- =a.my[0]==="left"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.scrollLeft();var g= ---> a <--- .my[0]==="left"?-a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.my[0]==="left"?- ---> a <--- .elemWidth:a.my[0]===

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="left"?-a.elemWidth: ---> a <--- .my[0]==="right"?a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.my[0]==="right"? ---> a <--- .elemWidth:0,e=a.at

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
==="right"?a.elemWidth:0, ---> e <--- =a.at[0]==="left"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?a.elemWidth:0,e= ---> a <--- .at[0]==="left"?a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.at[0]==="left"? ---> a <--- .targetWidth:-a.targetWidth,h=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="left"?a.targetWidth:- ---> a <--- .targetWidth,h=-2*a.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
a.targetWidth:-a.targetWidth, ---> h <--- =-2*a.offset[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.targetWidth,h=-2* ---> a <--- .offset[0];b.left+=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
2*a.offset[0]; ---> b <--- .left+=a.collisionPosition.left<0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset[0];b.left+= ---> a <--- .collisionPosition.left<0?g+e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+=a.collisionPosition.left<0? ---> g <--- +e+h:d>0?g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionPosition.left<0?g+ ---> e <--- +h:d>0?g+e

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.left<0?g+e+ ---> h <--- :d>0?g+e+h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
<0?g+e+h: ---> d <--- >0?g+e+h:0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+e+h:d>0? ---> g <--- +e+h:0;}},

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
+h:d>0?g+ ---> e <--- +h:0;}},top:

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:d>0?g+e+ ---> h <--- :0;}},top:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(b,a){if( ---> a <--- .at[1]!=="center"){var 

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
at[1]!=="center"){var  ---> d <--- =c(window);d=a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
1]!=="center"){var d= ---> c <--- (window);d=a.collisionPosition.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{var d=c(window); ---> d <--- =a.collisionPosition.top+a.collisionHeight

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=c(window);d= ---> a <--- .collisionPosition.top+a.collisionHeight-d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d=a.collisionPosition.top+ ---> a <--- .collisionHeight-d.height()-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionPosition.top+a.collisionHeight- ---> d <--- .height()-d.scrollTop()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionHeight-d.height()- ---> d <--- .scrollTop();var g=a.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)-d.scrollTop();var  ---> g <--- =a.my[1]==="top"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.scrollTop();var g= ---> a <--- .my[1]==="top"?-a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.my[1]==="top"?- ---> a <--- .elemHeight:a.my[1]===

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="top"?-a.elemHeight: ---> a <--- .my[1]==="bottom"?a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.my[1]==="bottom"? ---> a <--- .elemHeight:0,e=a.at

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
==="bottom"?a.elemHeight:0, ---> e <--- =a.at[1]==="top"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?a.elemHeight:0,e= ---> a <--- .at[1]==="top"?a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.at[1]==="top"? ---> a <--- .targetHeight:-a.targetHeight,h=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]==="top"?a.targetHeight:- ---> a <--- .targetHeight,h=-2*a.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
a.targetHeight:-a.targetHeight, ---> h <--- =-2*a.offset[1]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.targetHeight,h=-2* ---> a <--- .offset[1];b.top+=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
2*a.offset[1]; ---> b <--- .top+=a.collisionPosition.top<0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset[1];b.top+= ---> a <--- .collisionPosition.top<0?g+e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+=a.collisionPosition.top<0? ---> g <--- +e+h:d>0?g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.collisionPosition.top<0?g+ ---> e <--- +h:d>0?g+e

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.top<0?g+e+ ---> h <--- :d>0?g+e+h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
<0?g+e+h: ---> d <--- >0?g+e+h:0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+e+h:d>0? ---> g <--- +e+h:0;}}}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
+h:d>0?g+ ---> e <--- +h:0;}}}};

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:d>0?g+e+ ---> h <--- :0;}}}};if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}}};if(! ---> c <--- .offset.setOffset){c.offset.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(!c.offset.setOffset){ ---> c <--- .offset.setOffset=function(b,a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a){if(/static/.test( ---> c <--- .curCSS(b,"position"))){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(/static/.test(c.curCSS( ---> b <--- ,"position"))){b.style.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
curCSS(b,"position"))){ ---> b <--- .style.position="relative";}var d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.style.position="relative";}var  ---> d <--- =c(b),g=d.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.position="relative";}var d= ---> c <--- (b),g=d.offset(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
="relative";}var d=c( ---> b <--- ),g=d.offset(),

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}var d=c(b), ---> g <--- =d.offset(),e=parseInt

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d=c(b),g= ---> d <--- .offset(),e=parseInt(c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,g=d.offset(), ---> e <--- =parseInt(c.curCSS(b,"top"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset(),e=parseInt( ---> c <--- .curCSS(b,"top",true),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=parseInt(c.curCSS( ---> b <--- ,"top",true),10)||0

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,true),10)||0, ---> h <--- =parseInt(c.curCSS(b,"left"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0,h=parseInt( ---> c <--- .curCSS(b,"left",true),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=parseInt(c.curCSS( ---> b <--- ,"left",true),10)||0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,true),10)||0; ---> g <--- ={top:a.top-g.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)||0;g={top: ---> a <--- .top-g.top+e,left

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g={top:a.top- ---> g <--- .top+e,left:a.left

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.top-g.top+ ---> e <--- ,left:a.left-g.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-g.top+e,left: ---> a <--- .left-g.left+h};

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+e,left:a.left- ---> g <--- .left+h};"using" in a?

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.left-g.left+ ---> h <--- };"using" in a?a.using.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g.left+h};"using" in  ---> a <--- ?a.using.call(b,g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
left+h};"using" in a? ---> a <--- .using.call(b,g):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
 in a?a.using.call( ---> b <--- ,g):d.css(g)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
?a.using.call(b, ---> g <--- ):d.css(g);}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
using.call(b,g): ---> d <--- .css(g);};c.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b,g):d.css( ---> g <--- );};c.fn.offset=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d.css(g);}; ---> c <--- .fn.offset=function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset=function(b){var  ---> a <--- =this[0];if(!a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this[0];if(! ---> a <--- ||!a.ownerDocument){returnnull;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0];if(!a||! ---> a <--- .ownerDocument){returnnull;}if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ownerDocument){returnnull;}if( ---> b <--- ){returnthis.each(function()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.each(function(){ ---> c <--- .offset.setOffset(this,b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.offset.setOffset(this, ---> b <--- );});}returnu.call

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
,b);});}return ---> u <--- .call(this);};}}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(d){ ---> d <--- .widget("ui.draggable",d.ui.mouse

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d){d.widget("ui.draggable", ---> d <--- .ui.mouse,{widgetEventPrefix:"drag",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseCapture:function(a){var  ---> b <--- =this.options;if(this.helper

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;if(this.helper|| ---> b <--- .disabled||d(a.target).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.helper||b.disabled|| ---> d <--- (a.target).is(".ui-resizable-handle")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.helper||b.disabled||d( ---> a <--- .target).is(".ui-resizable-handle")){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}this.handle=this._getHandle( ---> a <--- );if(!this.handle){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseStart:function(a){var  ---> b <--- =this.options;this.helper=this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.helper=this._createHelper( ---> a <--- );this._cacheHelperProportions();if(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._cacheHelperProportions();if( ---> d <--- .ui.ddmanager){d.ui.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d.ui.ddmanager){ ---> d <--- .ui.ddmanager.current=this;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
left-this.margins.left}; ---> d <--- .extend(this.offset,{click:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset,{click:{left: ---> a <--- .pageX-this.offset.left,top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.offset.left,top: ---> a <--- .pageY-this.offset.top},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.position=this._generatePosition( ---> a <--- );this.originalPageX=a.pageX;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_generatePosition(a);this.originalPageX= ---> a <--- .pageX;this.originalPageY=a.pageY

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.pageX;this.originalPageY= ---> a <--- .pageY;b.cursorAt&&this._adjustOffsetFromHelper

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.originalPageY=a.pageY; ---> b <--- .cursorAt&&this._adjustOffsetFromHelper(b.cursorAt

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.cursorAt&&this._adjustOffsetFromHelper( ---> b <--- .cursorAt);b.containment&&this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._adjustOffsetFromHelper(b.cursorAt); ---> b <--- .containment&&this._setContainment();if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(this._trigger("start", ---> a <--- )===false){this._clear()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
false;}this._cacheHelperProportions(); ---> d <--- .ui.ddmanager&&!b.dropBehaviour&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);d.ui.ddmanager&&! ---> b <--- .dropBehaviour&&d.ui.ddmanager.prepareOffsets

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.ddmanager&&!b.dropBehaviour&& ---> d <--- .ui.ddmanager.prepareOffsets(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.prepareOffsets(this, ---> a <--- );this.helper.addClass("ui-draggable-dragging")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-draggable-dragging");this._mouseDrag( ---> a <--- ,true);returntrue;},_mouseDrag

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.position=this._generatePosition( ---> a <--- );this.positionAbs=this._convertPositionTo(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._convertPositionTo("absolute");if(! ---> b <--- ){b=this._uiHash();

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"absolute");if(!b){ ---> b <--- =this._uiHash();if(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(this._trigger("drag", ---> a <--- ,b)===false){this._mouseUp

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this._trigger("drag",a, ---> b <--- )===false){this._mouseUp({

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;returnfalse;}this.position= ---> b <--- .position;}if(!this.options

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.position.top+"px";} ---> d <--- .ui.ddmanager&&d.ui.ddmanager

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"px";}d.ui.ddmanager&& ---> d <--- .ui.ddmanager.drag(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.drag(this, ---> a <--- );returnfalse;},_mouseStop:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseStop:function(a){var  ---> b <--- =false;if(d.ui.ddmanager

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=false;if( ---> d <--- .ui.ddmanager&&!this.options.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&!this.options.dropBehaviour){ ---> b <--- =d.ui.ddmanager.drop(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.dropBehaviour){b= ---> d <--- .ui.ddmanager.drop(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.drop(this, ---> a <--- );}if(this.dropped){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(this.dropped){ ---> b <--- =this.dropped;this.dropped=false

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.revert=="invalid"&&! ---> b <--- ||this.options.revert=="valid"&&b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||this.options.revert=="valid"&& ---> b <--- ||this.options.revert===true||d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
||this.options.revert===true|| ---> d <--- .isFunction(this.options.revert)&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.revert.call(this.element, ---> b <--- )){var c=this;d(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element,b)){var  ---> c <--- =this;d(this.helper).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b)){var c=this; ---> d <--- (this.helper).animate(this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
revertDuration,10),function(){ ---> c <--- ._trigger("stop",a)!==false&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(){c._trigger("stop", ---> a <--- )!==false&&c._clear();

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("stop",a)!==false&& ---> c <--- ._clear();});}else

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{this._trigger("stop", ---> a <--- )!==false&&this._clear();

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_getHandle:function(a){var  ---> b <--- =!this.options.handle||!d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=!this.options.handle||! ---> d <--- (this.options.handle,this.element

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
element).length?true:false; ---> d <--- (this.options.handle,this.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){if(this== ---> a <--- .target){b=true;}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this==a.target){ ---> b <--- =true;}});returnb;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=true;}});return ---> b <--- ;},_createHelper:function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_createHelper:function(a){var  ---> b <--- =this.options;a=d.isFunction

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this.options; ---> a <--- =d.isFunction(b.helper)?

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this.options;a= ---> d <--- .isFunction(b.helper)?d(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;a=d.isFunction( ---> b <--- .helper)?d(b.helper.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.isFunction(b.helper)? ---> d <--- (b.helper.apply(this.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
isFunction(b.helper)?d( ---> b <--- .helper.apply(this.element[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.element[0],[ ---> a <--- ])):b.helper=="clone"?

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0],[a])): ---> b <--- .helper=="clone"?this.element.clone

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.clone():this.element; ---> a <--- .parents("body").length||a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.parents("body").length|| ---> a <--- .appendTo(b.appendTo=="parent"?this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"body").length||a.appendTo( ---> b <--- .appendTo=="parent"?this.element[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element[0].parentNode: ---> b <--- .appendTo);a[0]!=this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
].parentNode:b.appendTo); ---> a <--- [0]!=this.element[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]&&!/(fixed|absolute)/.test( ---> a <--- .css("position"))&&a.css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.css("position"))&& ---> a <--- .css("position","absolute");returna

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("position","absolute");return ---> a <--- ;},_adjustOffsetFromHelper:function(a){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){if(typeof ---> a <--- =="string"){a=a.split(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(typeofa=="string"){ ---> a <--- =a.split(" ");}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofa=="string"){a= ---> a <--- .split(" ");}if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.split(" ");}if( ---> d <--- .isArray(a)){a={

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if(d.isArray( ---> a <--- )){a={left:+a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.isArray(a)){ ---> a <--- ={left:+a[0],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)){a={left:+ ---> a <--- [0],top:+a[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+a[0],top:+ ---> a <--- [1]||0};}if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||0};}if("left" in  ---> a <--- ){this.offset.click.left=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.offset.click.left= ---> a <--- .left+this.margins.left;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left;}if("right" in  ---> a <--- ){this.offset.click.left=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left=this.helperProportions.width- ---> a <--- .right+this.margins.left;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left;}if("top" in  ---> a <--- ){this.offset.click.top=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.offset.click.top= ---> a <--- .top+this.margins.top;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.top;}if("bottom" in  ---> a <--- ){this.offset.click.top=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top=this.helperProportions.height- ---> a <--- .bottom+this.margins.top;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.helper.offsetParent();var  ---> a <--- =this.offsetParent.offset();if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0]!=document&& ---> d <--- .ui.contains(this.scrollParent[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.offsetParent[0])){ ---> a <--- .left+=this.scrollParent.scrollLeft()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+=this.scrollParent.scrollLeft(); ---> a <--- .top+=this.scrollParent.scrollTop()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.tagName.toLowerCase()=="html"&& ---> d <--- .browser.msie){a={top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"html"&&d.browser.msie){ ---> a <--- ={top:0,left:0}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:0};}return{top: ---> a <--- .top+(parseInt(this.offsetParent.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,10)||0),left: ---> a <--- .left+(parseInt(this.offsetParent.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.cssPosition=="relative"){var  ---> a <--- =this.element.position();return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position();return{top: ---> a <--- .top-(parseInt(this.helper.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollParent.scrollTop(),left: ---> a <--- .left-(parseInt(this.helper.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_setContainment:function(){var  ---> a <--- =this.options;if(a.containment

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=this.options;if( ---> a <--- .containment=="parent"){a.containment=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.containment=="parent"){ ---> a <--- .containment=this.helper[0].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].parentNode;}if( ---> a <--- .containment=="document"||a.containment=="window"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(a.containment=="document"|| ---> a <--- .containment=="window"){this.containment=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.offset.parent.top, ---> d <--- (a.containment=="document"?document:window

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.parent.top,d( ---> a <--- .containment=="document"?document:window).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
width-this.margins.left,( ---> d <--- (a.containment=="document"?document:window

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.margins.left,(d( ---> a <--- .containment=="document"?document:window).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(!/^(document|window|parent)$/.test( ---> a <--- .containment)&&a.containment.constructor!=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/^(document|window|parent)$/.test(a.containment)&& ---> a <--- .containment.constructor!=Array){var b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment.constructor!=Array){var  ---> b <--- =d(a.containment)[0]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.constructor!=Array){var b= ---> d <--- (a.containment)[0];if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!=Array){var b=d( ---> a <--- .containment)[0];if(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment)[0];if( ---> b <--- ){a=d(a.containment)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0];if(b){ ---> a <--- =d(a.containment).offset(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];if(b){a= ---> d <--- (a.containment).offset();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b){a=d( ---> a <--- .containment).offset();var c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment).offset();var  ---> c <--- =d(b).css("overflow")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).offset();var c= ---> d <--- (b).css("overflow")!="hidden"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
offset();var c=d( ---> b <--- ).css("overflow")!="hidden";this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)!="hidden";this.containment=[ ---> a <--- .left+(parseInt(d(b)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=[a.left+(parseInt( ---> d <--- (b).css("borderLeftWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.left+(parseInt(d( ---> b <--- ).css("borderLeftWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)+(parseInt( ---> d <--- (b).css("paddingLeft"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)+(parseInt(d( ---> b <--- ).css("paddingLeft"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0)-this.margins.left, ---> a <--- .top+(parseInt(d(b)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
left,a.top+(parseInt( ---> d <--- (b).css("borderTopWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.top+(parseInt(d( ---> b <--- ).css("borderTopWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)+(parseInt( ---> d <--- (b).css("paddingTop"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)+(parseInt(d( ---> b <--- ).css("paddingTop"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0)-this.margins.top, ---> a <--- .left+(c?Math.max(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.top,a.left+( ---> c <--- ?Math.max(b.scrollWidth,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
left+(c?Math.max( ---> b <--- .scrollWidth,b.offsetWidth):b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?Math.max(b.scrollWidth, ---> b <--- .offsetWidth):b.offsetWidth)-(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollWidth,b.offsetWidth): ---> b <--- .offsetWidth)-(parseInt(d(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.offsetWidth)-(parseInt( ---> d <--- (b).css("borderLeftWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetWidth)-(parseInt(d( ---> b <--- ).css("borderLeftWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)-(parseInt( ---> d <--- (b).css("paddingRight"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)-(parseInt(d( ---> b <--- ).css("paddingRight"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width-this.margins.left, ---> a <--- .top+(c?Math.max(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left,a.top+( ---> c <--- ?Math.max(b.scrollHeight,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
top+(c?Math.max( ---> b <--- .scrollHeight,b.offsetHeight):b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?Math.max(b.scrollHeight, ---> b <--- .offsetHeight):b.offsetHeight)-(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollHeight,b.offsetHeight): ---> b <--- .offsetHeight)-(parseInt(d(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.offsetHeight)-(parseInt( ---> d <--- (b).css("borderTopWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetHeight)-(parseInt(d( ---> b <--- ).css("borderTopWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)-(parseInt( ---> d <--- (b).css("paddingBottom"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)-(parseInt(d( ---> b <--- ).css("paddingBottom"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
top];}}else{if( ---> a <--- .containment.constructor==Array){this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
constructor==Array){this.containment= ---> a <--- .containment;}}},_convertPositionTo:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){if(! ---> b <--- ){b=this.position;}a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b){if(!b){ ---> b <--- =this.position;}a=a==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){b=this.position;} ---> a <--- =a=="absolute"?1:-1;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b=this.position;}a= ---> a <--- =="absolute"?1:-1;var c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="absolute"?1:-1;var  ---> c <--- =this.cssPosition=="absolute"&&!(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0]!=document&& ---> d <--- .ui.contains(this.scrollParent[0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?this.offsetParent:this.scrollParent, ---> f <--- =/(html|body)/i.test(c[0].

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollParent,f=/(html|body)/i.test( ---> c <--- [0].tagName);return{top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
].tagName);return{top: ---> b <--- .top+this.offset.relative.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.relative.top* ---> a <--- +this.offset.parent.top*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.parent.top* ---> a <--- -(d.browser.safari&&d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.parent.top*a-( ---> d <--- .browser.safari&&d.browser.version

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a-(d.browser.safari&& ---> d <--- .browser.version<526&&this.cssPosition

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollTop(): ---> f <--- ?0:c.scrollTop())*

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollTop():f?0: ---> c <--- .scrollTop())*a),left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0:c.scrollTop())* ---> a <--- ),left:b.left+this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
())*a),left: ---> b <--- .left+this.offset.relative.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.relative.left* ---> a <--- +this.offset.parent.left*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.parent.left* ---> a <--- -(d.browser.safari&&d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.parent.left*a-( ---> d <--- .browser.safari&&d.browser.version

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a-(d.browser.safari&& ---> d <--- .browser.version<526&&this.cssPosition

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollLeft(): ---> f <--- ?0:c.scrollLeft())*

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollLeft():f?0: ---> c <--- .scrollLeft())*a)};

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0:c.scrollLeft())* ---> a <--- )};},_generatePosition:function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_generatePosition:function(a){var  ---> b <--- =this.options,c=this.cssPosition

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this.options, ---> c <--- =this.cssPosition=="absolute"&&!(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0]!=document&& ---> d <--- .ui.contains(this.scrollParent[0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?this.offsetParent:this.scrollParent, ---> f <--- =/(html|body)/i.test(c[0].

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollParent,f=/(html|body)/i.test( ---> c <--- [0].tagName),e=a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(c[0].tagName), ---> e <--- =a.pageX,g=a.pageY

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].tagName),e= ---> a <--- .pageX,g=a.pageY;if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
tagName),e=a.pageX, ---> g <--- =a.pageY;if(this.originalPosition

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=a.pageX,g= ---> a <--- .pageY;if(this.originalPosition){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.containment){if( ---> a <--- .pageX-this.offset.click.left

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[0]){ ---> e <--- =this.containment[0]+this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.click.left;}if( ---> a <--- .pageY-this.offset.click.top

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[1]){ ---> g <--- =this.containment[1]+this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.click.top;}if( ---> a <--- .pageX-this.offset.click.left

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[2]){ ---> e <--- =this.containment[2]+this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.click.left;}if( ---> a <--- .pageY-this.offset.click.top

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[3]){ ---> g <--- =this.containment[3]+this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.click.top;}}if( ---> b <--- .grid){g=this.originalPageY+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(b.grid){ ---> g <--- =this.originalPageY+Math.round((

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this.originalPageY+Math.round(( ---> g <--- -this.originalPageY)/b.grid[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
((g-this.originalPageY)/ ---> b <--- .grid[1])*b.grid

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/b.grid[1])* ---> b <--- .grid[1];g=this.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)*b.grid[1]; ---> g <--- =this.containment?!(g-this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=this.containment?!( ---> g <--- -this.offset.click.top<this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
top<this.containment[1]|| ---> g <--- -this.offset.click.top>this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[3])? ---> g <--- :!(g-this.offset.click

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
[3])?g:!( ---> g <--- -this.offset.click.top<this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[1])? ---> g <--- -b.grid[1]:g+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment[1])?g- ---> b <--- .grid[1]:g+b.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g-b.grid[1]: ---> g <--- +b.grid[1]:g;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.grid[1]:g+ ---> b <--- .grid[1]:g;e=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g+b.grid[1]: ---> g <--- ;e=this.originalPageX+Math.round

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b.grid[1]:g; ---> e <--- =this.originalPageX+Math.round((

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.originalPageX+Math.round(( ---> e <--- -this.originalPageX)/b.grid[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
((e-this.originalPageX)/ ---> b <--- .grid[0])*b.grid

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/b.grid[0])* ---> b <--- .grid[0];e=this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)*b.grid[0]; ---> e <--- =this.containment?!(e-this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;e=this.containment?!( ---> e <--- -this.offset.click.left<this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
left<this.containment[0]|| ---> e <--- -this.offset.click.left>this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[2])? ---> e <--- :!(e-this.offset.click

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[2])?e:!( ---> e <--- -this.offset.click.left<this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[0])? ---> e <--- -b.grid[0]:e+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment[0])?e- ---> b <--- .grid[0]:e+b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e-b.grid[0]: ---> e <--- +b.grid[0]:e;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.grid[0]:e+ ---> b <--- .grid[0]:e;}}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e+b.grid[0]: ---> e <--- ;}}return{top:g-this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:e;}}return{top: ---> g <--- -this.offset.click.top-this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.offset.parent.top+( ---> d <--- .browser.safari&&d.browser.version

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
top+(d.browser.safari&& ---> d <--- .browser.version<526&&this.cssPosition

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollTop(): ---> f <--- ?0:c.scrollTop()),

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollTop():f?0: ---> c <--- .scrollTop()),left:e-

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c.scrollTop()),left: ---> e <--- -this.offset.click.left-this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.offset.parent.left+( ---> d <--- .browser.safari&&d.browser.version

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
left+(d.browser.safari&& ---> d <--- .browser.version<526&&this.cssPosition

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollLeft(): ---> f <--- ?0:c.scrollLeft())}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollLeft():f?0: ---> c <--- .scrollLeft())};},_clear

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b,c){ ---> c <--- =c||this._uiHash();d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,c){c= ---> c <--- ||this._uiHash();d.ui

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=c||this._uiHash(); ---> d <--- .ui.plugin.call(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.plugin.call(this, ---> a <--- ,[b,c]);if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
plugin.call(this,a,[ ---> b <--- ,c]);if(a=="drag"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this,a,[b, ---> c <--- ]);if(a=="drag"){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[b,c]);if( ---> a <--- =="drag"){this.positionAbs=this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this._convertPositionTo("absolute");}return ---> d <--- .Widget.prototype._trigger.call(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.prototype._trigger.call(this, ---> a <--- ,b,c);},plugins:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger.call(this,a, ---> b <--- ,c);},plugins:{}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(this,a,b, ---> c <--- );},plugins:{},_uiHash

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.positionAbs};}}); ---> d <--- .extend(d.ui.draggable,{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});d.extend( ---> d <--- .ui.draggable,{version:"1.8.5"}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
draggable,{version:"1.8.5"}); ---> d <--- .ui.plugin.add("draggable","connectToSortable"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c= ---> d <--- (this).data("draggable"),f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("draggable"), ---> f <--- =c.options,e=d.extend

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable"),f= ---> c <--- .options,e=d.extend({

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"draggable"),f=c.options, ---> e <--- =d.extend({},b,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=c.options,e= ---> d <--- .extend({},b,{item

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e=d.extend({}, ---> b <--- ,{item:c.element});

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
({},b,{item: ---> c <--- .element});c.sortables=[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{item:c.element}); ---> c <--- .sortables=[];d(f.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);c.sortables=[]; ---> d <--- (f.connectToSortable).each(function(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c.sortables=[];d( ---> f <--- .connectToSortable).each(function(){

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> g <--- =d.data(this,"sortable");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var g= ---> d <--- .data(this,"sortable");if(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
data(this,"sortable");if( ---> g <--- &&!g.options.disabled){c

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,"sortable");if(g&&! ---> g <--- .options.disabled){c.sortables.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&!g.options.disabled){ ---> c <--- .sortables.push({instance:g,

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
c.sortables.push({instance: ---> g <--- ,shouldRevert:g.options.revert})

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
push({instance:g,shouldRevert: ---> g <--- .options.revert});g._refreshItems

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:g.options.revert}); ---> g <--- ._refreshItems();g._trigger("activate"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
});g._refreshItems(); ---> g <--- ._trigger("activate",a,e);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();g._trigger("activate", ---> a <--- ,e);}});},

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;g._trigger("activate",a, ---> e <--- );}});},stop:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c= ---> d <--- (this).data("draggable"),f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("draggable"), ---> f <--- =d.extend({},b,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable"),f= ---> d <--- .extend({},b,{item

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
f=d.extend({}, ---> b <--- ,{item:c.element});

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
({},b,{item: ---> c <--- .element});d.each(c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{item:c.element}); ---> d <--- .each(c.sortables,function()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element});d.each( ---> c <--- .sortables,function(){if(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.instance.isOver=0; ---> c <--- .cancelHelperRemoval=true;this.instance.cancelHelperRemoval

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
true;}this.instance._mouseStop( ---> a <--- );this.instance.options.helper=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.instance.options._helper; ---> c <--- .options.helper=="original"&&this.instance

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.instance._trigger("deactivate", ---> a <--- ,f);}});},

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance._trigger("deactivate",a, ---> f <--- );}});},drag:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c= ---> d <--- (this).data("draggable"),f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("draggable"), ---> f <--- =this;d.each(c.sortables

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
data("draggable"),f=this; ---> d <--- .each(c.sortables,function()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=this;d.each( ---> c <--- .sortables,function(){this.instance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(){this.instance.positionAbs= ---> c <--- .positionAbs;this.instance.helperProportions=c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.positionAbs;this.instance.helperProportions= ---> c <--- .helperProportions;this.instance.offset.click

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.instance.offset.click= ---> c <--- .offset.click;if(this.instance

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;this.instance.currentItem= ---> d <--- (f).clone().appendTo(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.instance.currentItem=d( ---> f <--- ).clone().appendTo(this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
options.helper=function(){return ---> b <--- .helper[0];};a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.helper[0];}; ---> a <--- .target=this.instance.currentItem[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0];this.instance._mouseCapture( ---> a <--- ,true);this.instance._mouseStart(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
true);this.instance._mouseStart( ---> a <--- ,true,true);this.instance.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance.offset.click.top= ---> c <--- .offset.click.top;this.instance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance.offset.click.left= ---> c <--- .offset.click.left;this.instance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance.offset.parent.left-= ---> c <--- .offset.parent.left-this.instance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance.offset.parent.top-= ---> c <--- .offset.parent.top-this.instance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance.offset.parent.top; ---> c <--- ._trigger("toSortable",a);c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top;c._trigger("toSortable", ---> a <--- );c.dropped=this.instance.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c._trigger("toSortable",a); ---> c <--- .dropped=this.instance.element;c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.dropped=this.instance.element; ---> c <--- .currentItem=c.element;this.instance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance.element;c.currentItem= ---> c <--- .element;this.instance.fromOutside=c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element;this.instance.fromOutside= ---> c <--- ;}this.instance.currentItem&&this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentItem&&this.instance._mouseDrag( ---> a <--- );}else{if(this.instance

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.instance._trigger("out", ---> a <--- ,this.instance._uiHash(this.instance

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
));this.instance._mouseStop( ---> a <--- ,true);this.instance.options.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.instance.placeholder.remove(); ---> c <--- ._trigger("fromSortable",a);c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c._trigger("fromSortable", ---> a <--- );c.dropped=false;}}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c._trigger("fromSortable",a); ---> c <--- .dropped=false;}}});

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}}});}}); ---> d <--- .ui.plugin.add("draggable","cursor"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> a <--- =d("body"),b=d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var a= ---> d <--- ("body"),b=d(this)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=d("body"), ---> b <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a=d("body"),b= ---> d <--- (this).data("draggable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
data("draggable").options;if( ---> a <--- .css("cursor")){b._cursor

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.css("cursor")){ ---> b <--- ._cursor=a.css("cursor");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("cursor")){b._cursor= ---> a <--- .css("cursor");}a.css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.css("cursor");} ---> a <--- .css("cursor",b.cursor);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);}a.css("cursor", ---> b <--- .cursor);},stop:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},stop:function(){var  ---> a <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(){var a= ---> d <--- (this).data("draggable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable").options; ---> a <--- ._cursor&&d("body").css(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"draggable").options;a._cursor&& ---> d <--- ("body").css("cursor",a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d("body").css("cursor", ---> a <--- ._cursor);}});d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a._cursor);}}); ---> d <--- .ui.plugin.add("draggable","iframeFix"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> a <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var a= ---> d <--- (this).data("draggable").options

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable").options; ---> d <--- (a.iframeFix===true?"iframe":a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
data("draggable").options;d( ---> a <--- .iframeFix===true?"iframe":a.iframeFix

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.iframeFix===true?"iframe": ---> a <--- .iframeFix).each(function(){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
iframeFix).each(function(){ ---> d <--- ('<div class="ui-draggable-iframeFix" style="background: #fff;"></div>').css({width:this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,zIndex:1000}).css( ---> d <--- (this).offset()).appendTo

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;},stop:function(){ ---> d <--- ("div.ui-draggable-iframeFix").each(function(){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);});}}); ---> d <--- .ui.plugin.add("draggable","opacity"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(a,b){ ---> a <--- =d(b.helper);b=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){a= ---> d <--- (b.helper);b=d(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b){a=d( ---> b <--- .helper);b=d(this)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a=d(b.helper); ---> b <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d(b.helper);b= ---> d <--- (this).data("draggable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
data("draggable").options;if( ---> a <--- .css("opacity")){b._opacity

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.css("opacity")){ ---> b <--- ._opacity=a.css("opacity");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("opacity")){b._opacity= ---> a <--- .css("opacity");}a.css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.css("opacity");} ---> a <--- .css("opacity",b.opacity);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);}a.css("opacity", ---> b <--- .opacity);},stop:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(a,b){ ---> a <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){a= ---> d <--- (this).data("draggable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable").options; ---> a <--- ._opacity&&d(b.helper).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"draggable").options;a._opacity&& ---> d <--- (b.helper).css("opacity",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;a._opacity&&d( ---> b <--- .helper).css("opacity",a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.helper).css("opacity", ---> a <--- ._opacity);}});d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a._opacity);}}); ---> d <--- .ui.plugin.add("draggable","scroll"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> a <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var a= ---> d <--- (this).data("draggable");if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable");if( ---> a <--- .scrollParent[0]!=document&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.scrollParent[0]!=document&& ---> a <--- .scrollParent[0].tagName!="HTML")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].tagName!="HTML"){ ---> a <--- .overflowOffset=a.scrollParent.offset()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
tagName!="HTML"){a.overflowOffset= ---> a <--- .scrollParent.offset();}},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,drag:function(a){var  ---> b <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- (this).data("draggable"),c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("draggable"), ---> c <--- =b.options,f=false;if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable"),c= ---> b <--- .options,f=false;if(b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"draggable"),c=b.options, ---> f <--- =false;if(b.scrollParent[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,f=false;if( ---> b <--- .scrollParent[0]!=document&&b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0]!=document&& ---> b <--- .scrollParent[0].tagName!="HTML")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.tagName!="HTML"){if(! ---> c <--- .axis||c.axis!="x"){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(!c.axis|| ---> c <--- .axis!="x"){if(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.axis!="x"){if( ---> b <--- .overflowOffset.top+b.scrollParent[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(b.overflowOffset.top+ ---> b <--- .scrollParent[0].offsetHeight-a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].offsetHeight- ---> a <--- .pageY<c.scrollSensitivity){b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0].offsetHeight-a.pageY< ---> c <--- .scrollSensitivity){b.scrollParent[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.pageY<c.scrollSensitivity){ ---> b <--- .scrollParent[0].scrollTop=f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollTop= ---> f <--- =b.scrollParent[0].scrollTop+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollParent[0].scrollTop=f= ---> b <--- .scrollParent[0].scrollTop+c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollTop+ ---> c <--- .scrollSpeed;}else{if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.scrollSpeed;}else{if( ---> a <--- .pageY-b.overflowOffset.top<c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(a.pageY- ---> b <--- .overflowOffset.top<c.scrollSensitivity){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageY-b.overflowOffset.top< ---> c <--- .scrollSensitivity){b.scrollParent[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
overflowOffset.top<c.scrollSensitivity){ ---> b <--- .scrollParent[0].scrollTop=f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollTop= ---> f <--- =b.scrollParent[0].scrollTop-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollParent[0].scrollTop=f= ---> b <--- .scrollParent[0].scrollTop-c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollTop- ---> c <--- .scrollSpeed;}}}if(!c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollSpeed;}}}if(! ---> c <--- .axis||c.axis!="y"){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(!c.axis|| ---> c <--- .axis!="y"){if(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.axis!="y"){if( ---> b <--- .overflowOffset.left+b.scrollParent[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(b.overflowOffset.left+ ---> b <--- .scrollParent[0].offsetWidth-a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].offsetWidth- ---> a <--- .pageX<c.scrollSensitivity){b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0].offsetWidth-a.pageX< ---> c <--- .scrollSensitivity){b.scrollParent[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.pageX<c.scrollSensitivity){ ---> b <--- .scrollParent[0].scrollLeft=f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollLeft= ---> f <--- =b.scrollParent[0].scrollLeft+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollParent[0].scrollLeft=f= ---> b <--- .scrollParent[0].scrollLeft+c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollLeft+ ---> c <--- .scrollSpeed;}else{if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.scrollSpeed;}else{if( ---> a <--- .pageX-b.overflowOffset.left<c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(a.pageX- ---> b <--- .overflowOffset.left<c.scrollSensitivity){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageX-b.overflowOffset.left< ---> c <--- .scrollSensitivity){b.scrollParent[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
overflowOffset.left<c.scrollSensitivity){ ---> b <--- .scrollParent[0].scrollLeft=f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollLeft= ---> f <--- =b.scrollParent[0].scrollLeft-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollParent[0].scrollLeft=f= ---> b <--- .scrollParent[0].scrollLeft-c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollParent[0].scrollLeft- ---> c <--- .scrollSpeed;}}}}else{if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}else{if(! ---> c <--- .axis||c.axis!="x"){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(!c.axis|| ---> c <--- .axis!="x"){if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.axis!="x"){if( ---> a <--- .pageY-d(document).scrollTop(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"x"){if(a.pageY- ---> d <--- (document).scrollTop()<c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollTop()< ---> c <--- .scrollSensitivity){f=d(document)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollTop()<c.scrollSensitivity){ ---> f <--- =d(document).scrollTop(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<c.scrollSensitivity){f= ---> d <--- (document).scrollTop(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f=d(document).scrollTop( ---> d <--- (document).scrollTop()-c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollTop()- ---> c <--- .scrollSpeed);}else{if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollSpeed);}else{if( ---> d <--- (window).height()-(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(window).height()-( ---> a <--- .pageY-d(document).scrollTop(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
height()-(a.pageY- ---> d <--- (document).scrollTop())<c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(document).scrollTop())< ---> c <--- .scrollSensitivity){f=d(document)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
())<c.scrollSensitivity){ ---> f <--- =d(document).scrollTop(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<c.scrollSensitivity){f= ---> d <--- (document).scrollTop(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f=d(document).scrollTop( ---> d <--- (document).scrollTop()+c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollTop()+ ---> c <--- .scrollSpeed);}}}if(!

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollSpeed);}}}if(! ---> c <--- .axis||c.axis!="y"){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(!c.axis|| ---> c <--- .axis!="y"){if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.axis!="y"){if( ---> a <--- .pageX-d(document).scrollLeft(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"y"){if(a.pageX- ---> d <--- (document).scrollLeft()<c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollLeft()< ---> c <--- .scrollSensitivity){f=d(document)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollLeft()<c.scrollSensitivity){ ---> f <--- =d(document).scrollLeft(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<c.scrollSensitivity){f= ---> d <--- (document).scrollLeft(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f=d(document).scrollLeft( ---> d <--- (document).scrollLeft()-c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollLeft()- ---> c <--- .scrollSpeed);}else{if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollSpeed);}else{if( ---> d <--- (window).width()-(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(window).width()-( ---> a <--- .pageX-d(document).scrollLeft(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
width()-(a.pageX- ---> d <--- (document).scrollLeft())<c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(document).scrollLeft())< ---> c <--- .scrollSensitivity){f=d(document)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
())<c.scrollSensitivity){ ---> f <--- =d(document).scrollLeft(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<c.scrollSensitivity){f= ---> d <--- (document).scrollLeft(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f=d(document).scrollLeft( ---> d <--- (document).scrollLeft()+c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollLeft()+ ---> c <--- .scrollSpeed);}}}}f!==

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c.scrollSpeed);}}}} ---> f <--- !==false&&d.ui.ddmanager&&!

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}}}f!==false&& ---> d <--- .ui.ddmanager&&!c.dropBehaviour&&

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
false&&d.ui.ddmanager&&! ---> c <--- .dropBehaviour&&d.ui.ddmanager.prepareOffsets

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.ddmanager&&!c.dropBehaviour&& ---> d <--- .ui.ddmanager.prepareOffsets(b,a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&d.ui.ddmanager.prepareOffsets( ---> b <--- ,a);}});d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.prepareOffsets(b, ---> a <--- );}});d.ui.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b,a);}}); ---> d <--- .ui.plugin.add("draggable","snap"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> a <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var a= ---> d <--- (this).data("draggable"),b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("draggable"), ---> b <--- =a.options;a.snapElements=[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable"),b= ---> a <--- .options;a.snapElements=[];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"draggable"),b=a.options; ---> a <--- .snapElements=[];d(b.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
options;a.snapElements=[]; ---> d <--- (b.snap.constructor!=String?b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.snapElements=[];d( ---> b <--- .snap.constructor!=String?b.snap

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.snap.constructor!=String? ---> b <--- .snap.items||":data(draggable)":b.snap

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?b.snap.items||":data(draggable)": ---> b <--- .snap).each(function(){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> c <--- =d(this),f=c.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var c= ---> d <--- (this),f=c.offset(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{var c=d(this), ---> f <--- =c.offset();this!=a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=d(this),f= ---> c <--- .offset();this!=a.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.offset();this!= ---> a <--- .element[0]&&a.snapElements.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this!=a.element[0]&& ---> a <--- .snapElements.push({item:this,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
push({item:this,width: ---> c <--- .outerWidth(),height:c.outerHeight

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.outerWidth(),height: ---> c <--- .outerHeight(),top:f.top

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.outerHeight(),top: ---> f <--- .top,left:f.left})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:f.top,left: ---> f <--- .left});});},

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){for(var  ---> c <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){for(var c= ---> d <--- (this).data("draggable"),f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("draggable"), ---> f <--- =c.options,e=f.snapTolerance

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable"),f= ---> c <--- .options,e=f.snapTolerance,g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"draggable"),f=c.options, ---> e <--- =f.snapTolerance,g=b.offset

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=c.options,e= ---> f <--- .snapTolerance,g=b.offset.left

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,e=f.snapTolerance, ---> g <--- =b.offset.left,n=g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=f.snapTolerance,g= ---> b <--- .offset.left,n=g+c

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
,g=b.offset.left, ---> n <--- =g+c.helperProportions.width,m

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.offset.left,n= ---> g <--- +c.helperProportions.width,m=b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.left,n=g+ ---> c <--- .helperProportions.width,m=b.offset

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
=g+c.helperProportions.width, ---> m <--- =b.offset.top,o=m

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+c.helperProportions.width,m= ---> b <--- .offset.top,o=m+c

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
,m=b.offset.top, ---> o <--- =m+c.helperProportions.height,h

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.offset.top,o= ---> m <--- +c.helperProportions.height,h=c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.top,o=m+ ---> c <--- .helperProportions.height,h=c.snapElements

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=m+c.helperProportions.height, ---> h <--- =c.snapElements.length-1;h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+c.helperProportions.height,h= ---> c <--- .snapElements.length-1;h>=0

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.snapElements.length-1; ---> h <--- >=0;h--){var i=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;h>=0; ---> h <--- --){var i=c.snapElements[

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
h>=0;h--){var  ---> i <--- =c.snapElements[h].left,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0;h--){var i= ---> c <--- .snapElements[h].left,k=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){var i=c.snapElements[ ---> h <--- ].left,k=i+c.

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
c.snapElements[h].left, ---> k <--- =i+c.snapElements[h].

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
snapElements[h].left,k= ---> i <--- +c.snapElements[h].width,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h].left,k=i+ ---> c <--- .snapElements[h].width,j=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,k=i+c.snapElements[ ---> h <--- ].width,j=c.snapElements[

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
c.snapElements[h].width, ---> j <--- =c.snapElements[h].top,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
snapElements[h].width,j= ---> c <--- .snapElements[h].top,l=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.width,j=c.snapElements[ ---> h <--- ].top,l=j+c.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
c.snapElements[h].top, ---> l <--- =j+c.snapElements[h].

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
snapElements[h].top,l= ---> j <--- +c.snapElements[h].height;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h].top,l=j+ ---> c <--- .snapElements[h].height;if(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,l=j+c.snapElements[ ---> h <--- ].height;if(i-e<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
snapElements[h].height;if( ---> i <--- -e<g&&g<k+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h].height;if(i- ---> e <--- <g&&g<k+e&&j

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.height;if(i-e< ---> g <--- &&g<k+e&&j-e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(i-e<g&& ---> g <--- <k+e&&j-e<m

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(i-e<g&&g< ---> k <--- +e&&j-e<m&&m

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<g&&g<k+ ---> e <--- &&j-e<m&&m<l

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
<g&&g<k+e&& ---> j <--- -e<m&&m<l+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&g<k+e&&j- ---> e <--- <m&&m<l+e||i

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
<k+e&&j-e< ---> m <--- &&m<l+e||i-e

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
+e&&j-e<m&& ---> m <--- <l+e||i-e<g

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
&&j-e<m&&m< ---> l <--- +e||i-e<g&&g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<m&&m<l+ ---> e <--- ||i-e<g&&g<k

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
<m&&m<l+e|| ---> i <--- -e<g&&g<k+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&m<l+e||i- ---> e <--- <g&&g<k+e&&j

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
<l+e||i-e< ---> g <--- &&g<k+e&&j-e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+e||i-e<g&& ---> g <--- <k+e&&j-e<o

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
||i-e<g&&g< ---> k <--- +e&&j-e<o&&o

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<g&&g<k+ ---> e <--- &&j-e<o&&o<l

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
<g&&g<k+e&& ---> j <--- -e<o&&o<l+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&g<k+e&&j- ---> e <--- <o&&o<l+e||i

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
<k+e&&j-e< ---> o <--- &&o<l+e||i-e

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
+e&&j-e<o&& ---> o <--- <l+e||i-e<n

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
&&j-e<o&&o< ---> l <--- +e||i-e<n&&n

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<o&&o<l+ ---> e <--- ||i-e<n&&n<k

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
<o&&o<l+e|| ---> i <--- -e<n&&n<k+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&o<l+e||i- ---> e <--- <n&&n<k+e&&j

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
<l+e||i-e< ---> n <--- &&n<k+e&&j-e

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
+e||i-e<n&& ---> n <--- <k+e&&j-e<m

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
||i-e<n&&n< ---> k <--- +e&&j-e<m&&m

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<n&&n<k+ ---> e <--- &&j-e<m&&m<l

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
<n&&n<k+e&& ---> j <--- -e<m&&m<l+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&n<k+e&&j- ---> e <--- <m&&m<l+e||i

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
<k+e&&j-e< ---> m <--- &&m<l+e||i-e

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
+e&&j-e<m&& ---> m <--- <l+e||i-e<n

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
&&j-e<m&&m< ---> l <--- +e||i-e<n&&n

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<m&&m<l+ ---> e <--- ||i-e<n&&n<k

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
<m&&m<l+e|| ---> i <--- -e<n&&n<k+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&m<l+e||i- ---> e <--- <n&&n<k+e&&j

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
<l+e||i-e< ---> n <--- &&n<k+e&&j-e

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
+e||i-e<n&& ---> n <--- <k+e&&j-e<o

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
||i-e<n&&n< ---> k <--- +e&&j-e<o&&o

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<n&&n<k+ ---> e <--- &&j-e<o&&o<l

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
<n&&n<k+e&& ---> j <--- -e<o&&o<l+e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&n<k+e&&j- ---> e <--- <o&&o<l+e){

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
<k+e&&j-e< ---> o <--- &&o<l+e){if(

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
+e&&j-e<o&& ---> o <--- <l+e){if(f.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
&&j-e<o&&o< ---> l <--- +e){if(f.snapMode!=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-e<o&&o<l+ ---> e <--- ){if(f.snapMode!="inner")

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
o<l+e){if( ---> f <--- .snapMode!="inner"){var p=Math

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.snapMode!="inner"){var  ---> p <--- =Math.abs(j-o)<=

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
){var p=Math.abs( ---> j <--- -o)<=e,q=Math.

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
var p=Math.abs(j- ---> o <--- )<=e,q=Math.abs(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(j-o)<= ---> e <--- ,q=Math.abs(l-m

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
abs(j-o)<=e, ---> q <--- =Math.abs(l-m)<=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
<=e,q=Math.abs( ---> l <--- -m)<=e,r=Math.

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
,q=Math.abs(l- ---> m <--- )<=e,r=Math.abs(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(l-m)<= ---> e <--- ,r=Math.abs(i-n

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
abs(l-m)<=e, ---> r <--- =Math.abs(i-n)<=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
<=e,r=Math.abs( ---> i <--- -n)<=e,s=Math.

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
,r=Math.abs(i- ---> n <--- )<=e,s=Math.abs(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(i-n)<= ---> e <--- ,s=Math.abs(k-g

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
abs(i-n)<=e, ---> s <--- =Math.abs(k-g)<=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
<=e,s=Math.abs( ---> k <--- -g)<=e;if(p)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,s=Math.abs(k- ---> g <--- )<=e;if(p){b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(k-g)<= ---> e <--- ;if(p){b.position.

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
k-g)<=e;if( ---> p <--- ){b.position.top=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)<=e;if(p){ ---> b <--- .position.top=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
p){b.position.top= ---> c <--- ._convertPositionTo("relative",{top:j-

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
c._convertPositionTo("relative",{top: ---> j <--- -c.helperProportions.height,left:0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_convertPositionTo("relative",{top:j- ---> c <--- .helperProportions.height,left:0})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:0}).top- ---> c <--- .margins.top;}if(q)

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
c.margins.top;}if( ---> q <--- ){b.position.top=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.top;}if(q){ ---> b <--- .position.top=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
q){b.position.top= ---> c <--- ._convertPositionTo("relative",{top:l,

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
c._convertPositionTo("relative",{top: ---> l <--- ,left:0}).top-c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:0}).top- ---> c <--- .margins.top;}if(r)

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
c.margins.top;}if( ---> r <--- ){b.position.left=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.top;}if(r){ ---> b <--- .position.left=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
r){b.position.left= ---> c <--- ._convertPositionTo("relative",{top:0,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"relative",{top:0,left: ---> i <--- -c.helperProportions.width}).left

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{top:0,left:i- ---> c <--- .helperProportions.width}).left-c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.helperProportions.width}).left- ---> c <--- .margins.left;}if(s)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
c.margins.left;}if( ---> s <--- ){b.position.left=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.left;}if(s){ ---> b <--- .position.left=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
s){b.position.left= ---> c <--- ._convertPositionTo("relative",{top:0,

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"relative",{top:0,left: ---> k <--- }).left-c.margins.left

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:k}).left- ---> c <--- .margins.left;}}var t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
c.margins.left;}}var  ---> t <--- =p||q||r||s;if

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left;}}var t= ---> p <--- ||q||r||s;if(f

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
left;}}var t=p|| ---> q <--- ||r||s;if(f.snapMode

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
}}var t=p||q|| ---> r <--- ||s;if(f.snapMode!="outer"

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
var t=p||q||r|| ---> s <--- ;if(f.snapMode!="outer"){

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
||q||r||s;if( ---> f <--- .snapMode!="outer"){p=Math.

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
if(f.snapMode!="outer"){ ---> p <--- =Math.abs(j-m)<=

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"outer"){p=Math.abs( ---> j <--- -m)<=e;q=Math.

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
{p=Math.abs(j- ---> m <--- )<=e;q=Math.abs(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(j-m)<= ---> e <--- ;q=Math.abs(l-o

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
abs(j-m)<=e; ---> q <--- =Math.abs(l-o)<=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
<=e;q=Math.abs( ---> l <--- -o)<=e;r=Math.

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
;q=Math.abs(l- ---> o <--- )<=e;r=Math.abs(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(l-o)<= ---> e <--- ;r=Math.abs(i-g

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
abs(l-o)<=e; ---> r <--- =Math.abs(i-g)<=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
<=e;r=Math.abs( ---> i <--- -g)<=e;s=Math.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;r=Math.abs(i- ---> g <--- )<=e;s=Math.abs(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(i-g)<= ---> e <--- ;s=Math.abs(k-n

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
abs(i-g)<=e; ---> s <--- =Math.abs(k-n)<=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
<=e;s=Math.abs( ---> k <--- -n)<=e;if(p)

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
;s=Math.abs(k- ---> n <--- )<=e;if(p){b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(k-n)<= ---> e <--- ;if(p){b.position.

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
k-n)<=e;if( ---> p <--- ){b.position.top=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)<=e;if(p){ ---> b <--- .position.top=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
p){b.position.top= ---> c <--- ._convertPositionTo("relative",{top:j,

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
c._convertPositionTo("relative",{top: ---> j <--- ,left:0}).top-c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:0}).top- ---> c <--- .margins.top;}if(q)

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
c.margins.top;}if( ---> q <--- ){b.position.top=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.top;}if(q){ ---> b <--- .position.top=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
q){b.position.top= ---> c <--- ._convertPositionTo("relative",{top:l-

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
c._convertPositionTo("relative",{top: ---> l <--- -c.helperProportions.height,left:0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_convertPositionTo("relative",{top:l- ---> c <--- .helperProportions.height,left:0})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:0}).top- ---> c <--- .margins.top;}if(r)

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
c.margins.top;}if( ---> r <--- ){b.position.left=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.top;}if(r){ ---> b <--- .position.left=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
r){b.position.left= ---> c <--- ._convertPositionTo("relative",{top:0,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"relative",{top:0,left: ---> i <--- }).left-c.margins.left

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:i}).left- ---> c <--- .margins.left;}if(s)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
c.margins.left;}if( ---> s <--- ){b.position.left=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.left;}if(s){ ---> b <--- .position.left=c._convertPositionTo("relative"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
s){b.position.left= ---> c <--- ._convertPositionTo("relative",{top:0,

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"relative",{top:0,left: ---> k <--- -c.helperProportions.width}).left

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{top:0,left:k- ---> c <--- .helperProportions.width}).left-c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.helperProportions.width}).left- ---> c <--- .margins.left;}}if(!

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left;}}if(! ---> c <--- .snapElements[h].snapping&&(p

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(!c.snapElements[ ---> h <--- ].snapping&&(p||q||r

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
.snapElements[h].snapping&&( ---> p <--- ||q||r||s||t))

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
[h].snapping&&(p|| ---> q <--- ||r||s||t)){c

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
].snapping&&(p||q|| ---> r <--- ||s||t)){c.options

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
snapping&&(p||q||r|| ---> s <--- ||t)){c.options.snap

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(p||q||r||s|| ---> t <--- )){c.options.snap.snap

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||r||s||t)){ ---> c <--- .options.snap.snap&&c.options

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.options.snap.snap&& ---> c <--- .options.snap.snap.call(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.snap.snap.call( ---> c <--- .element,a,d.extend(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.snap.call(c.element, ---> a <--- ,d.extend(c._uiHash()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(c.element,a, ---> d <--- .extend(c._uiHash(),{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element,a,d.extend( ---> c <--- ._uiHash(),{snapItem:c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c._uiHash(),{snapItem: ---> c <--- .snapElements[h].item}))

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
),{snapItem:c.snapElements[ ---> h <--- ].item}));}c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h].item}));} ---> c <--- .snapElements[h].snapping=p||

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}));}c.snapElements[ ---> h <--- ].snapping=p||q||r||

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
c.snapElements[h].snapping= ---> p <--- ||q||r||s||t;}

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
snapElements[h].snapping=p|| ---> q <--- ||r||s||t;}else{

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
h].snapping=p||q|| ---> r <--- ||s||t;}else{c.

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.snapping=p||q||r|| ---> s <--- ||t;}else{c.snapElements[

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=p||q||r||s|| ---> t <--- ;}else{c.snapElements[h]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
r||s||t;}else{ ---> c <--- .snapElements[h].snapping&&c.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
t;}else{c.snapElements[ ---> h <--- ].snapping&&c.options.snap.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.snapElements[h].snapping&& ---> c <--- .options.snap.release&&c.options

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.options.snap.release&& ---> c <--- .options.snap.release.call(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.snap.release.call( ---> c <--- .element,a,d.extend(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.release.call(c.element, ---> a <--- ,d.extend(c._uiHash()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(c.element,a, ---> d <--- .extend(c._uiHash(),{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element,a,d.extend( ---> c <--- ._uiHash(),{snapItem:c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c._uiHash(),{snapItem: ---> c <--- .snapElements[h].item}))

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
),{snapItem:c.snapElements[ ---> h <--- ].item}));c.snapElements

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[h].item})); ---> c <--- .snapElements[h].snapping=false;

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
item}));c.snapElements[ ---> h <--- ].snapping=false;}}}}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;}}}}); ---> d <--- .ui.plugin.add("draggable","stack"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> a <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var a= ---> d <--- (this).data("draggable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable").options; ---> a <--- =d.makeArray(d(a.stack

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
data("draggable").options;a= ---> d <--- .makeArray(d(a.stack))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;a=d.makeArray( ---> d <--- (a.stack)).sort(function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a=d.makeArray(d( ---> a <--- .stack)).sort(function(c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c,f){return(parseInt( ---> d <--- (c).css("zIndex"),10

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f){return(parseInt(d( ---> c <--- ).css("zIndex"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)-(parseInt( ---> d <--- (f).css("zIndex"),10

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)-(parseInt(d( ---> f <--- ).css("zIndex"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||0);});if( ---> a <--- .length){var b=parseInt(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(a.length){var  ---> b <--- =parseInt(a[0].style.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.length){var b=parseInt( ---> a <--- [0].style.zIndex)||0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
].style.zIndex)||0; ---> d <--- (a).each(function(c)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
style.zIndex)||0;d( ---> a <--- ).each(function(c){this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c){this.style.zIndex= ---> b <--- +c;});this[0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.style.zIndex=b+ ---> c <--- ;});this[0].style

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this[0].style.zIndex= ---> b <--- +a.length;}}});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0].style.zIndex=b+ ---> a <--- .length;}}});d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.length;}}}); ---> d <--- .ui.plugin.add("draggable","zIndex"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(a,b){ ---> a <--- =d(b.helper);b=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){a= ---> d <--- (b.helper);b=d(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b){a=d( ---> b <--- .helper);b=d(this)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a=d(b.helper); ---> b <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d(b.helper);b= ---> d <--- (this).data("draggable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
data("draggable").options;if( ---> a <--- .css("zIndex")){b._zIndex

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.css("zIndex")){ ---> b <--- ._zIndex=a.css("zIndex");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("zIndex")){b._zIndex= ---> a <--- .css("zIndex");}a.css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.css("zIndex");} ---> a <--- .css("zIndex",b.zIndex);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);}a.css("zIndex", ---> b <--- .zIndex);},stop:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(a,b){ ---> a <--- =d(this).data("draggable")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){a= ---> d <--- (this).data("draggable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("draggable").options; ---> a <--- ._zIndex&&d(b.helper).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"draggable").options;a._zIndex&& ---> d <--- (b.helper).css("zIndex",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;a._zIndex&&d( ---> b <--- .helper).css("zIndex",a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.helper).css("zIndex", ---> a <--- ._zIndex);}});})

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(d){ ---> d <--- .widget("ui.droppable",{widgetEventPrefix:"drop",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_create:function(){var  ---> a <--- =this.options,b=a.accept

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.options, ---> b <--- =a.accept;this.isover=0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=this.options,b= ---> a <--- .accept;this.isover=0;this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.isout=1;this.accept= ---> d <--- .isFunction(b)?b:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.accept=d.isFunction( ---> b <--- )?b:function(c){return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
accept=d.isFunction(b)? ---> b <--- :function(c){returnc.is

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
?b:function(c){return ---> c <--- .is(b);};this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c){returnc.is( ---> b <--- );};this.proportions={width

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.element[0].offsetHeight}; ---> d <--- .ui.ddmanager.droppables[a.scope

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.ui.ddmanager.droppables[ ---> a <--- .scope]=d.ui.ddmanager.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ddmanager.droppables[a.scope]= ---> d <--- .ui.ddmanager.droppables[a.scope

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.ui.ddmanager.droppables[ ---> a <--- .scope]||[];d.ui

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[a.scope]||[]; ---> d <--- .ui.ddmanager.droppables[a.scope

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.ui.ddmanager.droppables[ ---> a <--- .scope].push(this);a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.scope].push(this); ---> a <--- .addClasses&&this.element.addClass("ui-droppable"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
destroy:function(){for(var  ---> a <--- =d.ui.ddmanager.droppables[this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){for(var a= ---> d <--- .ui.ddmanager.droppables[this.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
droppables[this.options.scope], ---> b <--- =0;b<a.length;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
options.scope],b=0; ---> b <--- <a.length;b++){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
scope],b=0;b< ---> a <--- .length;b++){a[b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;b<a.length; ---> b <--- ++){a[b]==this&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<a.length;b++){ ---> a <--- [b]==this&&a.splice(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;b++){a[ ---> b <--- ]==this&&a.splice(b,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){a[b]==this&& ---> a <--- .splice(b,1);}this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b]==this&&a.splice( ---> b <--- ,1);}this.element.removeClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){if( ---> a <--- =="accept"){this.accept=d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a=="accept"){this.accept= ---> d <--- .isFunction(b)?b:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.accept=d.isFunction( ---> b <--- )?b:function(c){return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
accept=d.isFunction(b)? ---> b <--- :function(c){returnc.is

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
?b:function(c){return ---> c <--- .is(b);};}d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c){returnc.is( ---> b <--- );};}d.Widget.prototype

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.is(b);};} ---> d <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_activate:function(a){var  ---> b <--- =d.ui.ddmanager.current;this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .ui.ddmanager.current;this.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass(this.options.activeClass); ---> b <--- &&this._trigger("activate",a,this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b&&this._trigger("activate", ---> a <--- ,this.ui(b));}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("activate",a,this.ui( ---> b <--- ));},_deactivate:function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_deactivate:function(a){var  ---> b <--- =d.ui.ddmanager.current;this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .ui.ddmanager.current;this.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
removeClass(this.options.activeClass); ---> b <--- &&this._trigger("deactivate",a,this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b&&this._trigger("deactivate", ---> a <--- ,this.ui(b));}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("deactivate",a,this.ui( ---> b <--- ));},_over:function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_over:function(a){var  ---> b <--- =d.ui.ddmanager.current;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .ui.ddmanager.current;if(!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ddmanager.current;if(!(! ---> b <--- ||(b.currentItem||b.element)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!(!b||( ---> b <--- .currentItem||b.element)[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(!b||(b.currentItem|| ---> b <--- .element)[0]==this.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this.element[0], ---> b <--- .currentItem||b.element)){this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0],b.currentItem|| ---> b <--- .element)){this.options.hoverClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
hoverClass);this._trigger("over", ---> a <--- ,this.ui(b));}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("over",a,this.ui( ---> b <--- ));}}},_out:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_out:function(a){var  ---> b <--- =d.ui.ddmanager.current;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .ui.ddmanager.current;if(!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ddmanager.current;if(!(! ---> b <--- ||(b.currentItem||b.element)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!(!b||( ---> b <--- .currentItem||b.element)[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(!b||(b.currentItem|| ---> b <--- .element)[0]==this.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this.element[0], ---> b <--- .currentItem||b.element)){this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0],b.currentItem|| ---> b <--- .element)){this.options.hoverClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
hoverClass);this._trigger("out", ---> a <--- ,this.ui(b));}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("out",a,this.ui( ---> b <--- ));}}},_drop:function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =b||d.ui.ddmanager.current

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c= ---> b <--- ||d.ui.ddmanager.current;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var c=b|| ---> d <--- .ui.ddmanager.current;if(!

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.ddmanager.current;if(! ---> c <--- ||(c.currentItem||c.element)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.current;if(!c||( ---> c <--- .currentItem||c.element)[0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(!c||(c.currentItem|| ---> c <--- .element)[0]==this.element

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0]){returnfalse;}var  ---> e <--- =false;this.element.find(":data(droppable)"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> g <--- =d.data(this,"droppable");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var g= ---> d <--- .data(this,"droppable");if(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
data(this,"droppable");if( ---> g <--- .options.greedy&&!g.options.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
if(g.options.greedy&&! ---> g <--- .options.disabled&&g.options.scope

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
greedy&&!g.options.disabled&& ---> g <--- .options.scope==c.options.scope

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled&&g.options.scope== ---> c <--- .options.scope&&g.accept.call

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.scope==c.options.scope&& ---> g <--- .accept.call(g.element[0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.scope&&g.accept.call( ---> g <--- .element[0],c.currentItem||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
call(g.element[0], ---> c <--- .currentItem||c.element)&&d.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0],c.currentItem|| ---> c <--- .element)&&d.ui.intersect(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.currentItem||c.element)&& ---> d <--- .ui.intersect(c,d.extend

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
element)&&d.ui.intersect( ---> c <--- ,d.extend(g,{offset:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&d.ui.intersect(c, ---> d <--- .extend(g,{offset:g.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.intersect(c,d.extend( ---> g <--- ,{offset:g.element.offset(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
d.extend(g,{offset: ---> g <--- .element.offset()}),g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.offset()}), ---> g <--- .options.tolerance)){e=true

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,g.options.tolerance)){ ---> e <--- =true;returnfalse;}});

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnfalse;}});if( ---> e <--- ){returnfalse;}if(this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this.element[0], ---> c <--- .currentItem||c.element)){this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0],c.currentItem|| ---> c <--- .element)){this.options.activeClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
hoverClass);this._trigger("drop", ---> a <--- ,this.ui(c));return

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("drop",a,this.ui( ---> c <--- ));returnthis.element;}return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){return{draggable: ---> a <--- .currentItem||a.element,helper:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{return{draggable:a.currentItem|| ---> a <--- .element,helper:a.helper,position

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentItem||a.element,helper: ---> a <--- .helper,position:a.position,offset

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,helper:a.helper,position: ---> a <--- .position,offset:a.positionAbs};

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,position:a.position,offset: ---> a <--- .positionAbs};}});d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.positionAbs};}}); ---> d <--- .extend(d.ui.droppable,{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});d.extend( ---> d <--- .ui.droppable,{version:"1.8.5"}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
droppable,{version:"1.8.5"}); ---> d <--- .ui.intersect=function(a,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,c){if(! ---> b <--- .offset){returnfalse;}var e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset){returnfalse;}var  ---> e <--- =(a.positionAbs||a.position.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnfalse;}var e=( ---> a <--- .positionAbs||a.position.absolute).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}var e=(a.positionAbs|| ---> a <--- .position.absolute).left,g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a.position.absolute).left, ---> g <--- =e+a.helperProportions.width,f

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
position.absolute).left,g= ---> e <--- +a.helperProportions.width,f=(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
absolute).left,g=e+ ---> a <--- .helperProportions.width,f=(a.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=e+a.helperProportions.width, ---> f <--- =(a.positionAbs||a.position.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.helperProportions.width,f=( ---> a <--- .positionAbs||a.position.absolute).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width,f=(a.positionAbs|| ---> a <--- .position.absolute).top,h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
a.position.absolute).top, ---> h <--- =f+a.helperProportions.height,i

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
position.absolute).top,h= ---> f <--- +a.helperProportions.height,i=b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
absolute).top,h=f+ ---> a <--- .helperProportions.height,i=b.offset

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=f+a.helperProportions.height, ---> i <--- =b.offset.left,k=i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+a.helperProportions.height,i= ---> b <--- .offset.left,k=i+b

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
,i=b.offset.left, ---> k <--- =i+b.proportions.width,j

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.offset.left,k= ---> i <--- +b.proportions.width,j=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.left,k=i+ ---> b <--- .proportions.width,j=b.offset

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=i+b.proportions.width, ---> j <--- =b.offset.top,l=j

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+b.proportions.width,j= ---> b <--- .offset.top,l=j+b

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,j=b.offset.top, ---> l <--- =j+b.proportions.height;switch

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.offset.top,l= ---> j <--- +b.proportions.height;switch(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.top,l=j+ ---> b <--- .proportions.height;switch(c){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+b.proportions.height;switch( ---> c <--- ){case"fit":returni<=e&&

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
switch(c){case"fit":return ---> i <--- <=e&&g<=k&&j<=f

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c){case"fit":returni<= ---> e <--- &&g<=k&&j<=f&&h

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{case"fit":returni<=e&& ---> g <--- <=k&&j<=f&&h<=l

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"fit":returni<=e&&g<= ---> k <--- &&j<=f&&h<=l;case

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
returni<=e&&g<=k&& ---> j <--- <=f&&h<=l;case"intersect":

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
<=e&&g<=k&&j<= ---> f <--- &&h<=l;case"intersect":returni

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
&&g<=k&&j<=f&& ---> h <--- <=l;case"intersect":returni<e

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
<=k&&j<=f&&h<= ---> l <--- ;case"intersect":returni<e+a

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
&&h<=l;case"intersect":return ---> i <--- <e+a.helperProportions.width/2

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
<=l;case"intersect":returni< ---> e <--- +a.helperProportions.width/2&&g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;case"intersect":returni<e+ ---> a <--- .helperProportions.width/2&&g-a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+a.helperProportions.width/2&& ---> g <--- -a.helperProportions.width/2<k

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.helperProportions.width/2&&g- ---> a <--- .helperProportions.width/2<k&&j

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
-a.helperProportions.width/2< ---> k <--- &&j<f+a.helperProportions.height

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.helperProportions.width/2<k&& ---> j <--- <f+a.helperProportions.height/2

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.width/2<k&&j< ---> f <--- +a.helperProportions.height/2&&h

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/2<k&&j<f+ ---> a <--- .helperProportions.height/2&&h-a

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
+a.helperProportions.height/2&& ---> h <--- -a.helperProportions.height/2<l

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.helperProportions.height/2&&h- ---> a <--- .helperProportions.height/2<l;case

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
-a.helperProportions.height/2< ---> l <--- ;case"pointer":returnd.ui.isOver

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
/2<l;case"pointer":return ---> d <--- .ui.isOver((a.positionAbs||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:returnd.ui.isOver(( ---> a <--- .positionAbs||a.position.absolute).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.isOver((a.positionAbs|| ---> a <--- .position.absolute).top+(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.absolute).top+( ---> a <--- .clickOffset||a.offset.click).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).top+(a.clickOffset|| ---> a <--- .offset.click).top,(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.click).top,( ---> a <--- .positionAbs||a.position.absolute).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).top,(a.positionAbs|| ---> a <--- .position.absolute).left+(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.absolute).left+( ---> a <--- .clickOffset||a.offset.click).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).left+(a.clickOffset|| ---> a <--- .offset.click).left,j,

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
a.offset.click).left, ---> j <--- ,i,b.proportions.height,b

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.click).left,j, ---> i <--- ,b.proportions.height,b.proportions

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
click).left,j,i, ---> b <--- .proportions.height,b.proportions.width

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,i,b.proportions.height, ---> b <--- .proportions.width);case"touch":return

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.width);case"touch":return( ---> f <--- >=j&&f<=l||h>=j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
);case"touch":return(f>= ---> j <--- &&f<=l||h>=j&&h

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
case"touch":return(f>=j&& ---> f <--- <=l||h>=j&&h<=l

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
:return(f>=j&&f<= ---> l <--- ||h>=j&&h<=l||f

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(f>=j&&f<=l|| ---> h <--- >=j&&h<=l||f<j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
>=j&&f<=l||h>= ---> j <--- &&h<=l||f<j&&h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f<=l||h>=j&& ---> h <--- <=l||f<j&&h>l

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
<=l||h>=j&&h<= ---> l <--- ||f<j&&h>l)&&

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
||h>=j&&h<=l|| ---> f <--- <j&&h>l)&&(e

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
>=j&&h<=l||f< ---> j <--- &&h>l)&&(e>=i

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
&&h<=l||f<j&& ---> h <--- >l)&&(e>=i&&e

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
<=l||f<j&&h> ---> l <--- )&&(e>=i&&e<=k

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
<j&&h>l)&&( ---> e <--- >=i&&e<=k||g>=i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
&&h>l)&&(e>= ---> i <--- &&e<=k||g>=i&&g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
>l)&&(e>=i&& ---> e <--- <=k||g>=i&&g<=k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(e>=i&&e<= ---> k <--- ||g>=i&&g<=k||e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(e>=i&&e<=k|| ---> g <--- >=i&&g<=k||e<i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
>=i&&e<=k||g>= ---> i <--- &&g<=k||e<i&&g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
&&e<=k||g>=i&& ---> g <--- <=k||e<i&&g>k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
<=k||g>=i&&g<= ---> k <--- ||e<i&&g>k);

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
||g>=i&&g<=k|| ---> e <--- <i&&g>k);default:

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
>=i&&g<=k||e< ---> i <--- &&g>k);default:returnfalse

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
&&g<=k||e<i&& ---> g <--- >k);default:returnfalse;}

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
<=k||e<i&&g> ---> k <--- );default:returnfalse;}};

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;default:returnfalse;}}; ---> d <--- .ui.ddmanager={current:null,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =d.ui.ddmanager.droppables[a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c= ---> d <--- .ui.ddmanager.droppables[a.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.ui.ddmanager.droppables[ ---> a <--- .options.scope]||[],e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.scope]||[], ---> e <--- =b?b.type:null,g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.scope]||[],e= ---> b <--- ?b.type:null,g=(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
]||[],e=b? ---> b <--- .type:null,g=(a.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=b?b.type:null, ---> g <--- =(a.currentItem||a.element)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.type:null,g=( ---> a <--- .currentItem||a.element).find(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
null,g=(a.currentItem|| ---> a <--- .element).find(":data(droppable)").andSelf

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
find(":data(droppable)").andSelf(), ---> f <--- =0;a:for(;f<

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.andSelf(),f=0; ---> a <--- :for(;f<c.length;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f=0;a:for(; ---> f <--- <c.length;f++){if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0;a:for(;f< ---> c <--- .length;f++){if(!

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
for(;f<c.length; ---> f <--- ++){if(!(c[f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;f++){if(!( ---> c <--- [f].options.disabled||a&&

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(!(c[ ---> f <--- ].options.disabled||a&&!c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c[f].options.disabled|| ---> a <--- &&!c[f].accept.call

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
].options.disabled||a&&! ---> c <--- [f].accept.call(c[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
options.disabled||a&&!c[ ---> f <--- ].accept.call(c[f]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c[f].accept.call( ---> c <--- [f].element[0],a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f].accept.call(c[ ---> f <--- ].element[0],a.currentItem

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[f].element[0], ---> a <--- .currentItem||a.element))){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0],a.currentItem|| ---> a <--- .element))){for(var h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.element))){for(var  ---> h <--- =0;h<g.length;h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var h=0; ---> h <--- <g.length;h++){if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var h=0;h< ---> g <--- .length;h++){if(g

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;h<g.length; ---> h <--- ++){if(g[h]==

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;h++){if( ---> g <--- [h]==c[f].element

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;h++){if(g[ ---> h <--- ]==c[f].element[0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(g[h]== ---> c <--- [f].element[0]){

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
if(g[h]==c[ ---> f <--- ].element[0]){c[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f].element[0]){ ---> c <--- [f].proportions.height=0;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.element[0]){c[ ---> f <--- ].proportions.height=0;continuea

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
].proportions.height=0;continue ---> a <--- ;}}c[f].visible=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
height=0;continuea;}} ---> c <--- [f].visible=c[f]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0;continuea;}}c[ ---> f <--- ].visible=c[f].element

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}}c[f].visible= ---> c <--- [f].element.css("display")

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c[f].visible=c[ ---> f <--- ].element.css("display")!="none"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css("display")!="none";if( ---> c <--- [f].visible){c[f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"display")!="none";if(c[ ---> f <--- ].visible){c[f].

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(c[f].visible){ ---> c <--- [f].offset=c[f]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[f].visible){c[ ---> f <--- ].offset=c[f].element

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){c[f].offset= ---> c <--- [f].element.offset();

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c[f].offset=c[ ---> f <--- ].element.offset();c[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f].element.offset(); ---> c <--- [f].proportions={width:c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.offset();c[ ---> f <--- ].proportions={width:c[f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[f].proportions={width: ---> c <--- [f].element[0].offsetWidth

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
].proportions={width:c[ ---> f <--- ].element[0].offsetWidth,height

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0].offsetWidth,height: ---> c <--- [f].element[0].offsetHeight

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0].offsetWidth,height:c[ ---> f <--- ].element[0].offsetHeight};

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.element[0].offsetHeight}; ---> e <--- =="mousedown"&&c[f]._activate.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
].offsetHeight};e=="mousedown"&& ---> c <--- [f]._activate.call(c[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
offsetHeight};e=="mousedown"&&c[ ---> f <--- ]._activate.call(c[f]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c[f]._activate.call( ---> c <--- [f],b);}}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f]._activate.call(c[ ---> f <--- ],b);}}}},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_activate.call(c[f], ---> b <--- );}}}},drop:function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =false;d.each(d.ui

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var c=false; ---> d <--- .each(d.ui.ddmanager.droppables

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var c=false;d.each( ---> d <--- .ui.ddmanager.droppables[a.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.ui.ddmanager.droppables[ ---> a <--- .options.scope]||[],function

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.disabled&&this.visible&& ---> d <--- .ui.intersect(a,this,this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.visible&&d.ui.intersect( ---> a <--- ,this,this.options.tolerance))

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,this.options.tolerance)){ ---> c <--- =c||this._drop.call(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.tolerance)){c= ---> c <--- ||this._drop.call(this,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||this._drop.call(this, ---> b <--- );}if(!this.options.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this.element[0], ---> a <--- .currentItem||a.element)){this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0],a.currentItem|| ---> a <--- .element)){this.isout=1

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._deactivate.call(this, ---> b <--- );}}});returnc;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b);}}});return ---> c <--- ;},drag:function(a,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
drag:function(a,b){ ---> a <--- .options.refreshPositions&&d.ui.ddmanager

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a.options.refreshPositions&& ---> d <--- .ui.ddmanager.prepareOffsets(a,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&d.ui.ddmanager.prepareOffsets( ---> a <--- ,b);d.each(d.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.prepareOffsets(a, ---> b <--- );d.each(d.ui.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ddmanager.prepareOffsets(a,b); ---> d <--- .each(d.ui.ddmanager.droppables

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b);d.each( ---> d <--- .ui.ddmanager.droppables[a.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.ui.ddmanager.droppables[ ---> a <--- .options.scope]||[],function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||!this.visible)){var  ---> c <--- =d.ui.intersect(a,this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.visible)){var c= ---> d <--- .ui.intersect(a,this,this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var c=d.ui.intersect( ---> a <--- ,this,this.options.tolerance);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.tolerance);if( ---> c <--- =!c&&this.isover==1?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.tolerance);if(c=! ---> c <--- &&this.isover==1?"isout":c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&this.isover==1?"isout": ---> c <--- &&this.isover==0?"isover":null

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
==0?"isover":null){var  ---> e <--- ;if(this.options.greedy){

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.options.greedy){var  ---> g <--- =this.element.parents(":data(droppable):eq(0)");

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
element.parents(":data(droppable):eq(0)");if( ---> g <--- .length){e=d.data(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(g.length){ ---> e <--- =d.data(g[0],

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(g.length){e= ---> d <--- .data(g[0],"droppable")

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
length){e=d.data( ---> g <--- [0],"droppable");e.greedyChild

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(g[0],"droppable"); ---> e <--- .greedyChild=c=="isover"?1:0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
],"droppable");e.greedyChild= ---> c <--- =="isover"?1:0;}}if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
?1:0;}}if( ---> e <--- &&c=="isover"){e.isover=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:0;}}if(e&& ---> c <--- =="isover"){e.isover=0;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e&&c=="isover"){ ---> e <--- .isover=0;e.isout=1

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"isover"){e.isover=0; ---> e <--- .isout=1;e._out.call

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;e.isout=1; ---> e <--- ._out.call(e,b);

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;e._out.call( ---> e <--- ,b);}this[c]=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;e._out.call(e, ---> b <--- );}this[c]=1;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(e,b);}this[ ---> c <--- ]=1;this[c=="isout"?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this[c]=1;this[ ---> c <--- =="isout"?"isover":"isout"]=0;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"isover":"isout"]=0;this[ ---> c <--- =="isover"?"_over":"_out"].call(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"_over":"_out"].call(this, ---> b <--- );if(e&&c=="isout")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this,b);if( ---> e <--- &&c=="isout"){e.isout=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this,b);if(e&& ---> c <--- =="isout"){e.isout=0;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e&&c=="isout"){ ---> e <--- .isout=0;e.isover=1

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"isout"){e.isout=0; ---> e <--- .isover=1;e._over.call

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;e.isover=1; ---> e <--- ._over.call(e,b);

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;e._over.call( ---> e <--- ,b);}}}});

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;e._over.call(e, ---> b <--- );}}}});}}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(e){ ---> e <--- .widget("ui.resizable",e.ui.mouse

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e){e.widget("ui.resizable", ---> e <--- .ui.mouse,{widgetEventPrefix:"resize",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},_create:function(){var  ---> b <--- =this,a=this.options;this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var b=this, ---> a <--- =this.options;this.element.addClass

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element.addClass("ui-resizable"); ---> e <--- .extend(this,{_aspectRatio:!!

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
extend(this,{_aspectRatio:!! ---> a <--- .aspectRatio,aspectRatio:a.aspectRatio,originalElement

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:!!a.aspectRatio,aspectRatio: ---> a <--- .aspectRatio,originalElement:this.element,_proportionallyResizeElements

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
element,_proportionallyResizeElements:[],_helper: ---> a <--- .helper||a.ghost||a.animate

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[],_helper:a.helper|| ---> a <--- .ghost||a.animate?a.helper

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.helper||a.ghost|| ---> a <--- .animate?a.helper||"ui-resizable-helper":null

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||a.ghost||a.animate? ---> a <--- .helper||"ui-resizable-helper":null});if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.css("position"))&& ---> e <--- .browser.opera&&this.element.css

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
});this.element.wrap( ---> e <--- ('<div class="ui-wrapper" style="overflow: hidden;"></div>').css({position:this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_proportionallyResize();}this.handles= ---> a <--- .handles||(!e(".ui-resizable-handle",this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.handles=a.handles||(! ---> e <--- (".ui-resizable-handle",this.element).length?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.handles="n,e,s,w,se,sw,ne,nw";}var  ---> c <--- =this.handles.split(",");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.handles={};for(var  ---> d <--- =0;d<c.length;d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
};for(var d=0; ---> d <--- <c.length;d++){var 

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var d=0;d< ---> c <--- .length;d++){var f=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;d<c.length; ---> d <--- ++){var f=e.trim(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c.length;d++){var  ---> f <--- =e.trim(c[d])

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
length;d++){var f= ---> e <--- .trim(c[d]),g

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var f=e.trim( ---> c <--- [d]),g=e('<div class="ui-resizable-handle '

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=e.trim(c[ ---> d <--- ]),g=e('<div class="ui-resizable-handle '+(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.trim(c[d]), ---> g <--- =e('<div class="ui-resizable-handle '+("ui-resizable-"+f)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(c[d]),g= ---> e <--- ('<div class="ui-resizable-handle '+("ui-resizable-"+f)+'"></div>'

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
g=e('<div class="ui-resizable-handle '+("ui-resizable-"+ ---> f <--- )+'"></div>');/sw|se|ne|nw/.test(f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
)+'"></div>');/sw|se|ne|nw/.test( ---> f <--- )&&g.css({zIndex:++

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
);/sw|se|ne|nw/.test(f)&& ---> g <--- .css({zIndex:++a.zIndex

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&g.css({zIndex:++ ---> a <--- .zIndex});"se"==f&&g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
++a.zIndex});"se"== ---> f <--- &&g.addClass("ui-icon ui-icon-gripsmall-diagonal-se");this.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.zIndex});"se"==f&& ---> g <--- .addClass("ui-icon ui-icon-gripsmall-diagonal-se");this.handles[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-icon ui-icon-gripsmall-diagonal-se");this.handles[ ---> f <--- ]=".ui-resizable-"+f;this.element.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this.handles[f]=".ui-resizable-"+ ---> f <--- ;this.element.append(g);

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+f;this.element.append( ---> g <--- );}}this._renderAxis=function(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
this._renderAxis=function(h){ ---> h <--- =h||this.element;for(var 

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
_renderAxis=function(h){h= ---> h <--- ||this.element;for(var i in 

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
h||this.element;for(var  ---> i <---  in this.handles){if(this.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
handles){if(this.handles[ ---> i <--- ].constructor==String){this.handles

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
constructor==String){this.handles[ ---> i <--- ]=e(this.handles[i]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.handles[i]= ---> e <--- (this.handles[i],this.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i]=e(this.handles[ ---> i <--- ],this.element).show()

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
nodeName.match(/textarea|input|select|button/i)){var  ---> j <--- =e(this.handles[i],

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
match(/textarea|input|select|button/i)){var j= ---> e <--- (this.handles[i],this.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
var j=e(this.handles[ ---> i <--- ],this.element),k=0

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
[i],this.element), ---> k <--- =0;k=/sw|ne|nw|se|n|s/.test(i

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element),k=0; ---> k <--- =/sw|ne|nw|se|n|s/.test(i)?j.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;k=/sw|ne|nw|se|n|s/.test( ---> i <--- )?j.outerHeight():j.

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
k=/sw|ne|nw|se|n|s/.test(i)? ---> j <--- .outerHeight():j.outerWidth()

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
i)?j.outerHeight(): ---> j <--- .outerWidth();j=["padding",

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
():j.outerWidth(); ---> j <--- =["padding",/ne|nw|n/.test(i)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
j=["padding",/ne|nw|n/.test( ---> i <--- )?"Top":/se|sw|s/.test(i)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i)?"Top":/se|sw|s/.test( ---> i <--- )?"Bottom":/^e$/.test(i)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i)?"Bottom":/^e$/.test( ---> i <--- )?"Right":"Left"].join(""

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:"Left"].join(""); ---> h <--- .css(j,k);this.

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
join("");h.css( ---> j <--- ,k);this._proportionallyResize();

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"");h.css(j, ---> k <--- );this._proportionallyResize();}e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);this._proportionallyResize();} ---> e <--- (this.handles[i]);}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);}e(this.handles[ ---> i <--- ]);}};this._renderAxis(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element);this._handles= ---> e <--- (".ui-resizable-handle",this.element).disableSelection(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
mouseover(function(){if(! ---> b <--- .resizing){if(this.className)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(this.className){var  ---> h <--- =this.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.className.match(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);} ---> b <--- .axis=h&&h[1]?

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(/ui-resizable-(se|sw|ne|nw|n|e|s|w)/i);}b.axis= ---> h <--- &&h[1]?h[1]

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
);}b.axis=h&& ---> h <--- [1]?h[1]:"se"

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
axis=h&&h[1]? ---> h <--- [1]:"se";}});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:"se";}});if( ---> a <--- .autoHide){this._handles.hide(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{this._handles.hide(); ---> e <--- (this.element).addClass("ui-resizable-autohide")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-resizable-autohide").hover(function(){ ---> e <--- (this).removeClass("ui-resizable-autohide");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).removeClass("ui-resizable-autohide"); ---> b <--- ._handles.show();},function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},function(){if(! ---> b <--- .resizing){e(this).addClass

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(!b.resizing){ ---> e <--- (this).addClass("ui-resizable-autohide");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).addClass("ui-resizable-autohide"); ---> b <--- ._handles.hide();}})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){this._mouseDestroy();var  ---> b <--- =function(c){e(c)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;var b=function(c){ ---> e <--- (c).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b=function(c){e( ---> c <--- ).removeClass("ui-resizable ui-resizable-disabled ui-resizable-resizing").removeData("resizable"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
};if(this.elementIsWrapper){ ---> b <--- (this.element);var a=this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b(this.element);var  ---> a <--- =this.element;a.after(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var a=this.element; ---> a <--- .after(this.originalElement.css({

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.originalElement.css({position: ---> a <--- .css("position"),width:a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.css("position"),width: ---> a <--- .outerWidth(),height:a.outerHeight

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.outerWidth(),height: ---> a <--- .outerHeight(),top:a.css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.outerHeight(),top: ---> a <--- .css("top"),left:a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.css("top"),left: ---> a <--- .css("left")})).remove

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
css("resize",this.originalResizeStyle); ---> b <--- (this.originalElement);returnthis;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseCapture:function(b){var  ---> a <--- =false;for(var c in this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=false;for(var  ---> c <---  in this.handles){if(e(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c in this.handles){if( ---> e <--- (this.handles[c])[0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(e(this.handles[ ---> c <--- ])[0]==b.target)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
handles[c])[0]== ---> b <--- .target){a=true;}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]==b.target){ ---> a <--- =true;}}return!this.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}return!this.options.disabled&& ---> a <--- ;},_mouseStart:function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseStart:function(b){var  ---> a <--- =this.options,c=this.element

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.options, ---> c <--- =this.element.position(),d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.element.position(), ---> d <--- =this.element;this.resizing=true

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
true;this.documentScroll={top: ---> e <--- (document).scrollTop(),left:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
document).scrollTop(),left: ---> e <--- (document).scrollLeft()};if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).scrollLeft()};if( ---> d <--- .is(".ui-draggable")||/absolute/.test(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
is(".ui-draggable")||/absolute/.test( ---> d <--- .css("position"))){d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.css("position"))){ ---> d <--- .css({position:"absolute",top:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css({position:"absolute",top: ---> c <--- .top,left:c.left})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:c.top,left: ---> c <--- .left});}e.browser.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
left:c.left});} ---> e <--- .browser.opera&&/relative/.test(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.browser.opera&&/relative/.test( ---> d <--- .css("position"))&&d.css

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.css("position"))&& ---> d <--- .css({position:"relative",top:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
});this._renderProxy(); ---> c <--- =m(this.helper.css("left"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._renderProxy();c= ---> m <--- (this.helper.css("left"))

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
helper.css("left"));var  ---> f <--- =m(this.helper.css("top"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
css("left"));var f= ---> m <--- (this.helper.css("top"))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("top"));if( ---> a <--- .containment){c+=e(a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(a.containment){ ---> c <--- +=e(a.containment).scrollLeft(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.containment){c+= ---> e <--- (a.containment).scrollLeft()||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.containment){c+=e( ---> a <--- .containment).scrollLeft()||0;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
containment).scrollLeft()||0; ---> f <--- +=e(a.containment).scrollTop(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollLeft()||0;f+= ---> e <--- (a.containment).scrollTop()||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
()||0;f+=e( ---> a <--- .containment).scrollTop()||0;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);this.position={left: ---> c <--- ,top:f};this.size=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
position={left:c,top: ---> f <--- };this.size=this._helper?

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
size=this._helper?{width: ---> d <--- .outerWidth(),height:d.outerHeight

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.outerWidth(),height: ---> d <--- .outerHeight()}:{width:d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerHeight()}:{width: ---> d <--- .width(),height:d.height

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.width(),height: ---> d <--- .height()};this.originalSize=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
originalSize=this._helper?{width: ---> d <--- .outerWidth(),height:d.outerHeight

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.outerWidth(),height: ---> d <--- .outerHeight()}:{width:d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerHeight()}:{width: ---> d <--- .width(),height:d.height

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.width(),height: ---> d <--- .height()};this.originalPosition=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
};this.originalPosition={left: ---> c <--- ,top:f};this.sizeDiff=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
originalPosition={left:c,top: ---> f <--- };this.sizeDiff={width:d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
};this.sizeDiff={width: ---> d <--- .outerWidth()-d.width()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{width:d.outerWidth()- ---> d <--- .width(),height:d.outerHeight

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
-d.width(),height: ---> d <--- .outerHeight()-d.height()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:d.outerHeight()- ---> d <--- .height()};this.originalMousePosition=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
};this.originalMousePosition={left: ---> b <--- .pageX,top:b.pageY};

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{left:b.pageX,top: ---> b <--- .pageY};this.aspectRatio=typeofa

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageY};this.aspectRatio=typeof ---> a <--- .aspectRatio=="number"?a.aspectRatio:this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
aspectRatio=typeofa.aspectRatio=="number"? ---> a <--- .aspectRatio:this.originalSize.width/this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/this.originalSize.height||1; ---> a <--- =e(".ui-resizable-"+this.axis).

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.originalSize.height||1;a= ---> e <--- (".ui-resizable-"+this.axis).css(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.axis).css("cursor"); ---> e <--- ("body").css("cursor",a==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e("body").css("cursor", ---> a <--- =="auto"?this.axis+"-resize":a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=="auto"?this.axis+"-resize": ---> a <--- );d.addClass("ui-resizable-resizing");this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.axis+"-resize":a); ---> d <--- .addClass("ui-resizable-resizing");this._propagate(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-resizable-resizing");this._propagate("start", ---> b <--- );returntrue;},_mouseDrag:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseDrag:function(b){var  ---> a <--- =this.helper,c=this.originalMousePosition

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.helper, ---> c <--- =this.originalMousePosition,d=this._change

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.helper,c=this.originalMousePosition, ---> d <--- =this._change[this.axis];

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[this.axis];if(! ---> d <--- ){returnfalse;}c=d.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(!d){returnfalse;} ---> c <--- =d.apply(this,[b,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d){returnfalse;}c= ---> d <--- .apply(this,[b,b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c=d.apply(this,[ ---> b <--- ,b.pageX-c.left||0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d.apply(this,[b, ---> b <--- .pageX-c.left||0,b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this,[b,b.pageX- ---> c <--- .left||0,b.pageY-c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageX-c.left||0, ---> b <--- .pageY-c.top||0])

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.left||0,b.pageY- ---> c <--- .top||0]);if(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
]);if(this._aspectRatio|| ---> b <--- .shiftKey){c=this._updateRatio(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._aspectRatio||b.shiftKey){ ---> c <--- =this._updateRatio(c,b);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
shiftKey){c=this._updateRatio( ---> c <--- ,b);}c=this._respectSize

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{c=this._updateRatio(c, ---> b <--- );}c=this._respectSize(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._updateRatio(c,b);} ---> c <--- =this._respectSize(c,b);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);}c=this._respectSize( ---> c <--- ,b);this._propagate("resize",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}c=this._respectSize(c, ---> b <--- );this._propagate("resize",b)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b);this._propagate("resize", ---> b <--- );a.css({top:this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._propagate("resize",b); ---> a <--- .css({top:this.position.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._proportionallyResize();this._updateCache( ---> c <--- );this._trigger("resize",b,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c);this._trigger("resize", ---> b <--- ,this.ui());returnfalse

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.resizing=false;var  ---> a <--- =this.options,c=this;if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
false;var a=this.options, ---> c <--- =this;if(this._helper){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(this._helper){var  ---> d <--- =this._proportionallyResizeElements,f=d.length

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){var d=this._proportionallyResizeElements, ---> f <--- =d.length&&/textarea/i.test(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var d=this._proportionallyResizeElements,f= ---> d <--- .length&&/textarea/i.test(d[0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.length&&/textarea/i.test( ---> d <--- [0].nodeName);d=f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d[0].nodeName); ---> d <--- =f&&e.ui.hasScroll(d

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].nodeName);d= ---> f <--- &&e.ui.hasScroll(d[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
].nodeName);d=f&& ---> e <--- .ui.hasScroll(d[0],

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=f&&e.ui.hasScroll( ---> d <--- [0],"left")?0:c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[0],"left")?0: ---> c <--- .sizeDiff.height;f={width:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?0:c.sizeDiff.height; ---> f <--- ={width:c.size.width-

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
sizeDiff.height;f={width: ---> c <--- .size.width-(f?0:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
width:c.size.width-( ---> f <--- ?0:c.sizeDiff.width),

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
size.width-(f?0: ---> c <--- .sizeDiff.width),height:c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.sizeDiff.width),height: ---> c <--- .size.height-d};d=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:c.size.height- ---> d <--- };d=parseInt(c.element.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.size.height-d}; ---> d <--- =parseInt(c.element.css("left"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
height-d};d=parseInt( ---> c <--- .element.css("left"),10)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css("left"),10)+( ---> c <--- .position.left-c.originalPosition.left

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(c.position.left- ---> c <--- .originalPosition.left)||null;var g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.originalPosition.left)||null;var  ---> g <--- =parseInt(c.element.css("top"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
)||null;var g=parseInt( ---> c <--- .element.css("top"),10)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css("top"),10)+( ---> c <--- .position.top-c.originalPosition.top

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(c.position.top- ---> c <--- .originalPosition.top)||null;a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.originalPosition.top)||null; ---> a <--- .animate||this.element.css(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate||this.element.css( ---> e <--- .extend(f,{top:g,

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.css(e.extend( ---> f <--- ,{top:g,left:d}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e.extend(f,{top: ---> g <--- ,left:d}));c.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f,{top:g,left: ---> d <--- }));c.helper.height(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
g,left:d})); ---> c <--- .helper.height(c.size.height

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
));c.helper.height( ---> c <--- .size.height);c.helper.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
height(c.size.height); ---> c <--- .helper.width(c.size.width

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
height);c.helper.width( ---> c <--- .size.width);this._helper&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width);this._helper&&! ---> a <--- .animate&&this._proportionallyResize();}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
animate&&this._proportionallyResize();} ---> e <--- ("body").css("cursor","auto")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-resizable-resizing");this._propagate("stop", ---> b <--- );this._helper&&this.helper.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
.helper.offset();if( ---> l <--- (b.left)){this.position

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset();if(l( ---> b <--- .left)){this.position.left

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this.position.left= ---> b <--- .left;}if(l(b.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
left=b.left;}if( ---> l <--- (b.top)){this.position

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.left;}if(l( ---> b <--- .top)){this.position.top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this.position.top= ---> b <--- .top;}if(l(b.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
top=b.top;}if( ---> l <--- (b.height)){this.size

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.top;}if(l( ---> b <--- .height)){this.size.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this.size.height= ---> b <--- .height;}if(l(b.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
height=b.height;}if( ---> l <--- (b.width)){this.size

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.height;}if(l( ---> b <--- .width)){this.size.width

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this.size.width= ---> b <--- .width;}},_updateRatio:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_updateRatio:function(b){var  ---> a <--- =this.position,c=this.size

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.position, ---> c <--- =this.size,d=this.axis

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.position,c=this.size, ---> d <--- =this.axis;if(b.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=this.axis;if( ---> b <--- .height){b.width=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
axis;if(b.height){ ---> b <--- .width=c.height*this.aspectRatio

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.height){b.width= ---> c <--- .height*this.aspectRatio;}else{

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.aspectRatio;}else{if( ---> b <--- .width){b.height=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(b.width){ ---> b <--- .height=c.width/this.aspectRatio

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.width){b.height= ---> c <--- .width/this.aspectRatio;}}if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
/this.aspectRatio;}}if( ---> d <--- =="sw"){b.left=a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(d=="sw"){ ---> b <--- .left=a.left+(c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="sw"){b.left= ---> a <--- .left+(c.width-b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.left=a.left+( ---> c <--- .width-b.width);b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.left+(c.width- ---> b <--- .width);b.top=null;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.width-b.width); ---> b <--- .top=null;}if(d==

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b.top=null;}if( ---> d <--- =="nw"){b.top=a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(d=="nw"){ ---> b <--- .top=a.top+(c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="nw"){b.top= ---> a <--- .top+(c.height-b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.top=a.top+( ---> c <--- .height-b.height);b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.top+(c.height- ---> b <--- .height);b.left=a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.height-b.height); ---> b <--- .left=a.left+(c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.height);b.left= ---> a <--- .left+(c.width-b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.left=a.left+( ---> c <--- .width-b.width);}return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.left+(c.width- ---> b <--- .width);}returnb;},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width-b.width);}return ---> b <--- ;},_respectSize:function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_respectSize:function(b){var  ---> a <--- =this.options,c=this.axis

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.options, ---> c <--- =this.axis,d=l(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,c=this.axis, ---> d <--- =l(b.width)&&a.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=this.axis,d= ---> l <--- (b.width)&&a.maxWidth&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.axis,d=l( ---> b <--- .width)&&a.maxWidth&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=l(b.width)&& ---> a <--- .maxWidth&&a.maxWidth<b.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.width)&&a.maxWidth&& ---> a <--- .maxWidth<b.width,f=l

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.maxWidth&&a.maxWidth< ---> b <--- .width,f=l(b.height

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.maxWidth<b.width, ---> f <--- =l(b.height)&&a.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
.maxWidth<b.width,f= ---> l <--- (b.height)&&a.maxHeight&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
<b.width,f=l( ---> b <--- .height)&&a.maxHeight&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f=l(b.height)&& ---> a <--- .maxHeight&&a.maxHeight<b.height

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.height)&&a.maxHeight&& ---> a <--- .maxHeight<b.height,g=l

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.maxHeight&&a.maxHeight< ---> b <--- .height,g=l(b.width

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.maxHeight<b.height, ---> g <--- =l(b.width)&&a.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
.maxHeight<b.height,g= ---> l <--- (b.width)&&a.minWidth&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
<b.height,g=l( ---> b <--- .width)&&a.minWidth&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g=l(b.width)&& ---> a <--- .minWidth&&a.minWidth>b.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.width)&&a.minWidth&& ---> a <--- .minWidth>b.width,h=l

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.minWidth&&a.minWidth> ---> b <--- .width,h=l(b.height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.minWidth>b.width, ---> h <--- =l(b.height)&&a.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
.minWidth>b.width,h= ---> l <--- (b.height)&&a.minHeight&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
>b.width,h=l( ---> b <--- .height)&&a.minHeight&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h=l(b.height)&& ---> a <--- .minHeight&&a.minHeight>b.height

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.height)&&a.minHeight&& ---> a <--- .minHeight>b.height;if(g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.minHeight&&a.minHeight> ---> b <--- .height;if(g){b.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.minHeight>b.height;if( ---> g <--- ){b.width=a.minWidth;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.height;if(g){ ---> b <--- .width=a.minWidth;}if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(g){b.width= ---> a <--- .minWidth;}if(h){b

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
width=a.minWidth;}if( ---> h <--- ){b.height=a.minHeight;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.minWidth;}if(h){ ---> b <--- .height=a.minHeight;}if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(h){b.height= ---> a <--- .minHeight;}if(d){b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
height=a.minHeight;}if( ---> d <--- ){b.width=a.maxWidth;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.minHeight;}if(d){ ---> b <--- .width=a.maxWidth;}if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d){b.width= ---> a <--- .maxWidth;}if(f){b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
width=a.maxWidth;}if( ---> f <--- ){b.height=a.maxHeight;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.maxWidth;}if(f){ ---> b <--- .height=a.maxHeight;}var i

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(f){b.height= ---> a <--- .maxHeight;}var i=this.originalPosition

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.height=a.maxHeight;}var  ---> i <--- =this.originalPosition.left+this.originalSize

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.left+this.originalSize.width, ---> j <--- =this.position.top+this.size

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.top+this.size.height, ---> k <--- =/sw|nw|w/.test(c);c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.height,k=/sw|nw|w/.test( ---> c <--- );c=/nw|ne|n/.test(c)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
k=/sw|nw|w/.test(c); ---> c <--- =/nw|ne|n/.test(c);if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c);c=/nw|ne|n/.test( ---> c <--- );if(g&&k){b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
/nw|ne|n/.test(c);if( ---> g <--- &&k){b.left=i-

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
test(c);if(g&& ---> k <--- ){b.left=i-a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(g&&k){ ---> b <--- .left=i-a.minWidth;}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
g&&k){b.left= ---> i <--- -a.minWidth;}if(d&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
k){b.left=i- ---> a <--- .minWidth;}if(d&&k)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
i-a.minWidth;}if( ---> d <--- &&k){b.left=i-

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
a.minWidth;}if(d&& ---> k <--- ){b.left=i-a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(d&&k){ ---> b <--- .left=i-a.maxWidth;}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
d&&k){b.left= ---> i <--- -a.maxWidth;}if(h&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
k){b.left=i- ---> a <--- .maxWidth;}if(h&&c)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
i-a.maxWidth;}if( ---> h <--- &&c){b.top=j-

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.maxWidth;}if(h&& ---> c <--- ){b.top=j-a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(h&&c){ ---> b <--- .top=j-a.minHeight;}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
h&&c){b.top= ---> j <--- -a.minHeight;}if(f&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c){b.top=j- ---> a <--- .minHeight;}if(f&&c)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
j-a.minHeight;}if( ---> f <--- &&c){b.top=j-

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.minHeight;}if(f&& ---> c <--- ){b.top=j-a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(f&&c){ ---> b <--- .top=j-a.maxHeight;}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
f&&c){b.top= ---> j <--- -a.maxHeight;}if((a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c){b.top=j- ---> a <--- .maxHeight;}if((a=!

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-a.maxHeight;}if(( ---> a <--- =!b.width&&!b.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
maxHeight;}if((a=! ---> b <--- .width&&!b.height)&&!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a=!b.width&&! ---> b <--- .height)&&!b.left&&b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width&&!b.height)&&! ---> b <--- .left&&b.top){b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.height)&&!b.left&& ---> b <--- .top){b.top=null;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.left&&b.top){ ---> b <--- .top=null;}else{if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
top=null;}else{if( ---> a <--- &&!b.top&&b.left)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}else{if(a&&! ---> b <--- .top&&b.left){b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a&&!b.top&& ---> b <--- .left){b.left=null;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.top&&b.left){ ---> b <--- .left=null;}}returnb;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.left=null;}}return ---> b <--- ;},_proportionallyResize:function(){if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._proportionallyResizeElements.length){for(var  ---> b <--- =this.helper||this.element,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.helper||this.element, ---> a <--- =0;a<this._proportionallyResizeElements.length

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||this.element,a=0; ---> a <--- <this._proportionallyResizeElements.length;a++)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a<this._proportionallyResizeElements.length; ---> a <--- ++){var c=this._proportionallyResizeElements[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_proportionallyResizeElements.length;a++){var  ---> c <--- =this._proportionallyResizeElements[a];if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this._proportionallyResizeElements[ ---> a <--- ];if(!this.borderDif){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!this.borderDif){var  ---> d <--- =[c.css("borderTopWidth"),c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.borderDif){var d=[ ---> c <--- .css("borderTopWidth"),c.css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=[c.css("borderTopWidth"), ---> c <--- .css("borderRightWidth"),c.css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),c.css("borderRightWidth"), ---> c <--- .css("borderBottomWidth"),c.css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),c.css("borderBottomWidth"), ---> c <--- .css("borderLeftWidth")],f=[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,c.css("borderLeftWidth")], ---> f <--- =[c.css("paddingTop"),c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css("borderLeftWidth")],f=[ ---> c <--- .css("paddingTop"),c.css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=[c.css("paddingTop"), ---> c <--- .css("paddingRight"),c.css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),c.css("paddingRight"), ---> c <--- .css("paddingBottom"),c.css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),c.css("paddingBottom"), ---> c <--- .css("paddingLeft")];this.borderDif

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
("paddingLeft")];this.borderDif= ---> e <--- .map(d,function(g,h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.borderDif=e.map( ---> d <--- ,function(g,h){g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
d,function(g,h){ ---> g <--- =parseInt(g,10)||0;

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g,h){g=parseInt( ---> g <--- ,10)||0;h=parseInt(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
parseInt(g,10)||0; ---> h <--- =parseInt(f[h],10)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0;h=parseInt( ---> f <--- [h],10)||0;return

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
||0;h=parseInt(f[ ---> h <--- ],10)||0;returng+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
h],10)||0;return ---> g <--- +h;});}e.browser

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,10)||0;returng+ ---> h <--- ;});}e.browser.msie

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returng+h;});} ---> e <--- .browser.msie&&(e(b)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}e.browser.msie&&( ---> e <--- (b).is(":hidden")||e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e.browser.msie&&(e( ---> b <--- ).is(":hidden")||e(b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b).is(":hidden")|| ---> e <--- (b).parents(":hidden").length

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).is(":hidden")||e( ---> b <--- ).parents(":hidden").length)||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.parents(":hidden").length)|| ---> c <--- .css({height:b.height(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)||c.css({height: ---> b <--- .height()-this.borderDif[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
borderDif[2]||0,width: ---> b <--- .width()-this.borderDif[1

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},_renderProxy:function(){var  ---> b <--- =this.options;this.elementOffset=this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.helper=this.helper|| ---> e <--- ('<div style="overflow:hidden;"></div>');var a=e.browser

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.helper||e('<div style="overflow:hidden;"></div>');var  ---> a <--- =e.browser.msie&&e.browser

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
||e('<div style="overflow:hidden;"></div>');var a= ---> e <--- .browser.msie&&e.browser.version

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=e.browser.msie&& ---> e <--- .browser.version<7,c=a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&e.browser.version<7, ---> c <--- =a?1:0;a=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.browser.version<7,c= ---> a <--- ?1:0;a=a?2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=a?1:0; ---> a <--- =a?2:-1;this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a?1:0;a= ---> a <--- ?2:-1;this.helper.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:this.element.outerWidth()+ ---> a <--- ,height:this.element.outerHeight()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:this.element.outerHeight()+ ---> a <--- ,position:"absolute",left:this.elementOffset

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:this.elementOffset.left- ---> c <--- +"px",top:this.elementOffset.top

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:this.elementOffset.top- ---> c <--- +"px",zIndex:++b.zIndex}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
top-c+"px",zIndex:++ ---> b <--- .zIndex});this.helper.appendTo

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{width:this.originalSize.width+ ---> a <--- };},w:function(b,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{left:this.originalPosition.left+ ---> a <--- ,width:this.originalSize.width-a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:this.originalSize.width- ---> a <--- };},n:function(b,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{top:this.originalPosition.top+ ---> c <--- ,height:this.originalSize.height-c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:this.originalSize.height- ---> c <--- };},s:function(b,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{height:this.originalSize.height+ ---> c <--- };},se:function(b,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,a,c){return ---> e <--- .extend(this._change.s.apply

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_change.e.apply(this,[ ---> b <--- ,a,c]));},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e.apply(this,[b, ---> a <--- ,c]));},sw:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(this,[b,a, ---> c <--- ]));},sw:function(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,a,c){return ---> e <--- .extend(this._change.s.apply

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_change.w.apply(this,[ ---> b <--- ,a,c]));},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
w.apply(this,[b, ---> a <--- ,c]));},ne:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(this,[b,a, ---> c <--- ]));},ne:function(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,a,c){return ---> e <--- .extend(this._change.n.apply

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_change.e.apply(this,[ ---> b <--- ,a,c]));},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e.apply(this,[b, ---> a <--- ,c]));},nw:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(this,[b,a, ---> c <--- ]));},nw:function(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,a,c){return ---> e <--- .extend(this._change.n.apply

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_change.w.apply(this,[ ---> b <--- ,a,c]));}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
w.apply(this,[b, ---> a <--- ,c]));}},_propagate

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(this,[b,a, ---> c <--- ]));}},_propagate:function

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_propagate:function(b,a){ ---> e <--- .ui.plugin.call(this,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.plugin.call(this, ---> b <--- ,[a,this.ui()]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
plugin.call(this,b,[ ---> a <--- ,this.ui()]);b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,this.ui()]); ---> b <--- !="resize"&&this._trigger(b,a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b!="resize"&&this._trigger( ---> b <--- ,a,this.ui());

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!="resize"&&this._trigger(b, ---> a <--- ,this.ui());},

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.originalPosition};}}); ---> e <--- .extend(e.ui.resizable,{

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});e.extend( ---> e <--- .ui.resizable,{version:"1.8.5"}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
resizable,{version:"1.8.5"}); ---> e <--- .ui.plugin.add("resizable","alsoResize"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var b= ---> e <--- (this).data("resizable").options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable").options, ---> a <--- =function(c){e(c)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
options,a=function(c){ ---> e <--- (c).each(function(){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a=function(c){e( ---> c <--- ).each(function(){var d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> d <--- =e(this);d.data(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var d= ---> e <--- (this);d.data("resizable-alsoresize",

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{var d=e(this); ---> d <--- .data("resizable-alsoresize",{width:parseInt(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
data("resizable-alsoresize",{width:parseInt( ---> d <--- .width(),10),height:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
),10),height:parseInt( ---> d <--- .height(),10),left:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
),10),left:parseInt( ---> d <--- .css("left"),10),top

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
),10),top:parseInt( ---> d <--- .css("top"),10),position

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("top"),10),position: ---> d <--- .css("position")});})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;});};if(typeof ---> b <--- .alsoResize=="object"&&!b.alsoResize.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofb.alsoResize=="object"&&! ---> b <--- .alsoResize.parentNode){if(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.alsoResize.parentNode){if( ---> b <--- .alsoResize.length){b.alsoResize=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b.alsoResize.length){ ---> b <--- .alsoResize=b.alsoResize[0];

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
alsoResize.length){b.alsoResize= ---> b <--- .alsoResize[0];a(b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
alsoResize=b.alsoResize[0]; ---> a <--- (b.alsoResize);}else{e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.alsoResize[0];a( ---> b <--- .alsoResize);}else{e.each

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.alsoResize);}else{ ---> e <--- .each(b.alsoResize,function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{e.each( ---> b <--- .alsoResize,function(c){a(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.alsoResize,function(c){ ---> a <--- (c);});}}else

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
alsoResize,function(c){a( ---> c <--- );});}}else{a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);});}}else{ ---> a <--- (b.alsoResize);}},resize

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
});}}else{a( ---> b <--- .alsoResize);}},resize:function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(b,a){var  ---> c <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,a){var c= ---> e <--- (this).data("resizable");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"); ---> b <--- =c.options;var d=c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable");b= ---> c <--- .options;var d=c.originalSize,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);b=c.options;var  ---> d <--- =c.originalSize,f=c.originalPosition

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b=c.options;var d= ---> c <--- .originalSize,f=c.originalPosition,g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
options;var d=c.originalSize, ---> f <--- =c.originalPosition,g={height:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
var d=c.originalSize,f= ---> c <--- .originalPosition,g={height:c.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.originalSize,f=c.originalPosition, ---> g <--- ={height:c.size.height-

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.originalPosition,g={height: ---> c <--- .size.height-d.height||0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{height:c.size.height- ---> d <--- .height||0,width:c.size

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-d.height||0,width: ---> c <--- .size.width-d.width||0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:c.size.width- ---> d <--- .width||0,top:c.position

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-d.width||0,top: ---> c <--- .position.top-f.top||0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:c.position.top- ---> f <--- .top||0,left:c.position

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-f.top||0,left: ---> c <--- .position.left-f.left||0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:c.position.left- ---> f <--- .left||0},h=function(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
left-f.left||0}, ---> h <--- =function(i,j){e(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h=function(i,j){ ---> e <--- (i).each(function(){

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(i,j){e( ---> i <--- ).each(function(){var k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> k <--- =e(this),q=e(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var k= ---> e <--- (this),q=e(this)

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
{var k=e(this), ---> q <--- =e(this).data("resizable-alsoresize")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
k=e(this),q= ---> e <--- (this).data("resizable-alsoresize"),p

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable-alsoresize"), ---> p <--- ={},r=j&&j.

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
("resizable-alsoresize"),p={}, ---> r <--- =j&&j.length?j:k

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
),p={},r= ---> j <--- &&j.length?j:k.parents

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
p={},r=j&& ---> j <--- .length?j:k.parents(a

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
,r=j&&j.length? ---> j <--- :k.parents(a.originalElement[0

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
=j&&j.length?j: ---> k <--- .parents(a.originalElement[0])

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.length?j:k.parents( ---> a <--- .originalElement[0]).length?[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"width","height","top","left"]; ---> e <--- .each(r,function(n,o

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
"top","left"];e.each( ---> r <--- ,function(n,o){if(

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
(n,o){if(( ---> n <--- =(q[o]||0)+

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
o){if((n=( ---> q <--- [o]||0)+(g[

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
{if((n=(q[ ---> o <--- ]||0)+(g[o]

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
q[o]||0)+( ---> g <--- [o]||0))&&n>=

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
o]||0)+(g[ ---> o <--- ]||0))&&n>=0)

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
g[o]||0))&& ---> n <--- >=0){p[o]=n

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
0))&&n>=0){ ---> p <--- [o]=n||null;}}

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&n>=0){p[ ---> o <--- ]=n||null;}});

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0){p[o]= ---> n <--- ||null;}});if(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
||null;}});if( ---> e <--- .browser.opera&&/relative/.test(k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.browser.opera&&/relative/.test( ---> k <--- .css("position"))){c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
k.css("position"))){ ---> c <--- ._revertToRelativePosition=true;k.css({

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
)){c._revertToRelativePosition=true; ---> k <--- .css({position:"absolute",top:

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"auto",left:"auto"});} ---> k <--- .css(p);});}

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
"auto"});}k.css( ---> p <--- );});};typeofb.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
p);});};typeof ---> b <--- .alsoResize=="object"&&!b.alsoResize.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;typeofb.alsoResize=="object"&&! ---> b <--- .alsoResize.nodeType?e.each(b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"object"&&!b.alsoResize.nodeType? ---> e <--- .each(b.alsoResize,function(i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.alsoResize.nodeType?e.each( ---> b <--- .alsoResize,function(i,j){

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
alsoResize,function(i,j){ ---> h <--- (i,j);}):h

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(i,j){h( ---> i <--- ,j);}):h(b

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
i,j){h(i, ---> j <--- );}):h(b.alsoResize

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(i,j);}): ---> h <--- (b.alsoResize);},stop:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,j);}):h( ---> b <--- .alsoResize);},stop:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},stop:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(){var b= ---> e <--- (this).data("resizable"),a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"), ---> a <--- =b.options,c=function(d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable"),a= ---> b <--- .options,c=function(d){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"resizable"),a=b.options, ---> c <--- =function(d){e(d)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
options,c=function(d){ ---> e <--- (d).each(function(){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c=function(d){e( ---> d <--- ).each(function(){var f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> f <--- =e(this);f.css(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var f= ---> e <--- (this);f.css({position

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{var f=e(this); ---> f <--- .css({position:f.data(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);f.css({position: ---> f <--- .data("resizable-alsoresize").position});

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);});};if( ---> b <--- ._revertToRelativePosition){b._revertToRelativePosition=false;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
};if(b._revertToRelativePosition){ ---> b <--- ._revertToRelativePosition=false;typeofa.alsoResize==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){b._revertToRelativePosition=false;typeof ---> a <--- .alsoResize=="object"&&!a.alsoResize.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;typeofa.alsoResize=="object"&&! ---> a <--- .alsoResize.nodeType?e.each(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"object"&&!a.alsoResize.nodeType? ---> e <--- .each(a.alsoResize,function(d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.alsoResize.nodeType?e.each( ---> a <--- .alsoResize,function(d){c(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.alsoResize,function(d){ ---> c <--- (d);}):c(a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
alsoResize,function(d){c( ---> d <--- );}):c(a.alsoResize

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{c(d);}): ---> c <--- (a.alsoResize);}e(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d);}):c( ---> a <--- .alsoResize);}e(this).

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:c(a.alsoResize);} ---> e <--- (this).removeData("resizable-alsoresize");}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
removeData("resizable-alsoresize");}}); ---> e <--- .ui.plugin.add("resizable","animate"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{stop:function(b){var  ---> a <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(b){var a= ---> e <--- (this).data("resizable"),c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"), ---> c <--- =a.options,d=a._proportionallyResizeElements

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable"),c= ---> a <--- .options,d=a._proportionallyResizeElements,f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"resizable"),c=a.options, ---> d <--- =a._proportionallyResizeElements,f=d.length

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=a.options,d= ---> a <--- ._proportionallyResizeElements,f=d.length&&/textarea/i

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,d=a._proportionallyResizeElements, ---> f <--- =d.length&&/textarea/i.test(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=a._proportionallyResizeElements,f= ---> d <--- .length&&/textarea/i.test(d[0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.length&&/textarea/i.test( ---> d <--- [0].nodeName),g=f

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(d[0].nodeName), ---> g <--- =f&&e.ui.hasScroll(d

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].nodeName),g= ---> f <--- &&e.ui.hasScroll(d[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
].nodeName),g=f&& ---> e <--- .ui.hasScroll(d[0],

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=f&&e.ui.hasScroll( ---> d <--- [0],"left")?0:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0],"left")?0: ---> a <--- .sizeDiff.height;f={width:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?0:a.sizeDiff.height; ---> f <--- ={width:a.size.width-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
sizeDiff.height;f={width: ---> a <--- .size.width-(f?0:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
width:a.size.width-( ---> f <--- ?0:a.sizeDiff.width),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
size.width-(f?0: ---> a <--- .sizeDiff.width),height:a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.sizeDiff.width),height: ---> a <--- .size.height-g};g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:a.size.height- ---> g <--- };g=parseInt(a.element.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a.size.height-g}; ---> g <--- =parseInt(a.element.css("left"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
height-g};g=parseInt( ---> a <--- .element.css("left"),10)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
css("left"),10)+( ---> a <--- .position.left-a.originalPosition.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(a.position.left- ---> a <--- .originalPosition.left)||null;var h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.originalPosition.left)||null;var  ---> h <--- =parseInt(a.element.css("top"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)||null;var h=parseInt( ---> a <--- .element.css("top"),10)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
css("top"),10)+( ---> a <--- .position.top-a.originalPosition.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(a.position.top- ---> a <--- .originalPosition.top)||null;a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.originalPosition.top)||null; ---> a <--- .element.animate(e.extend(f

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
||null;a.element.animate( ---> e <--- .extend(f,h&&g?{

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.animate(e.extend( ---> f <--- ,h&&g?{top:h,

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(e.extend(f, ---> h <--- &&g?{top:h,left:

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(e.extend(f,h&& ---> g <--- ?{top:h,left:g}

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
f,h&&g?{top: ---> h <--- ,left:g}:{}),

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g?{top:h,left: ---> g <--- }:{}),{duration:c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}:{}),{duration: ---> c <--- .animateDuration,easing:c.animateEasing,step

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{duration:c.animateDuration,easing: ---> c <--- .animateEasing,step:function(){var 

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
animateEasing,step:function(){var  ---> i <--- ={width:parseInt(a.element.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{var i={width:parseInt( ---> a <--- .element.css("width"),10)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
),10),height:parseInt( ---> a <--- .element.css("height"),10)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
),10),top:parseInt( ---> a <--- .element.css("top"),10)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
),10),left:parseInt( ---> a <--- .element.css("left"),10)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
css("left"),10)}; ---> d <--- &&d.length&&e(d[0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"left"),10)};d&& ---> d <--- .length&&e(d[0])

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)};d&&d.length&& ---> e <--- (d[0]).css({

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;d&&d.length&&e( ---> d <--- [0]).css({width:

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
0]).css({width: ---> i <--- .width,height:i.height})

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{width:i.width,height: ---> i <--- .height});a._updateCache(i

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:i.height}); ---> a <--- ._updateCache(i);a._propagate(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.height});a._updateCache( ---> i <--- );a._propagate("resize",b)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);a._updateCache(i); ---> a <--- ._propagate("resize",b);}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
i);a._propagate("resize", ---> b <--- );}});}});

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});}}); ---> e <--- .ui.plugin.add("resizable","containment"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var b= ---> e <--- (this).data("resizable"),a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"), ---> a <--- =b.element,c=b.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable"),a= ---> b <--- .element,c=b.options.containment

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"resizable"),a=b.element, ---> c <--- =b.options.containment;if(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a=b.element,c= ---> b <--- .options.containment;if(a=c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.containment;if( ---> a <--- =c instanceof e?c.get(0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.containment;if(a= ---> c <---  instanceof e?c.get(0):

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment;if(a=c instanceof  ---> e <--- ?c.get(0):/parent/.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(a=c instanceof e? ---> c <--- .get(0):/parent/.test(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
get(0):/parent/.test( ---> c <--- )?a.parent().get(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
):/parent/.test(c)? ---> a <--- .parent().get(0):

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
parent().get(0): ---> c <--- ){b.containerElement=e(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.get(0):c){ ---> b <--- .containerElement=e(a);if(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
):c){b.containerElement= ---> e <--- (a);if(/document/.test(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c){b.containerElement=e( ---> a <--- );if(/document/.test(c)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a);if(/document/.test( ---> c <--- )||c==document){b.containerOffset

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(/document/.test(c)|| ---> c <--- ==document){b.containerOffset={left

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)||c==document){ ---> b <--- .containerOffset={left:0,top:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
left:0,top:0}; ---> b <--- .containerPosition={left:0,top:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
left:0,top:0}; ---> b <--- .parentData={element:e(document)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
};b.parentData={element: ---> e <--- (document),left:0,top:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,top:0,width: ---> e <--- (document).width(),height:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
document).width(),height: ---> e <--- (document).height()||document.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
parentNode.scrollHeight};}else{var  ---> d <--- =e(a),f=[]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollHeight};}else{var d= ---> e <--- (a),f=[];e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}else{var d=e( ---> a <--- ),f=[];e([

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{var d=e(a), ---> f <--- =[];e(["Top","Right"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a),f=[]; ---> e <--- (["Top","Right","Left","Bottom"]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(i,j){ ---> f <--- [i]=m(d.css(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(i,j){f[ ---> i <--- ]=m(d.css("padding"+

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
,j){f[i]= ---> m <--- (d.css("padding"+j))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){f[i]=m( ---> d <--- .css("padding"+j));}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=m(d.css("padding"+ ---> j <--- ));});b.containerOffset=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"padding"+j));}); ---> b <--- .containerOffset=d.offset();b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);});b.containerOffset= ---> d <--- .offset();b.containerPosition=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerOffset=d.offset(); ---> b <--- .containerPosition=d.position();b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset();b.containerPosition= ---> d <--- .position();b.containerSize={

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerPosition=d.position(); ---> b <--- .containerSize={height:d.innerHeight(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);b.containerSize={height: ---> d <--- .innerHeight()-f[3],

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{height:d.innerHeight()- ---> f <--- [3],width:d.innerWidth(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)-f[3],width: ---> d <--- .innerWidth()-f[1]}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:d.innerWidth()- ---> f <--- [1]};c=b.containerOffset

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
()-f[1]}; ---> c <--- =b.containerOffset;var g=b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-f[1]};c= ---> b <--- .containerOffset;var g=b.containerSize.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
};c=b.containerOffset;var  ---> g <--- =b.containerSize.height,h=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c=b.containerOffset;var g= ---> b <--- .containerSize.height,h=b.containerSize

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
var g=b.containerSize.height, ---> h <--- =b.containerSize.width;h=e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.containerSize.height,h= ---> b <--- .containerSize.width;h=e.ui

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=b.containerSize.width; ---> h <--- =e.ui.hasScroll(a,"left"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.containerSize.width;h= ---> e <--- .ui.hasScroll(a,"left")?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;h=e.ui.hasScroll( ---> a <--- ,"left")?a.scrollWidth:h;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.hasScroll(a,"left")? ---> a <--- .scrollWidth:h;g=e.ui

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"left")?a.scrollWidth: ---> h <--- ;g=e.ui.hasScroll(a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"left")?a.scrollWidth:h; ---> g <--- =e.ui.hasScroll(a)?

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
?a.scrollWidth:h;g= ---> e <--- .ui.hasScroll(a)?a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=e.ui.hasScroll( ---> a <--- )?a.scrollHeight:g;b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e.ui.hasScroll(a)? ---> a <--- .scrollHeight:g;b.parentData={

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
hasScroll(a)?a.scrollHeight: ---> g <--- ;b.parentData={element:a,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a)?a.scrollHeight:g; ---> b <--- .parentData={element:a,left:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g;b.parentData={element: ---> a <--- ,left:c.left,top:c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
parentData={element:a,left: ---> c <--- .left,top:c.top,width

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:c.left,top: ---> c <--- .top,width:h,height:g

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:c.top,width: ---> h <--- ,height:g};}}},

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.top,width:h,height: ---> g <--- };}}},resize:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,resize:function(b){var  ---> a <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(b){var a= ---> e <--- (this).data("resizable"),c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"), ---> c <--- =a.options,d=a.containerOffset

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable"),c= ---> a <--- .options,d=a.containerOffset,f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"resizable"),c=a.options, ---> d <--- =a.containerOffset,f=a.position

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=a.options,d= ---> a <--- .containerOffset,f=a.position;b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,d=a.containerOffset, ---> f <--- =a.position;b=a._aspectRatio

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=a.containerOffset,f= ---> a <--- .position;b=a._aspectRatio||b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerOffset,f=a.position; ---> b <--- =a._aspectRatio||b.shiftKey;var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=a.position;b= ---> a <--- ._aspectRatio||b.shiftKey;var g=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.position;b=a._aspectRatio|| ---> b <--- .shiftKey;var g={top:0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a._aspectRatio||b.shiftKey;var  ---> g <--- ={top:0,left:0}

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
top:0,left:0}, ---> h <--- =a.containerElement;if(h[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0,left:0},h= ---> a <--- .containerElement;if(h[0]!=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=a.containerElement;if( ---> h <--- [0]!=document&&/static/.test(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
0]!=document&&/static/.test( ---> h <--- .css("position"))){g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
h.css("position"))){ ---> g <--- =d;}if(f.left<

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
css("position"))){g= ---> d <--- ;}if(f.left<(a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){g=d;}if( ---> f <--- .left<(a._helper?d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(f.left<( ---> a <--- ._helper?d.left:0))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f.left<(a._helper? ---> d <--- .left:0)){a.size

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?d.left:0)){ ---> a <--- .size.width+=a._helper?a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)){a.size.width+= ---> a <--- ._helper?a.position.left-d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.width+=a._helper? ---> a <--- .position.left-d.left:a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._helper?a.position.left- ---> d <--- .left:a.position.left-g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.left-d.left: ---> a <--- .position.left-g.left;if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.left:a.position.left- ---> g <--- .left;if(b){a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.left-g.left;if( ---> b <--- ){a.size.height=a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g.left;if(b){ ---> a <--- .size.height=a.size.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a.size.height= ---> a <--- .size.width/c.aspectRatio;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.height=a.size.width/ ---> c <--- .aspectRatio;}a.position.left=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
size.width/c.aspectRatio;} ---> a <--- .position.left=c.helper?d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
aspectRatio;}a.position.left= ---> c <--- .helper?d.left:0;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.left=c.helper? ---> d <--- .left:0;}if(f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
d.left:0;}if( ---> f <--- .top<(a._helper?d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(f.top<( ---> a <--- ._helper?d.top:0))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f.top<(a._helper? ---> d <--- .top:0)){a.size

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?d.top:0)){ ---> a <--- .size.height+=a._helper?a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)){a.size.height+= ---> a <--- ._helper?a.position.top-d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.height+=a._helper? ---> a <--- .position.top-d.top:a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._helper?a.position.top- ---> d <--- .top:a.position.top;if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.top-d.top: ---> a <--- .position.top;if(b){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.position.top;if( ---> b <--- ){a.size.width=a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
position.top;if(b){ ---> a <--- .size.width=a.size.height

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a.size.width= ---> a <--- .size.height*c.aspectRatio;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=a.size.height* ---> c <--- .aspectRatio;}a.position.top=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
size.height*c.aspectRatio;} ---> a <--- .position.top=a._helper?d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
aspectRatio;}a.position.top= ---> a <--- ._helper?d.top:0;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.top=a._helper? ---> d <--- .top:0;}a.offset.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_helper?d.top:0;} ---> a <--- .offset.left=a.parentData.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0;}a.offset.left= ---> a <--- .parentData.left+a.position.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left=a.parentData.left+ ---> a <--- .position.left;a.offset.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left+a.position.left; ---> a <--- .offset.top=a.parentData.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left;a.offset.top= ---> a <--- .parentData.top+a.position.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top=a.parentData.top+ ---> a <--- .position.top;c=Math.abs

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.top+a.position.top; ---> c <--- =Math.abs((a._helper?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
top;c=Math.abs(( ---> a <--- ._helper?a.offset.left-g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs((a._helper? ---> a <--- .offset.left-g.left:a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
._helper?a.offset.left- ---> g <--- .left:a.offset.left-g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.left-g.left: ---> a <--- .offset.left-g.left)+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.left:a.offset.left- ---> g <--- .left)+a.sizeDiff.width)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.left-g.left)+ ---> a <--- .sizeDiff.width);d=Math.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)+a.sizeDiff.width); ---> d <--- =Math.abs((a._helper?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);d=Math.abs(( ---> a <--- ._helper?a.offset.top-g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs((a._helper? ---> a <--- .offset.top-g.top:a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
._helper?a.offset.top- ---> g <--- .top:a.offset.top-d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.top-g.top: ---> a <--- .offset.top-d.top)+

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.top:a.offset.top- ---> d <--- .top)+a.sizeDiff.height)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.top-d.top)+ ---> a <--- .sizeDiff.height);f=a.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
)+a.sizeDiff.height); ---> f <--- =a.containerElement.get(0)==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.sizeDiff.height);f= ---> a <--- .containerElement.get(0)==a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.containerElement.get(0)== ---> a <--- .element.parent().get(0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
parent().get(0); ---> g <--- =/relative|absolute/.test(a.containerElement.css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0);g=/relative|absolute/.test( ---> a <--- .containerElement.css("position"));if

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("position"));if( ---> f <--- &&g){c-=a.parentData.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("position"));if(f&& ---> g <--- ){c-=a.parentData.left;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(f&&g){ ---> c <--- -=a.parentData.left;}if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(f&&g){c-= ---> a <--- .parentData.left;}if(c+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.parentData.left;}if( ---> c <--- +a.size.width>=a.parentData

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
parentData.left;}if(c+ ---> a <--- .size.width>=a.parentData.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c+a.size.width>= ---> a <--- .parentData.width){a.size.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width>=a.parentData.width){ ---> a <--- .size.width=a.parentData.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width){a.size.width= ---> a <--- .parentData.width-c;if(b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=a.parentData.width- ---> c <--- ;if(b){a.size.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.parentData.width-c;if( ---> b <--- ){a.size.height=a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width-c;if(b){ ---> a <--- .size.height=a.size.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a.size.height= ---> a <--- .size.width/a.aspectRatio;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.height=a.size.width/ ---> a <--- .aspectRatio;}}if(d+a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
/a.aspectRatio;}}if( ---> d <--- +a.size.height>=a.parentData

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.aspectRatio;}}if(d+ ---> a <--- .size.height>=a.parentData.height

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d+a.size.height>= ---> a <--- .parentData.height){a.size.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
height>=a.parentData.height){ ---> a <--- .size.height=a.parentData.height

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
height){a.size.height= ---> a <--- .parentData.height-d;if(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.height=a.parentData.height- ---> d <--- ;if(b){a.size.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.parentData.height-d;if( ---> b <--- ){a.size.width=a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
height-d;if(b){ ---> a <--- .size.width=a.size.height

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a.size.width= ---> a <--- .size.height*a.aspectRatio;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=a.size.height* ---> a <--- .aspectRatio;}}},stop:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},stop:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(){var b= ---> e <--- (this).data("resizable"),a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"), ---> a <--- =b.options,c=b.containerOffset

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable"),a= ---> b <--- .options,c=b.containerOffset,d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"resizable"),a=b.options, ---> c <--- =b.containerOffset,d=b.containerPosition

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a=b.options,c= ---> b <--- .containerOffset,d=b.containerPosition,f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,c=b.containerOffset, ---> d <--- =b.containerPosition,f=b.containerElement

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=b.containerOffset,d= ---> b <--- .containerPosition,f=b.containerElement,g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerOffset,d=b.containerPosition, ---> f <--- =b.containerElement,g=e(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=b.containerPosition,f= ---> b <--- .containerElement,g=e(b.helper

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerPosition,f=b.containerElement, ---> g <--- =e(b.helper),h=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=b.containerElement,g= ---> e <--- (b.helper),h=g.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.containerElement,g=e( ---> b <--- .helper),h=g.offset(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
g=e(b.helper), ---> h <--- =g.offset(),i=g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e(b.helper),h= ---> g <--- .offset(),i=g.outerWidth

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=g.offset(), ---> i <--- =g.outerWidth()-b.sizeDiff

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=g.offset(),i= ---> g <--- .outerWidth()-b.sizeDiff.width

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,i=g.outerWidth()- ---> b <--- .sizeDiff.width;g=g.outerHeight

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
()-b.sizeDiff.width; ---> g <--- =g.outerHeight()-b.sizeDiff

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
-b.sizeDiff.width;g= ---> g <--- .outerHeight()-b.sizeDiff.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=g.outerHeight()- ---> b <--- .sizeDiff.height;b._helper&&!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
()-b.sizeDiff.height; ---> b <--- ._helper&&!a.animate&&/relative/.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
sizeDiff.height;b._helper&&! ---> a <--- .animate&&/relative/.test(f.css

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
!a.animate&&/relative/.test( ---> f <--- .css("position"))&&e(this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.css("position"))&& ---> e <--- (this).css({left:h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).css({left: ---> h <--- .left-d.left-c.left

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
css({left:h.left- ---> d <--- .left-c.left,width:i

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:h.left-d.left- ---> c <--- .left,width:i,height:g

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.left-c.left,width: ---> i <--- ,height:g});b._helper

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.left,width:i,height: ---> g <--- });b._helper&&!a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:i,height:g}); ---> b <--- ._helper&&!a.animate&&/static/.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g});b._helper&&! ---> a <--- .animate&&/static/.test(f.css

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
!a.animate&&/static/.test( ---> f <--- .css("position"))&&e(this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.css("position"))&& ---> e <--- (this).css({left:h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).css({left: ---> h <--- .left-d.left-c.left

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
css({left:h.left- ---> d <--- .left-c.left,width:i

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:h.left-d.left- ---> c <--- .left,width:i,height:g

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.left-c.left,width: ---> i <--- ,height:g});}})

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.left,width:i,height: ---> g <--- });}});e.ui

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:g});}}); ---> e <--- .ui.plugin.add("resizable","ghost"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,{start:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(){var b= ---> e <--- (this).data("resizable"),a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"), ---> a <--- =b.options,c=b.size

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable"),a= ---> b <--- .options,c=b.size;b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"resizable"),a=b.options, ---> c <--- =b.size;b.ghost=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a=b.options,c= ---> b <--- .size;b.ghost=b.originalElement

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,c=b.size; ---> b <--- .ghost=b.originalElement.clone()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.size;b.ghost= ---> b <--- .originalElement.clone();b.ghost

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.originalElement.clone(); ---> b <--- .ghost.css({opacity:0.25,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:"block",position:"relative",height: ---> c <--- .height,width:c.width,margin

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:c.height,width: ---> c <--- .width,margin:0,left:0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("ui-resizable-ghost").addClass(typeof ---> a <--- .ghost=="string"?a.ghost:""

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass(typeofa.ghost=="string"? ---> a <--- .ghost:"");b.ghost.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"string"?a.ghost:""); ---> b <--- .ghost.appendTo(b.helper);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"");b.ghost.appendTo( ---> b <--- .helper);},resize:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},resize:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
resize:function(){var b= ---> e <--- (this).data("resizable");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"); ---> b <--- .ghost&&b.ghost.css({

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
data("resizable");b.ghost&& ---> b <--- .ghost.css({position:"relative",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
css({position:"relative",height: ---> b <--- .size.height,width:b.size

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.size.height,width: ---> b <--- .size.width});},stop

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},stop:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(){var b= ---> e <--- (this).data("resizable");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"); ---> b <--- .ghost&&b.helper&&b.helper

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
data("resizable");b.ghost&& ---> b <--- .helper&&b.helper.get(0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.ghost&&b.helper&& ---> b <--- .helper.get(0).removeChild(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
helper.get(0).removeChild( ---> b <--- .ghost.get(0));}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(0));}}); ---> e <--- .ui.plugin.add("resizable","grid"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,{resize:function(){var  ---> b <--- =e(this).data("resizable")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
resize:function(){var b= ---> e <--- (this).data("resizable"),a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("resizable"), ---> a <--- =b.options,c=b.size

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("resizable"),a= ---> b <--- .options,c=b.size,d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"resizable"),a=b.options, ---> c <--- =b.size,d=b.originalSize

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a=b.options,c= ---> b <--- .size,d=b.originalSize,f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,c=b.size, ---> d <--- =b.originalSize,f=b.originalPosition

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=b.size,d= ---> b <--- .originalSize,f=b.originalPosition,g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.size,d=b.originalSize, ---> f <--- =b.originalPosition,g=b.axis

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=b.originalSize,f= ---> b <--- .originalPosition,g=b.axis;a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.originalSize,f=b.originalPosition, ---> g <--- =b.axis;a.grid=typeof

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=b.originalPosition,g= ---> b <--- .axis;a.grid=typeofa.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.originalPosition,g=b.axis; ---> a <--- .grid=typeofa.grid=="number"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.axis;a.grid=typeof ---> a <--- .grid=="number"?[a.grid,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=typeofa.grid=="number"?[ ---> a <--- .grid,a.grid]:a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
grid=="number"?[a.grid, ---> a <--- .grid]:a.grid;var h

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.grid,a.grid]: ---> a <--- .grid;var h=Math.round(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.grid]:a.grid;var  ---> h <--- =Math.round((c.width-

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;var h=Math.round(( ---> c <--- .width-d.width)/(a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.round((c.width- ---> d <--- .width)/(a.grid[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width-d.width)/( ---> a <--- .grid[0]||1))*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]||1))*( ---> a <--- .grid[0]||1);a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.grid[0]||1); ---> a <--- =Math.round((c.height-

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);a=Math.round(( ---> c <--- .height-d.height)/(a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.round((c.height- ---> d <--- .height)/(a.grid[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.height-d.height)/( ---> a <--- .grid[1]||1))*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[1]||1))*( ---> a <--- .grid[1]||1);if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
1);if(/^(se|s|e)$/.test( ---> g <--- )){b.size.width=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(/^(se|s|e)$/.test(g)){ ---> b <--- .size.width=d.width+h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)){b.size.width= ---> d <--- .width+h;b.size.height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.width=d.width+ ---> h <--- ;b.size.height=d.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=d.width+h; ---> b <--- .size.height=d.height+a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+h;b.size.height= ---> d <--- .height+a;}else{if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.height=d.height+ ---> a <--- ;}else{if(/^(ne)$/.test(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(/^(ne)$/.test( ---> g <--- )){b.size.width=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(/^(ne)$/.test(g)){ ---> b <--- .size.width=d.width+h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)){b.size.width= ---> d <--- .width+h;b.size.height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.width=d.width+ ---> h <--- ;b.size.height=d.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=d.width+h; ---> b <--- .size.height=d.height+a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+h;b.size.height= ---> d <--- .height+a;b.position.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.height=d.height+ ---> a <--- ;b.position.top=f.top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.height=d.height+a; ---> b <--- .position.top=f.top-a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
+a;b.position.top= ---> f <--- .top-a;}else{if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.top=f.top- ---> a <--- ;}else{if(/^(sw)$/.test(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(/^(sw)$/.test( ---> g <--- )){b.size.width=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(/^(sw)$/.test(g)){ ---> b <--- .size.width=d.width+h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)){b.size.width= ---> d <--- .width+h;b.size.height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.width=d.width+ ---> h <--- ;b.size.height=d.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=d.width+h; ---> b <--- .size.height=d.height+a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+h;b.size.height= ---> d <--- .height+a;}else{b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.height=d.height+ ---> a <--- ;}else{b.size.width=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d.height+a;}else{ ---> b <--- .size.width=d.width+h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{b.size.width= ---> d <--- .width+h;b.size.height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.width=d.width+ ---> h <--- ;b.size.height=d.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=d.width+h; ---> b <--- .size.height=d.height+a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+h;b.size.height= ---> d <--- .height+a;b.position.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size.height=d.height+ ---> a <--- ;b.position.top=f.top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.height=d.height+a; ---> b <--- .position.top=f.top-a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
+a;b.position.top= ---> f <--- .top-a;}b.position.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.top=f.top- ---> a <--- ;}b.position.left=f.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
top=f.top-a;} ---> b <--- .position.left=f.left-h

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
a;}b.position.left= ---> f <--- .left-h;}}}})

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.position.left=f.left- ---> h <--- ;}}}});var m=

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
h;}}}});var  ---> m <--- =function(b){returnparseInt(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(b){returnparseInt( ---> b <--- ,10)||0;},l=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
b,10)||0;}, ---> l <--- =function(b){return!isNaN(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b){return!isNaN(parseInt( ---> b <--- ,10));};})(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(e){ ---> e <--- .widget("ui.selectable",e.ui.mouse

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e){e.widget("ui.selectable", ---> e <--- .ui.mouse,{options:{appendTo

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
},_create:function(){var  ---> c <--- =this;this.element.addClass("ui-selectable"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);this.dragged=false;var  ---> f <--- ;this.refresh=function(){f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.refresh=function(){ ---> f <--- =e(c.options.filter,c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.refresh=function(){f= ---> e <--- (c.options.filter,c.element

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(){f=e( ---> c <--- .options.filter,c.element[0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=e(c.options.filter, ---> c <--- .element[0]);f.each

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,c.element[0]); ---> f <--- .each(function(){var d=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f.each(function(){var  ---> d <--- =e(this),b=d.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var d= ---> e <--- (this),b=d.offset(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{var d=e(this), ---> b <--- =d.offset();e.data

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d=e(this),b= ---> d <--- .offset();e.data(this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,b=d.offset(); ---> e <--- .data(this,"selectable-item",{element:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"selectable-item",{element:this,$element: ---> d <--- ,left:b.left,top:b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:this,$element:d,left: ---> b <--- .left,top:b.top,right

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:b.left,top: ---> b <--- .top,right:b.left+d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:b.top,right: ---> b <--- .left+d.outerWidth(),bottom

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.top,right:b.left+ ---> d <--- .outerWidth(),bottom:b.top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+d.outerWidth(),bottom: ---> b <--- .top+d.outerHeight(),startselected

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(),bottom:b.top+ ---> d <--- .outerHeight(),startselected:false,selected

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(),startselected:false,selected: ---> d <--- .hasClass("ui-selected"),selecting:d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.hasClass("ui-selected"),selecting: ---> d <--- .hasClass("ui-selecting"),unselecting:d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.hasClass("ui-selecting"),unselecting: ---> d <--- .hasClass("ui-unselecting")});})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.refresh();this.selectees= ---> f <--- .addClass("ui-selectee");this._mouseInit(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseInit();this.helper= ---> e <--- ("<div class='ui-selectable-helper'></div>");},destroy:function(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseStart:function(c){var  ---> f <--- =this;this.opos=[c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f=this;this.opos=[ ---> c <--- .pageX,c.pageY];if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.opos=[c.pageX, ---> c <--- .pageY];if(!this.options

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!this.options.disabled){var  ---> d <--- =this.options;this.selectees=e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.options;this.selectees= ---> e <--- (d.filter,this.element[0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;this.selectees=e( ---> d <--- .filter,this.element[0])

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]);this._trigger("start", ---> c <--- );e(d.appendTo).append

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._trigger("start",c); ---> e <--- (d.appendTo).append(this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("start",c);e( ---> d <--- .appendTo).append(this.helper)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.helper.css({left: ---> c <--- .clientX,top:c.clientY,width

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{left:c.clientX,top: ---> c <--- .clientY,width:0,height:0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,height:0}); ---> d <--- .autoRefresh&&this.refresh();this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> b <--- =e.data(this,"selectable-item");

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var b= ---> e <--- .data(this,"selectable-item");b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e.data(this,"selectable-item"); ---> b <--- .startselected=true;if(!c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.startselected=true;if(! ---> c <--- .metaKey){b.$element.removeClass(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!c.metaKey){ ---> b <--- .$element.removeClass("ui-selected");b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.$element.removeClass("ui-selected"); ---> b <--- .selected=false;b.$element.addClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-selected");b.selected=false; ---> b <--- .$element.addClass("ui-unselecting");b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.$element.addClass("ui-unselecting"); ---> b <--- .unselecting=true;f._trigger("unselecting"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-unselecting");b.unselecting=true; ---> f <--- ._trigger("unselecting",c,{unselecting:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;f._trigger("unselecting", ---> c <--- ,{unselecting:b.element});

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("unselecting",c,{unselecting: ---> b <--- .element});}});e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.element});}}); ---> e <--- (c.target).parents().

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
});}});e( ---> c <--- .target).parents().andSelf(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> b <--- =e.data(this,"selectable-item");

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var b= ---> e <--- .data(this,"selectable-item");if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
data(this,"selectable-item");if( ---> b <--- ){var g=!c.metaKey||

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"selectable-item");if(b){var  ---> g <--- =!c.metaKey||!b.$element

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b){var g=! ---> c <--- .metaKey||!b.$element.hasClass(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var g=!c.metaKey||! ---> b <--- .$element.hasClass("ui-selected");b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.$element.hasClass("ui-selected"); ---> b <--- .$element.removeClass(g?"ui-unselecting":"ui-selected"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-selected");b.$element.removeClass( ---> g <--- ?"ui-unselecting":"ui-selected").addClass(g?

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g?"ui-unselecting":"ui-selected").addClass( ---> g <--- ?"ui-selecting":"ui-unselecting");b.unselecting=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass(g?"ui-selecting":"ui-unselecting"); ---> b <--- .unselecting=!g;b.selecting=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:"ui-unselecting");b.unselecting=! ---> g <--- ;b.selecting=g;(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);b.unselecting=!g; ---> b <--- .selecting=g;(b.selected=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
unselecting=!g;b.selecting= ---> g <--- ;(b.selected=g)?f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
g;b.selecting=g;( ---> b <--- .selected=g)?f._trigger(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
selecting=g;(b.selected= ---> g <--- )?f._trigger("selecting",c,

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;(b.selected=g)? ---> f <--- ._trigger("selecting",c,{selecting:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
g)?f._trigger("selecting", ---> c <--- ,{selecting:b.element}):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("selecting",c,{selecting: ---> b <--- .element}):f._trigger("unselecting"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{selecting:b.element}): ---> f <--- ._trigger("unselecting",c,{unselecting:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}):f._trigger("unselecting", ---> c <--- ,{unselecting:b.element});

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("unselecting",c,{unselecting: ---> b <--- .element});returnfalse;}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseDrag:function(c){var  ---> f <--- =this;this.dragged=true;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!this.options.disabled){var  ---> d <--- =this.options,b=this.opos

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var d=this.options, ---> b <--- =this.opos[0],g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b=this.opos[0], ---> g <--- =this.opos[1],h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
g=this.opos[1], ---> h <--- =c.pageX,i=c.pageY

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.opos[1],h= ---> c <--- .pageX,i=c.pageY;if

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
1],h=c.pageX, ---> i <--- =c.pageY;if(b>h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=c.pageX,i= ---> c <--- .pageY;if(b>h){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,i=c.pageY;if( ---> b <--- >h){var j=h;h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.pageY;if(b> ---> h <--- ){var j=h;h=b

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(b>h){var  ---> j <--- =h;h=b;b=j

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(b>h){var j= ---> h <--- ;h=b;b=j;}

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
>h){var j=h; ---> h <--- =b;b=j;}if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var j=h;h= ---> b <--- ;b=j;}if(g>

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var j=h;h=b; ---> b <--- =j;}if(g>i)

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=h;h=b;b= ---> j <--- ;}if(g>i){j

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b;b=j;}if( ---> g <--- >i){j=i;i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
b=j;}if(g> ---> i <--- ){j=i;i=g;

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(g>i){ ---> j <--- =i;i=g;g=j

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
if(g>i){j= ---> i <--- ;i=g;g=j;}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
g>i){j=i; ---> i <--- =g;g=j;}this.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
i){j=i;i= ---> g <--- ;g=j;}this.helper.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{j=i;i=g; ---> g <--- =j;}this.helper.css(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=i;i=g;g= ---> j <--- ;}this.helper.css({left

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.helper.css({left: ---> b <--- ,top:g,width:h-b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
css({left:b,top: ---> g <--- ,width:h-b,height:i

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:b,top:g,width: ---> h <--- -b,height:i-g})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:g,width:h- ---> b <--- ,height:i-g});this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:h-b,height: ---> i <--- -g});this.selectees.each

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:h-b,height:i- ---> g <--- });this.selectees.each(function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
selectees.each(function(){var  ---> a <--- =e.data(this,"selectable-item");

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var a= ---> e <--- .data(this,"selectable-item");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,"selectable-item");if(!(! ---> a <--- ||a.element==f.element[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(!(!a|| ---> a <--- .element==f.element[0])

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
!(!a||a.element== ---> f <--- .element[0])){var k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.element[0])){var  ---> k <--- =false;if(d.tolerance=="touch"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var k=false;if( ---> d <--- .tolerance=="touch"){k=!(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d.tolerance=="touch"){ ---> k <--- =!(a.left>h||a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
tolerance=="touch"){k=!( ---> a <--- .left>h||a.right<b

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{k=!(a.left> ---> h <--- ||a.right<b||a.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=!(a.left>h|| ---> a <--- .right<b||a.top>i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.left>h||a.right< ---> b <--- ||a.top>i||a.bottom

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
>h||a.right<b|| ---> a <--- .top>i||a.bottom<g

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.right<b||a.top> ---> i <--- ||a.bottom<g);}else

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<b||a.top>i|| ---> a <--- .bottom<g);}else{if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.top>i||a.bottom< ---> g <--- );}else{if(d.tolerance

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
<g);}else{if( ---> d <--- .tolerance=="fit"){k=a.

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d.tolerance=="fit"){ ---> k <--- =a.left>b&&a.right

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.tolerance=="fit"){k= ---> a <--- .left>b&&a.right<h

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"fit"){k=a.left> ---> b <--- &&a.right<h&&a.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{k=a.left>b&& ---> a <--- .right<h&&a.top>g

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.left>b&&a.right< ---> h <--- &&a.top>g&&a.bottom

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
>b&&a.right<h&& ---> a <--- .top>g&&a.bottom<i

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.right<h&&a.top> ---> g <--- &&a.bottom<i;}}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<h&&a.top>g&& ---> a <--- .bottom<i;}}if(k

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.top>g&&a.bottom< ---> i <--- ;}}if(k){if(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.bottom<i;}}if( ---> k <--- ){if(a.selected){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(k){if( ---> a <--- .selected){a.$element.removeClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(a.selected){ ---> a <--- .$element.removeClass("ui-selected");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.removeClass("ui-selected"); ---> a <--- .selected=false;}if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.selected=false;}if( ---> a <--- .unselecting){a.$element.removeClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(a.unselecting){ ---> a <--- .$element.removeClass("ui-unselecting");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.removeClass("ui-unselecting"); ---> a <--- .unselecting=false;}if(!a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.unselecting=false;}if(! ---> a <--- .selecting){a.$element.addClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(!a.selecting){ ---> a <--- .$element.addClass("ui-selecting");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.addClass("ui-selecting"); ---> a <--- .selecting=true;f._trigger("selecting"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-selecting");a.selecting=true; ---> f <--- ._trigger("selecting",c,{selecting:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;f._trigger("selecting", ---> c <--- ,{selecting:a.element});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("selecting",c,{selecting: ---> a <--- .element});}}else{if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
});}}else{if( ---> a <--- .selecting){if(c.metaKey&&

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.selecting){if( ---> c <--- .metaKey&&a.startselected){a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
selecting){if(c.metaKey&& ---> a <--- .startselected){a.$element.removeClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.metaKey&&a.startselected){ ---> a <--- .$element.removeClass("ui-selecting");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.removeClass("ui-selecting"); ---> a <--- .selecting=false;a.$element.addClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-selecting");a.selecting=false; ---> a <--- .$element.addClass("ui-selected");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.addClass("ui-selected"); ---> a <--- .selected=true;}else{a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.selected=true;}else{ ---> a <--- .$element.removeClass("ui-selecting");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.removeClass("ui-selecting"); ---> a <--- .selecting=false;if(a.startselected

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.selecting=false;if( ---> a <--- .startselected){a.$element.addClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
false;if(a.startselected){ ---> a <--- .$element.addClass("ui-unselecting");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.addClass("ui-unselecting"); ---> a <--- .unselecting=true;}f._trigger(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.unselecting=true;} ---> f <--- ._trigger("unselecting",c,{unselecting:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
true;}f._trigger("unselecting", ---> c <--- ,{unselecting:a.element});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("unselecting",c,{unselecting: ---> a <--- .element});}}if(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.element});}}if( ---> a <--- .selected){if(!c.metaKey

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.selected){if(! ---> c <--- .metaKey&&!a.startselected){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(!c.metaKey&&! ---> a <--- .startselected){a.$element.removeClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.metaKey&&!a.startselected){ ---> a <--- .$element.removeClass("ui-selected");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.removeClass("ui-selected"); ---> a <--- .selected=false;a.$element.addClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-selected");a.selected=false; ---> a <--- .$element.addClass("ui-unselecting");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.$element.addClass("ui-unselecting"); ---> a <--- .unselecting=true;f._trigger("unselecting"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-unselecting");a.unselecting=true; ---> f <--- ._trigger("unselecting",c,{unselecting:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;f._trigger("unselecting", ---> c <--- ,{unselecting:a.element});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("unselecting",c,{unselecting: ---> a <--- .element});}}}}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseStop:function(c){var  ---> f <--- =this;this.dragged=false;e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this;this.dragged=false; ---> e <--- (".ui-unselecting",this.element[0])

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> d <--- =e.data(this,"selectable-item");

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var d= ---> e <--- .data(this,"selectable-item");d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e.data(this,"selectable-item"); ---> d <--- .$element.removeClass("ui-unselecting");d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.$element.removeClass("ui-unselecting"); ---> d <--- .unselecting=false;d.startselected=false

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-unselecting");d.unselecting=false; ---> d <--- .startselected=false;f._trigger("unselected"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;d.startselected=false; ---> f <--- ._trigger("unselected",c,{unselected:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;f._trigger("unselected", ---> c <--- ,{unselected:d.element});

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("unselected",c,{unselected: ---> d <--- .element});});e(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d.element});}); ---> e <--- (".ui-selecting",this.element[0])

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> d <--- =e.data(this,"selectable-item");

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var d= ---> e <--- .data(this,"selectable-item");d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e.data(this,"selectable-item"); ---> d <--- .$element.removeClass("ui-selecting").addClass(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-selecting").addClass("ui-selected"); ---> d <--- .selecting=false;d.selected=true

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-selected");d.selecting=false; ---> d <--- .selected=true;d.startselected=true

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;d.selected=true; ---> d <--- .startselected=true;f._trigger("selected"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;d.startselected=true; ---> f <--- ._trigger("selected",c,{selected:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;f._trigger("selected", ---> c <--- ,{selected:d.element});

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("selected",c,{selected: ---> d <--- .element});});this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
});this._trigger("stop", ---> c <--- );this.helper.remove();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);returnfalse;}}); ---> e <--- .extend(e.ui.selectable,{

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});e.extend( ---> e <--- .ui.selectable,{version:"1.8.5"}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(d){ ---> d <--- .widget("ui.sortable",d.ui.mouse

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d){d.widget("ui.sortable", ---> d <--- .ui.mouse,{widgetEventPrefix:"sort",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._mouseDestroy();for(var  ---> a <--- =this.items.length-1;a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.items.length-1; ---> a <--- >=0;a--){this.items

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;a>=0; ---> a <--- --){this.items[a].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a--){this.items[ ---> a <--- ].item.removeData("sortable-item");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){if( ---> a <--- ==="disabled"){this.options[a]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a==="disabled"){this.options[ ---> a <--- ]=b;this.widget()[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.options[a]= ---> b <--- ;this.widget()[b?"addClass"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b;this.widget()[ ---> b <--- ?"addClass":"removeClass"]("ui-sortable-disabled");}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"removeClass"]("ui-sortable-disabled");}else{ ---> d <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnfalse;}this._refreshItems( ---> a <--- );var c=null,e=this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}this._refreshItems(a);var  ---> c <--- =null,e=this;d(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a);var c=null, ---> e <--- =this;d(a.target).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var c=null,e=this; ---> d <--- (a.target).parents().

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=null,e=this;d( ---> a <--- .target).parents().each(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(function(){if( ---> d <--- .data(this,"sortable-item")==e)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d.data(this,"sortable-item")== ---> e <--- ){c=d(this);return

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,"sortable-item")==e){ ---> c <--- =d(this);returnfalse;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,"sortable-item")==e){c= ---> d <--- (this);returnfalse;}})

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
returnfalse;}});if( ---> d <--- .data(a.target,"sortable-item")==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
});if(d.data( ---> a <--- .target,"sortable-item")==e){c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
data(a.target,"sortable-item")== ---> e <--- ){c=d(a.target)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.target,"sortable-item")==e){ ---> c <--- =d(a.target);}if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,"sortable-item")==e){c= ---> d <--- (a.target);}if(!

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)==e){c=d( ---> a <--- .target);}if(!c)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.target);}if(! ---> c <--- ){returnfalse;}if(this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.options.handle&&! ---> b <--- ){var f=false;d(this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
options.handle&&!b){var  ---> f <--- =false;d(this.options.handle

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!b){var f=false; ---> d <--- (this.options.handle,c).

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;d(this.options.handle, ---> c <--- ).find("*").andSelf()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){if(this== ---> a <--- .target){f=true;}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this==a.target){ ---> f <--- =true;}});if(!

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
true;}});if(! ---> f <--- ){returnfalse;}}this.currentItem

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnfalse;}}this.currentItem= ---> c <--- ;this._removeCurrentsFromItems();returntrue;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b,c){ ---> b <--- =this.options;var e=this;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){b=this.options;var  ---> e <--- =this;this.currentContainer=this;this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.helper=this._createHelper( ---> a <--- );this._cacheHelperProportions();this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.helper.css("position"); ---> d <--- .extend(this.offset,{click:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset,{click:{left: ---> a <--- .pageX-this.offset.left,top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.offset.left,top: ---> a <--- .pageY-this.offset.top},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.originalPosition=this._generatePosition( ---> a <--- );this.originalPageX=a.pageX;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_generatePosition(a);this.originalPageX= ---> a <--- .pageX;this.originalPageY=a.pageY

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.pageX;this.originalPageY= ---> a <--- .pageY;b.cursorAt&&this._adjustOffsetFromHelper

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.originalPageY=a.pageY; ---> b <--- .cursorAt&&this._adjustOffsetFromHelper(b.cursorAt

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.cursorAt&&this._adjustOffsetFromHelper( ---> b <--- .cursorAt);this.domPosition={prev

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();this._createPlaceholder(); ---> b <--- .containment&&this._setContainment();if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&this._setContainment();if( ---> b <--- .cursor){if(d("body")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b.cursor){if( ---> d <--- ("body").css("cursor")){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("cursor")){this._storedCursor= ---> d <--- ("body").css("cursor");}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"body").css("cursor");} ---> d <--- ("body").css("cursor",b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d("body").css("cursor", ---> b <--- .cursor);}if(b.opacity

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.cursor);}if( ---> b <--- .opacity){if(this.helper.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}this.helper.css("opacity", ---> b <--- .opacity);}if(b.zIndex

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.opacity);}if( ---> b <--- .zIndex){if(this.helper.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}this.helper.css("zIndex", ---> b <--- .zIndex);}if(this.scrollParent

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}this._trigger("start", ---> a <--- ,this._uiHash());this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._cacheHelperProportions();if(! ---> c <--- ){for(c=this.containers.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!c){for( ---> c <--- =this.containers.length-1;c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.containers.length-1; ---> c <--- >=0;c--){this.containers

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;c>=0; ---> c <--- --){this.containers[c].

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;c--){this.containers[ ---> c <--- ]._trigger("activate",a,e.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
containers[c]._trigger("activate", ---> a <--- ,e._uiHash(this));}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c]._trigger("activate",a, ---> e <--- ._uiHash(this));}}if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(this));}}if( ---> d <--- .ui.ddmanager){d.ui.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d.ui.ddmanager){ ---> d <--- .ui.ddmanager.current=this;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.ddmanager.current=this;} ---> d <--- .ui.ddmanager&&!b.dropBehaviour&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}d.ui.ddmanager&&! ---> b <--- .dropBehaviour&&d.ui.ddmanager.prepareOffsets

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.ddmanager&&!b.dropBehaviour&& ---> d <--- .ui.ddmanager.prepareOffsets(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.prepareOffsets(this, ---> a <--- );this.dragging=true;this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-sortable-helper");this._mouseDrag( ---> a <--- );returntrue;},_mouseDrag:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.position=this._generatePosition( ---> a <--- );this.positionAbs=this._convertPositionTo(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.options.scroll){var  ---> b <--- =this.options,c=false;if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this.options, ---> c <--- =false;if(this.scrollParent[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].offsetHeight- ---> a <--- .pageY<b.scrollSensitivity){this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0].offsetHeight-a.pageY< ---> b <--- .scrollSensitivity){this.scrollParent[0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollTop= ---> c <--- =this.scrollParent[0].scrollTop+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollTop+ ---> b <--- .scrollSpeed;}else{if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollSpeed;}else{if( ---> a <--- .pageY-this.overflowOffset.top<b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageY-this.overflowOffset.top< ---> b <--- .scrollSensitivity){this.scrollParent[0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollTop= ---> c <--- =this.scrollParent[0].scrollTop-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollTop- ---> b <--- .scrollSpeed;}}if(this.overflowOffset

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].offsetWidth- ---> a <--- .pageX<b.scrollSensitivity){this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0].offsetWidth-a.pageX< ---> b <--- .scrollSensitivity){this.scrollParent[0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollLeft= ---> c <--- =this.scrollParent[0].scrollLeft+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollLeft+ ---> b <--- .scrollSpeed;}else{if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollSpeed;}else{if( ---> a <--- .pageX-this.overflowOffset.left<b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageX-this.overflowOffset.left< ---> b <--- .scrollSensitivity){this.scrollParent[0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollLeft= ---> c <--- =this.scrollParent[0].scrollLeft-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0].scrollLeft- ---> b <--- .scrollSpeed;}}}else{if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollSpeed;}}}else{if( ---> a <--- .pageY-d(document).scrollTop(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(a.pageY- ---> d <--- (document).scrollTop()<b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollTop()< ---> b <--- .scrollSensitivity){c=d(document)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollTop()<b.scrollSensitivity){ ---> c <--- =d(document).scrollTop(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<b.scrollSensitivity){c= ---> d <--- (document).scrollTop(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c=d(document).scrollTop( ---> d <--- (document).scrollTop()-b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollTop()- ---> b <--- .scrollSpeed);}else{if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollSpeed);}else{if( ---> d <--- (window).height()-(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(window).height()-( ---> a <--- .pageY-d(document).scrollTop(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
height()-(a.pageY- ---> d <--- (document).scrollTop())<b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(document).scrollTop())< ---> b <--- .scrollSensitivity){c=d(document)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
())<b.scrollSensitivity){ ---> c <--- =d(document).scrollTop(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<b.scrollSensitivity){c= ---> d <--- (document).scrollTop(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c=d(document).scrollTop( ---> d <--- (document).scrollTop()+b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollTop()+ ---> b <--- .scrollSpeed);}}if(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollSpeed);}}if( ---> a <--- .pageX-d(document).scrollLeft(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}if(a.pageX- ---> d <--- (document).scrollLeft()<b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollLeft()< ---> b <--- .scrollSensitivity){c=d(document)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollLeft()<b.scrollSensitivity){ ---> c <--- =d(document).scrollLeft(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<b.scrollSensitivity){c= ---> d <--- (document).scrollLeft(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c=d(document).scrollLeft( ---> d <--- (document).scrollLeft()-b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollLeft()- ---> b <--- .scrollSpeed);}else{if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollSpeed);}else{if( ---> d <--- (window).width()-(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(window).width()-( ---> a <--- .pageX-d(document).scrollLeft(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
width()-(a.pageX- ---> d <--- (document).scrollLeft())<b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(document).scrollLeft())< ---> b <--- .scrollSensitivity){c=d(document)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
())<b.scrollSensitivity){ ---> c <--- =d(document).scrollLeft(d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)<b.scrollSensitivity){c= ---> d <--- (document).scrollLeft(d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c=d(document).scrollLeft( ---> d <--- (document).scrollLeft()+b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollLeft()+ ---> b <--- .scrollSpeed);}}}c!==false

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+b.scrollSpeed);}}} ---> c <--- !==false&&d.ui.ddmanager&&!

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);}}}c!==false&& ---> d <--- .ui.ddmanager&&!b.dropBehaviour&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
false&&d.ui.ddmanager&&! ---> b <--- .dropBehaviour&&d.ui.ddmanager.prepareOffsets

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.ddmanager&&!b.dropBehaviour&& ---> d <--- .ui.ddmanager.prepareOffsets(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.prepareOffsets(this, ---> a <--- );}this.positionAbs=this._convertPositionTo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
position.top+"px";}for( ---> b <--- =this.items.length-1;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.items.length-1; ---> b <--- >=0;b--){c=this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;b>=0; ---> b <--- --){c=this.items[b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b>=0;b--){ ---> c <--- =this.items[b];var e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
--){c=this.items[ ---> b <--- ];var e=c.item[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.items[b];var  ---> e <--- =c.item[0],f=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.items[b];var e= ---> c <--- .item[0],f=this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e=c.item[0], ---> f <--- =this._intersectsWithPointer(c);if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0],f=this._intersectsWithPointer( ---> c <--- );if(f){if(e

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this._intersectsWithPointer(c);if( ---> f <--- ){if(e!=this.currentItem[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(f){if( ---> e <--- !=this.currentItem[0]&&this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
currentItem[0]&&this.placeholder[ ---> f <--- ==1?"next":"prev"]()[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:"prev"]()[0]!= ---> e <--- &&!d.ui.contains(this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
()[0]!=e&&! ---> d <--- .ui.contains(this.placeholder[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
contains(this.placeholder[0], ---> e <--- )&&(this.options.type=="semi-dynamic"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.type=="semi-dynamic"?! ---> d <--- .ui.contains(this.element[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
contains(this.element[0], ---> e <--- ):true)){this.direction=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:true)){this.direction= ---> f <--- ==1?"down":"up";if(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.tolerance=="pointer"||this._intersectsWithSides( ---> c <--- )){this._rearrange(a,c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)){this._rearrange( ---> a <--- ,c);}else{break;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this._rearrange(a, ---> c <--- );}else{break;}this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}this._trigger("change", ---> a <--- ,this._uiHash());break;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}}}this._contactContainers( ---> a <--- );d.ui.ddmanager&&d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}}this._contactContainers(a); ---> d <--- .ui.ddmanager&&d.ui.ddmanager

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a);d.ui.ddmanager&& ---> d <--- .ui.ddmanager.drag(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.drag(this, ---> a <--- );this._trigger("sort",a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a);this._trigger("sort", ---> a <--- ,this._uiHash());this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){if( ---> a <--- ){d.ui.ddmanager&&!this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){if(a){ ---> d <--- .ui.ddmanager&&!this.options.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
ddmanager&&!this.options.dropBehaviour&& ---> d <--- .ui.ddmanager.drop(this,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.ddmanager.drop(this, ---> a <--- );if(this.options.revert)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.options.revert){var  ---> c <--- =this;b=c.placeholder.offset

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.revert){var c=this; ---> b <--- =c.placeholder.offset();c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this;b= ---> c <--- .placeholder.offset();c.reverting

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.placeholder.offset(); ---> c <--- .reverting=true;d(this.helper

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.reverting=true; ---> d <--- (this.helper).animate({left

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.helper).animate({left: ---> b <--- .left-this.offset.parent.left

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.offset.parent.left- ---> c <--- .margins.left+(this.offsetParent[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].scrollLeft),top: ---> b <--- .top-this.offset.parent.top

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.offset.parent.top- ---> c <--- .margins.top+(this.offsetParent[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||500,function(){ ---> c <--- ._clear(a);});}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){c._clear( ---> a <--- );});}else{this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{this._clear( ---> a <--- ,b);}returnfalse;}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{this._clear(a, ---> b <--- );}returnfalse;}},cancel

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},cancel:function(){var  ---> a <--- =this;if(this.dragging){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
currentItem.show();for(var  ---> b <--- =this.containers.length-1;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.containers.length-1; ---> b <--- >=0;b--){this.containers

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;b>=0; ---> b <--- --){this.containers[b].

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b--){this.containers[ ---> b <--- ]._trigger("deactivate",null,a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b]._trigger("deactivate",null, ---> a <--- ._uiHash(this));if(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
));if(this.containers[ ---> b <--- ].containerCache.over){this.containers

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
containerCache.over){this.containers[ ---> b <--- ]._trigger("out",null,a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b]._trigger("out",null, ---> a <--- ._uiHash(this));this.containers

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this));this.containers[ ---> b <--- ].containerCache.over=0;}}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&this.helper.remove(); ---> d <--- .extend(this,{helper:null,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
});this.domPosition.prev? ---> d <--- (this.domPosition.prev).after(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).after(this.currentItem): ---> d <--- (this.domPosition.parent).prepend(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,serialize:function(a){var  ---> b <--- =this._getItemsAsjQuery(a&&a.connected

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this._getItemsAsjQuery( ---> a <--- &&a.connected),c=[]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this._getItemsAsjQuery(a&& ---> a <--- .connected),c=[];a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_getItemsAsjQuery(a&&a.connected), ---> c <--- =[];a=a||{}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.connected),c=[]; ---> a <--- =a||{};d(b)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
),c=[];a= ---> a <--- ||{};d(b).each

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];a=a||{}; ---> d <--- (b).each(function(){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a=a||{};d( ---> b <--- ).each(function(){var e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> e <--- =(d(a.item||this)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){var e=( ---> d <--- (a.item||this).attr(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(){var e=(d( ---> a <--- .item||this).attr(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.item||this).attr( ---> a <--- .attribute||"id")||"").match

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||"id")||"").match( ---> a <--- .expression||/(.+)[-=_](.+)/);if(e)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a.expression||/(.+)[-=_](.+)/);if( ---> e <--- ){c.push((a.key

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||/(.+)[-=_](.+)/);if(e){ ---> c <--- .push((a.key||e[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(e){c.push(( ---> a <--- .key||e[1]+"[]")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c.push((a.key|| ---> e <--- [1]+"[]")+"="+(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1]+"[]")+"="+( ---> a <--- .key&&a.expression?e[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)+"="+(a.key&& ---> a <--- .expression?e[1]:e[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.key&&a.expression? ---> e <--- [1]:e[2]))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a.expression?e[1]: ---> e <--- [2]));}});

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]));}});! ---> c <--- .length&&a.key&&c.push

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}});!c.length&& ---> a <--- .key&&c.push(a.key

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
!c.length&&a.key&& ---> c <--- .push(a.key+"=");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.key&&c.push( ---> a <--- .key+"=");returnc.join

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.key+"=");return ---> c <--- .join("&");},toArray:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,toArray:function(a){var  ---> b <--- =this._getItemsAsjQuery(a&&a.connected

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this._getItemsAsjQuery( ---> a <--- &&a.connected),c=[]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this._getItemsAsjQuery(a&& ---> a <--- .connected),c=[];a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_getItemsAsjQuery(a&&a.connected), ---> c <--- =[];a=a||{}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.connected),c=[]; ---> a <--- =a||{};b.each(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
),c=[];a= ---> a <--- ||{};b.each(function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
];a=a||{}; ---> b <--- .each(function(){c.push

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.each(function(){ ---> c <--- .push(d(a.item||this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){c.push( ---> d <--- (a.item||this).attr(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(){c.push(d( ---> a <--- .item||this).attr(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.item||this).attr( ---> a <--- .attribute||"id")||"");}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
)||"");});return ---> c <--- ;},_intersectsWith:function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_intersectsWith:function(a){var  ---> b <--- =this.positionAbs.left,c=b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this.positionAbs.left, ---> c <--- =b+this.helperProportions.width,e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.positionAbs.left,c= ---> b <--- +this.helperProportions.width,e=this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=b+this.helperProportions.width, ---> e <--- =this.positionAbs.top,f=e

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=this.positionAbs.top, ---> f <--- =e+this.helperProportions.height,g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.positionAbs.top,f= ---> e <--- +this.helperProportions.height,g=a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=e+this.helperProportions.height, ---> g <--- =a.left,h=g+a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.helperProportions.height,g= ---> a <--- .left,h=g+a.width

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.height,g=a.left, ---> h <--- =g+a.width,i=a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,g=a.left,h= ---> g <--- +a.width,i=a.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.left,h=g+ ---> a <--- .width,i=a.top,k

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=g+a.width, ---> i <--- =a.top,k=i+a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=g+a.width,i= ---> a <--- .top,k=i+a.height

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.width,i=a.top, ---> k <--- =i+a.height,j=this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,i=a.top,k= ---> i <--- +a.height,j=this.offset

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.top,k=i+ ---> a <--- .height,j=this.offset.click

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
,k=i+a.height, ---> j <--- =this.offset.click.top,l

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.offset.click.top, ---> l <--- =this.offset.click.left;j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.offset.click.left; ---> j <--- =e+j>i&&e+j

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.click.left;j= ---> e <--- +j>i&&e+j<k

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.click.left;j=e+ ---> j <--- >i&&e+j<k&&b

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.left;j=e+j> ---> i <--- &&e+j<k&&b+l

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;j=e+j>i&& ---> e <--- +j<k&&b+l>g

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=e+j>i&&e+ ---> j <--- <k&&b+l>g&&b

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
+j>i&&e+j< ---> k <--- &&b+l>g&&b+l

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
>i&&e+j<k&& ---> b <--- +l>g&&b+l<h

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
&&e+j<k&&b+ ---> l <--- >g&&b+l<h;return

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+j<k&&b+l> ---> g <--- &&b+l<h;returnthis.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
<k&&b+l>g&& ---> b <--- +l<h;returnthis.options.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b+l>g&&b+ ---> l <--- <h;returnthis.options.tolerance==

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
+l>g&&b+l< ---> h <--- ;returnthis.options.tolerance=="pointer"||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.floating?"width":"height"]> ---> a <--- [this.floating?"width":"height"]?

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
this.floating?"width":"height"]? ---> j <--- :g<b+this.helperProportions.width

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
floating?"width":"height"]?j: ---> g <--- <b+this.helperProportions.width/2

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"width":"height"]?j:g< ---> b <--- +this.helperProportions.width/2&&c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.helperProportions.width/2&& ---> c <--- -this.helperProportions.width/2<h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.helperProportions.width/2< ---> h <--- &&i<e+this.helperProportions.height

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.helperProportions.width/2<h&& ---> i <--- <e+this.helperProportions.height/2

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.width/2<h&&i< ---> e <--- +this.helperProportions.height/2&&f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.helperProportions.height/2&& ---> f <--- -this.helperProportions.height/2<k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.helperProportions.height/2< ---> k <--- ;},_intersectsWithPointer:function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_intersectsWithPointer:function(a){var  ---> b <--- =d.ui.isOverAxis(this.positionAbs

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .ui.isOverAxis(this.positionAbs.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.click.top, ---> a <--- .top,a.height);a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.click.top,a.top, ---> a <--- .height);a=d.ui.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.top,a.height); ---> a <--- =d.ui.isOverAxis(this.positionAbs

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
top,a.height);a= ---> d <--- .ui.isOverAxis(this.positionAbs.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.click.left, ---> a <--- .left,a.width);b=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.click.left,a.left, ---> a <--- .width);b=b&&a;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.left,a.width); ---> b <--- =b&&a;a=this._getDragVerticalDirection

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
left,a.width);b= ---> b <--- &&a;a=this._getDragVerticalDirection()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.width);b=b&& ---> a <--- ;a=this._getDragVerticalDirection();var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width);b=b&&a; ---> a <--- =this._getDragVerticalDirection();var c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a=this._getDragVerticalDirection();var  ---> c <--- =this._getDragHorizontalDirection();if(!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getDragHorizontalDirection();if(! ---> b <--- ){returnfalse;}returnthis.floating

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnfalse;}returnthis.floating? ---> c <--- &&c=="right"||a=="down"?2

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnthis.floating?c&& ---> c <--- =="right"||a=="down"?2:1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.floating?c&&c=="right"|| ---> a <--- =="down"?2:1:a&&(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||a=="down"?2:1: ---> a <--- &&(a=="down"?2:1)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"down"?2:1:a&&( ---> a <--- =="down"?2:1);},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_intersectsWithSides:function(a){var  ---> b <--- =d.ui.isOverAxis(this.positionAbs

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .ui.isOverAxis(this.positionAbs.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.click.top, ---> a <--- .top+a.height/2,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.click.top,a.top+ ---> a <--- .height/2,a.height);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top+a.height/2, ---> a <--- .height);a=d.ui.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
height/2,a.height); ---> a <--- =d.ui.isOverAxis(this.positionAbs

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
2,a.height);a= ---> d <--- .ui.isOverAxis(this.positionAbs.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.click.left, ---> a <--- .left+a.width/2,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.click.left,a.left+ ---> a <--- .width/2,a.width);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left+a.width/2, ---> a <--- .width);var c=this._getDragVerticalDirection

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
/2,a.width);var  ---> c <--- =this._getDragVerticalDirection(),e=this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
var c=this._getDragVerticalDirection(), ---> e <--- =this._getDragHorizontalDirection();returnthis.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_getDragHorizontalDirection();returnthis.floating&& ---> e <--- ?e=="right"&&a||e=="left"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);returnthis.floating&&e? ---> e <--- =="right"&&a||e=="left"&&!

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.floating&&e?e=="right"&& ---> a <--- ||e=="left"&&!a:c&&

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&e?e=="right"&&a|| ---> e <--- =="left"&&!a:c&&(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"right"&&a||e=="left"&&! ---> a <--- :c&&(c=="down"&&b||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a||e=="left"&&!a: ---> c <--- &&(c=="down"&&b||c==

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="left"&&!a:c&&( ---> c <--- =="down"&&b||c=="up"&&!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a:c&&(c=="down"&& ---> b <--- ||c=="up"&&!b);}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c&&(c=="down"&&b|| ---> c <--- =="up"&&!b);},_getDragVerticalDirection

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"down"&&b||c=="up"&&! ---> b <--- );},_getDragVerticalDirection:function(){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_getDragVerticalDirection:function(){var  ---> a <--- =this.positionAbs.top-this.lastPositionAbs

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
top-this.lastPositionAbs.top;return ---> a <--- !=0&&(a>0?"down":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top;returna!=0&&( ---> a <--- >0?"down":"up");},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_getDragHorizontalDirection:function(){var  ---> a <--- =this.positionAbs.left-this.lastPositionAbs

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
left-this.lastPositionAbs.left;return ---> a <--- !=0&&(a>0?"right":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left;returna!=0&&( ---> a <--- >0?"right":"left");},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){this._refreshItems( ---> a <--- );this.refreshPositions();returnthis

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_connectWith:function(){var  ---> a <--- =this.options;returna.connectWith.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=this.options;return ---> a <--- .connectWith.constructor==String?[a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.connectWith.constructor==String?[ ---> a <--- .connectWith]:a.connectWith;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
==String?[a.connectWith]: ---> a <--- .connectWith;},_getItemsAsjQuery:function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_getItemsAsjQuery:function(a){var  ---> b <--- =[],c=[],e

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a){var b=[], ---> c <--- =[],e=this._connectWith(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=[],c=[], ---> e <--- =this._connectWith();if(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._connectWith();if( ---> e <--- &&a){for(a=e.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._connectWith();if(e&& ---> a <--- ){for(a=e.length-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e&&a){for( ---> a <--- =e.length-1;a>=0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e&&a){for(a= ---> e <--- .length-1;a>=0;a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a=e.length-1; ---> a <--- >=0;a--){for(var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;a>=0; ---> a <--- --){for(var f=d(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0;a--){for(var  ---> f <--- =d(e[a]),g

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a--){for(var f= ---> d <--- (e[a]),g=f

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var f=d( ---> e <--- [a]),g=f.length

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var f=d(e[ ---> a <--- ]),g=f.length-1

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=d(e[a]), ---> g <--- =f.length-1;g>=0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(e[a]),g= ---> f <--- .length-1;g>=0;g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,g=f.length-1; ---> g <--- >=0;g--){var h=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;g>=0; ---> g <--- --){var h=d.data(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
g>=0;g--){var  ---> h <--- =d.data(f[g],

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
0;g--){var h= ---> d <--- .data(f[g],"sortable")

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){var h=d.data( ---> f <--- [g],"sortable");if(h

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
var h=d.data(f[ ---> g <--- ],"sortable");if(h&&h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
[g],"sortable");if( ---> h <--- &&h!=this&&!h.options.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
],"sortable");if(h&& ---> h <--- !=this&&!h.options.disabled)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(h&&h!=this&&! ---> h <--- .options.disabled){c.push(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&!h.options.disabled){ ---> c <--- .push([d.isFunction(h.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled){c.push([ ---> d <--- .isFunction(h.options.items)?

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
c.push([d.isFunction( ---> h <--- .options.items)?h.options.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
isFunction(h.options.items)? ---> h <--- .options.items.call(h.element

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
?h.options.items.call( ---> h <--- .element):d(h.options.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
items.call(h.element): ---> d <--- (h.options.items,h.element

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
call(h.element):d( ---> h <--- .options.items,h.element).

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:d(h.options.items, ---> h <--- .element).not(".ui-sortable-helper").not

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(".ui-sortable-helper").not(".ui-sortable-placeholder"), ---> h <--- ]);}}}}c.push

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,h]);}}}} ---> c <--- .push([d.isFunction(this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}c.push([ ---> d <--- .isFunction(this.options.items)?

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,item:this.currentItem}): ---> d <--- (this.options.items,this.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
".ui-sortable-placeholder"),this]);for( ---> a <--- =c.length-1;a>=0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,this]);for(a= ---> c <--- .length-1;a>=0;a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a=c.length-1; ---> a <--- >=0;a--){c[a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;a>=0; ---> a <--- --){c[a][0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;a>=0;a--){ ---> c <--- [a][0].each(function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0;a--){c[ ---> a <--- ][0].each(function()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0].each(function(){ ---> b <--- .push(this);});}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(this);});}return ---> d <--- (b);},_removeCurrentsFromItems:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);});}returnd( ---> b <--- );},_removeCurrentsFromItems:function(){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_removeCurrentsFromItems:function(){for(var  ---> a <--- =this.currentItem.find(":data(sortable-item)"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.currentItem.find(":data(sortable-item)"), ---> b <--- =0;b<this.items.length

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
find(":data(sortable-item)"),b=0; ---> b <--- <this.items.length;b++)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b<this.items.length; ---> b <--- ++){for(var c=0;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
length;b++){for(var  ---> c <--- =0;c<a.length;c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var c=0; ---> c <--- <a.length;c++){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var c=0;c< ---> a <--- .length;c++){a[c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;c<a.length; ---> c <--- ++){a[c]==this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<a.length;c++){ ---> a <--- [c]==this.items[b]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;c++){a[ ---> c <--- ]==this.items[b].item

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a[c]==this.items[ ---> b <--- ].item[0]&&this.items

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0]&&this.items.splice( ---> b <--- ,1);}}},_refreshItems:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.containers=[this];var  ---> b <--- =this.items,c=[[d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
];var b=this.items, ---> c <--- =[[d.isFunction(this.options

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.items,c=[[ ---> d <--- .isFunction(this.options.items)?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
call(this.element[0], ---> a <--- ,{item:this.currentItem}):

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{item:this.currentItem}): ---> d <--- (this.options.items,this.element

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element),this]], ---> e <--- =this._connectWith();if(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._connectWith();if( ---> e <--- ){for(var f=e.length

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(e){for(var  ---> f <--- =e.length-1;f>=0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(e){for(var f= ---> e <--- .length-1;f>=0;f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=e.length-1; ---> f <--- >=0;f--){for(var 

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;f>=0; ---> f <--- --){for(var g=d(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
0;f--){for(var  ---> g <--- =d(e[f]),h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
f--){for(var g= ---> d <--- (e[f]),h=g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var g=d( ---> e <--- [f]),h=g.length

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var g=d(e[ ---> f <--- ]),h=g.length-1

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=d(e[f]), ---> h <--- =g.length-1;h>=0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(e[f]),h= ---> g <--- .length-1;h>=0;h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=g.length-1; ---> h <--- >=0;h--){var i=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;h>=0; ---> h <--- --){var i=d.data(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
h>=0;h--){var  ---> i <--- =d.data(g[h],

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
0;h--){var i= ---> d <--- .data(g[h],"sortable")

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
){var i=d.data( ---> g <--- [h],"sortable");if(i

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
var i=d.data(g[ ---> h <--- ],"sortable");if(i&&i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
[h],"sortable");if( ---> i <--- &&i!=this&&!i.options.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
],"sortable");if(i&& ---> i <--- !=this&&!i.options.disabled)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
if(i&&i!=this&&! ---> i <--- .options.disabled){c.push(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&!i.options.disabled){ ---> c <--- .push([d.isFunction(i.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled){c.push([ ---> d <--- .isFunction(i.options.items)?

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
c.push([d.isFunction( ---> i <--- .options.items)?i.options.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
isFunction(i.options.items)? ---> i <--- .options.items.call(i.element

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
?i.options.items.call( ---> i <--- .element[0],a,{item

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
call(i.element[0], ---> a <--- ,{item:this.currentItem}):

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{item:this.currentItem}): ---> d <--- (i.options.items,i.element

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
:this.currentItem}):d( ---> i <--- .options.items,i.element),

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
:d(i.options.items, ---> i <--- .element),i]);this.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
options.items,i.element), ---> i <--- ]);this.containers.push(i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
]);this.containers.push( ---> i <--- );}}}}for(f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
i);}}}}for( ---> f <--- =c.length-1;f>=0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}}}for(f= ---> c <--- .length-1;f>=0;f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(f=c.length-1; ---> f <--- >=0;f--){a=c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;f>=0; ---> f <--- --){a=c[f][

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;f>=0;f--){ ---> a <--- =c[f][1];e

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0;f--){a= ---> c <--- [f][1];e=c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;f--){a=c[ ---> f <--- ][1];e=c[f

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=c[f][1]; ---> e <--- =c[f][0];h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[f][1];e= ---> c <--- [f][0];h=0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
][1];e=c[ ---> f <--- ][0];h=0;for

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=c[f][0]; ---> h <--- =0;for(g=e.length

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
0];h=0;for( ---> g <--- =e.length;h<g;h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;h=0;for(g= ---> e <--- .length;h<g;h++)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(g=e.length; ---> h <--- <g;h++){i=d

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(g=e.length;h< ---> g <--- ;h++){i=d(e

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.length;h<g; ---> h <--- ++){i=d(e[h

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;h<g;h++){ ---> i <--- =d(e[h]);i

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
<g;h++){i= ---> d <--- (e[h]);i.data

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;h++){i=d( ---> e <--- [h]);i.data("sortable-item"

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
++){i=d(e[ ---> h <--- ]);i.data("sortable-item",a

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=d(e[h]); ---> i <--- .data("sortable-item",a);b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]);i.data("sortable-item", ---> a <--- );b.push({item:i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
i.data("sortable-item",a); ---> b <--- .push({item:i,instance:

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);b.push({item: ---> i <--- ,instance:a,width:0,height

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
push({item:i,instance: ---> a <--- ,width:0,height:0,left

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._getParentOffset();}for(var  ---> b <--- =this.items.length-1;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.items.length-1; ---> b <--- >=0;b--){var c=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;b>=0; ---> b <--- --){var c=this.items[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b>=0;b--){var  ---> c <--- =this.items[b],e=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this.items[ ---> b <--- ],e=this.options.toleranceElement?

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c=this.items[b], ---> e <--- =this.options.toleranceElement?d(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=this.options.toleranceElement? ---> d <--- (this.options.toleranceElement,c.item

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
?d(this.options.toleranceElement, ---> c <--- .item):c.item;if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
options.toleranceElement,c.item): ---> c <--- .item;if(!a){c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
):c.item;if(! ---> a <--- ){c.width=e.outerWidth(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.item;if(!a){ ---> c <--- .width=e.outerWidth();c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(!a){c.width= ---> e <--- .outerWidth();c.height=e

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.width=e.outerWidth(); ---> c <--- .height=e.outerHeight();}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerWidth();c.height= ---> e <--- .outerHeight();}e=e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
height=e.outerHeight();} ---> e <--- =e.offset();c.left

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.outerHeight();}e= ---> e <--- .offset();c.left=e

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}e=e.offset(); ---> c <--- .left=e.left;c.top

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset();c.left= ---> e <--- .left;c.top=e.top

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.left=e.left; ---> c <--- .top=e.top;}if(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.left;c.top= ---> e <--- .top;}if(this.options.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this);}else{for( ---> b <--- =this.containers.length-1;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.containers.length-1; ---> b <--- >=0;b--){e=this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;b>=0; ---> b <--- --){e=this.containers[b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;b>=0;b--){ ---> e <--- =this.containers[b].element.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
--){e=this.containers[ ---> b <--- ].element.offset();this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset();this.containers[ ---> b <--- ].containerCache.left=e.left;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
containers[b].containerCache.left= ---> e <--- .left;this.containers[b].

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.left;this.containers[ ---> b <--- ].containerCache.top=e.top;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
containers[b].containerCache.top= ---> e <--- .top;this.containers[b].

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.top;this.containers[ ---> b <--- ].containerCache.width=this.containers[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerCache.width=this.containers[ ---> b <--- ].element.outerWidth();this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerWidth();this.containers[ ---> b <--- ].containerCache.height=this.containers[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerCache.height=this.containers[ ---> b <--- ].element.outerHeight();}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_createPlaceholder:function(a){var  ---> b <--- =a||this,c=b.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> a <--- ||this,c=b.options;if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=a||this, ---> c <--- =b.options;if(!c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=a||this,c= ---> b <--- .options;if(!c.placeholder||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=b.options;if(! ---> c <--- .placeholder||c.placeholder.constructor==String

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
options;if(!c.placeholder|| ---> c <--- .placeholder.constructor==String){var e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.placeholder.constructor==String){var  ---> e <--- =c.placeholder;c.placeholder={

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.constructor==String){var e= ---> c <--- .placeholder;c.placeholder={element:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var e=c.placeholder; ---> c <--- .placeholder={element:function(){

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
={element:function(){var  ---> f <--- =d(document.createElement(b.currentItem

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
element:function(){var f= ---> d <--- (document.createElement(b.currentItem[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=d(document.createElement( ---> b <--- .currentItem[0].nodeName)).

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0].nodeName)).addClass( ---> e <--- ||b.currentItem[0].className+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.nodeName)).addClass(e|| ---> b <--- .currentItem[0].className+" ui-sortable-placeholder")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-sortable-helper")[0];if(! ---> e <--- ){f.style.visibility="hidden";

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0];if(!e){ ---> f <--- .style.visibility="hidden";}returnf

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.style.visibility="hidden";}return ---> f <--- ;},update:function(f,g

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
f,g){if(!( ---> e <--- &&!c.forcePlaceholderSize)){g.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(!(e&&! ---> c <--- .forcePlaceholderSize)){g.height()

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e&&!c.forcePlaceholderSize)){ ---> g <--- .height()||g.height(b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)){g.height()|| ---> g <--- .height(b.currentItem.innerHeight()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.height()||g.height( ---> b <--- .currentItem.innerHeight()-parseInt(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentItem.innerHeight()-parseInt( ---> b <--- .currentItem.css("paddingTop")||0,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)||0,10)-parseInt( ---> b <--- .currentItem.css("paddingBottom")||0,

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"paddingBottom")||0,10)); ---> g <--- .width()||g.width(b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
));g.width()|| ---> g <--- .width(b.currentItem.innerWidth()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.width()||g.width( ---> b <--- .currentItem.innerWidth()-parseInt(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentItem.innerWidth()-parseInt( ---> b <--- .currentItem.css("paddingLeft")||0,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)||0,10)-parseInt( ---> b <--- .currentItem.css("paddingRight")||0,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
10));}}};} ---> b <--- .placeholder=d(c.placeholder.element

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}}};}b.placeholder= ---> d <--- (c.placeholder.element.call(b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
};}b.placeholder=d( ---> c <--- .placeholder.element.call(b.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c.placeholder.element.call( ---> b <--- .element,b.currentItem));b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.call(b.element, ---> b <--- .currentItem));b.currentItem.after

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.element,b.currentItem)); ---> b <--- .currentItem.after(b.placeholder);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
));b.currentItem.after( ---> b <--- .placeholder);c.placeholder.update(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
currentItem.after(b.placeholder); ---> c <--- .placeholder.update(b,b.placeholder

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
placeholder);c.placeholder.update( ---> b <--- ,b.placeholder);},_contactContainers:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.placeholder.update(b, ---> b <--- .placeholder);},_contactContainers:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){for(var  ---> b <--- =null,c=null,e=this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var b=null, ---> c <--- =null,e=this.containers.length

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=null,c=null, ---> e <--- =this.containers.length-1;e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.containers.length-1; ---> e <--- >=0;e--){if(!

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;e>=0; ---> e <--- --){if(!d.ui.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
0;e--){if(! ---> d <--- .ui.contains(this.currentItem[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
currentItem[0],this.containers[ ---> e <--- ].element[0])){if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(this._intersectsWith(this.containers[ ---> e <--- ].containerCache)){if(!(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containerCache)){if(!( ---> b <--- &&d.ui.contains(this.containers

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)){if(!(b&& ---> d <--- .ui.contains(this.containers[e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.contains(this.containers[ ---> e <--- ].element[0],b.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[e].element[0], ---> b <--- .element[0]))){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.element[0]))){ ---> b <--- =this.containers[e];c=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)){b=this.containers[ ---> e <--- ];c=e;}}else{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b=this.containers[e]; ---> c <--- =e;}}else{if(this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.containers[e];c= ---> e <--- ;}}else{if(this.containers

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(this.containers[ ---> e <--- ].containerCache.over){this.containers

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
containerCache.over){this.containers[ ---> e <--- ]._trigger("out",a,this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
containers[e]._trigger("out", ---> a <--- ,this._uiHash(this));this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(this));this.containers[ ---> e <--- ].containerCache.over=0;}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;}}}}if( ---> b <--- ){if(this.containers.length===

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
length===1){this.containers[ ---> c <--- ]._trigger("over",a,this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
containers[c]._trigger("over", ---> a <--- ,this._uiHash(this));this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this));this.containers[ ---> c <--- ].containerCache.over=1;}else

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.currentContainer!=this.containers[ ---> c <--- ]){b=10000;e=null

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
!=this.containers[c]){ ---> b <--- =10000;e=null;for(var 

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[c]){b=10000; ---> e <--- =null;for(var f=this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
10000;e=null;for(var  ---> f <--- =this.positionAbs[this.containers[c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.positionAbs[this.containers[ ---> c <--- ].floating?"left":"top"],g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
].floating?"left":"top"], ---> g <--- =this.items.length-1;g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.items.length-1; ---> g <--- >=0;g--){if(d

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;g>=0; ---> g <--- --){if(d.ui.contains

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0;g--){if( ---> d <--- .ui.contains(this.containers[c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.contains(this.containers[ ---> c <--- ].element[0],this.items

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0],this.items[ ---> g <--- ].item[0])){var 

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.item[0])){var  ---> h <--- =this.items[g][this.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
){var h=this.items[ ---> g <--- ][this.containers[c].floating

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
items[g][this.containers[ ---> c <--- ].floating?"left":"top"];if

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"top"];if(Math.abs( ---> h <--- -f)<b){b=Math

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(Math.abs(h- ---> f <--- )<b){b=Math.abs

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(h-f)< ---> b <--- ){b=Math.abs(h-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(h-f)<b){ ---> b <--- =Math.abs(h-f);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
b){b=Math.abs( ---> h <--- -f);e=this.items[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=Math.abs(h- ---> f <--- );e=this.items[g]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(h-f); ---> e <--- =this.items[g];}}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
f);e=this.items[ ---> g <--- ];}}}if(e||this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[g];}}}if( ---> e <--- ||this.options.dropOnEmpty){this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.currentContainer=this.containers[ ---> c <--- ];e?this._rearrange(a,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
currentContainer=this.containers[c]; ---> e <--- ?this._rearrange(a,e,null

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c];e?this._rearrange( ---> a <--- ,e,null,true):this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;e?this._rearrange(a, ---> e <--- ,null,true):this._rearrange(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
null,true):this._rearrange( ---> a <--- ,null,this.containers[c].

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,null,this.containers[ ---> c <--- ].element,true);this._trigger

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
true);this._trigger("change", ---> a <--- ,this._uiHash());this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_uiHash());this.containers[ ---> c <--- ]._trigger("change",a,this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
containers[c]._trigger("change", ---> a <--- ,this._uiHash(this));this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.placeholder);this.containers[ ---> c <--- ]._trigger("over",a,this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
containers[c]._trigger("over", ---> a <--- ,this._uiHash(this));this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this));this.containers[ ---> c <--- ].containerCache.over=1;}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_createHelper:function(a){var  ---> b <--- =this.options;a=d.isFunction

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this.options; ---> a <--- =d.isFunction(b.helper)?

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this.options;a= ---> d <--- .isFunction(b.helper)?d(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;a=d.isFunction( ---> b <--- .helper)?d(b.helper.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.isFunction(b.helper)? ---> d <--- (b.helper.apply(this.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
isFunction(b.helper)?d( ---> b <--- .helper.apply(this.element[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.element[0],[ ---> a <--- ,this.currentItem])):b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,this.currentItem])): ---> b <--- .helper=="clone"?this.currentItem.clone

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.clone():this.currentItem; ---> a <--- .parents("body").length||d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.parents("body").length|| ---> d <--- (b.appendTo!="parent"?b.appendTo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
parents("body").length||d( ---> b <--- .appendTo!="parent"?b.appendTo:this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||d(b.appendTo!="parent"? ---> b <--- .appendTo:this.currentItem[0].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.parentNode)[0].appendChild( ---> a <--- [0]);if(a[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a[0]);if( ---> a <--- [0]==this.currentItem[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
css("left")};}if( ---> a <--- [0].style.width==""||

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0].style.width==""|| ---> b <--- .forceHelperSize){a.width(this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width==""||b.forceHelperSize){ ---> a <--- .width(this.currentItem.width()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width());}if( ---> a <--- [0].style.height==""||

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0].style.height==""|| ---> b <--- .forceHelperSize){a.height(this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
height==""||b.forceHelperSize){ ---> a <--- .height(this.currentItem.height()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
currentItem.height());}return ---> a <--- ;},_adjustOffsetFromHelper:function(a){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){if(typeof ---> a <--- =="string"){a=a.split(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(typeofa=="string"){ ---> a <--- =a.split(" ");}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofa=="string"){a= ---> a <--- .split(" ");}if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.split(" ");}if( ---> d <--- .isArray(a)){a={

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if(d.isArray( ---> a <--- )){a={left:+a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.isArray(a)){ ---> a <--- ={left:+a[0],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)){a={left:+ ---> a <--- [0],top:+a[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+a[0],top:+ ---> a <--- [1]||0};}if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||0};}if("left" in  ---> a <--- ){this.offset.click.left=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.offset.click.left= ---> a <--- .left+this.margins.left;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left;}if("right" in  ---> a <--- ){this.offset.click.left=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left=this.helperProportions.width- ---> a <--- .right+this.margins.left;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left;}if("top" in  ---> a <--- ){this.offset.click.top=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.offset.click.top= ---> a <--- .top+this.margins.top;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.top;}if("bottom" in  ---> a <--- ){this.offset.click.top=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top=this.helperProportions.height- ---> a <--- .bottom+this.margins.top;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.helper.offsetParent();var  ---> a <--- =this.offsetParent.offset();if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0]!=document&& ---> d <--- .ui.contains(this.scrollParent[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.offsetParent[0])){ ---> a <--- .left+=this.scrollParent.scrollLeft()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+=this.scrollParent.scrollLeft(); ---> a <--- .top+=this.scrollParent.scrollTop()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.tagName.toLowerCase()=="html"&& ---> d <--- .browser.msie){a={top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"html"&&d.browser.msie){ ---> a <--- ={top:0,left:0}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:0};}return{top: ---> a <--- .top+(parseInt(this.offsetParent.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,10)||0),left: ---> a <--- .left+(parseInt(this.offsetParent.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.cssPosition=="relative"){var  ---> a <--- =this.currentItem.position();return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position();return{top: ---> a <--- .top-(parseInt(this.helper.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollParent.scrollTop(),left: ---> a <--- .left-(parseInt(this.helper.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_setContainment:function(){var  ---> a <--- =this.options;if(a.containment

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=this.options;if( ---> a <--- .containment=="parent"){a.containment=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.containment=="parent"){ ---> a <--- .containment=this.helper[0].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].parentNode;}if( ---> a <--- .containment=="document"||a.containment=="window"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(a.containment=="document"|| ---> a <--- .containment=="window"){this.containment=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.offset.parent.top, ---> d <--- (a.containment=="document"?document:window

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset.parent.top,d( ---> a <--- .containment=="document"?document:window).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
width-this.margins.left,( ---> d <--- (a.containment=="document"?document:window

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.margins.left,(d( ---> a <--- .containment=="document"?document:window).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(!/^(document|window|parent)$/.test( ---> a <--- .containment)){var b=d(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
test(a.containment)){var  ---> b <--- =d(a.containment)[0]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.containment)){var b= ---> d <--- (a.containment)[0];a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
containment)){var b=d( ---> a <--- .containment)[0];a=d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.containment)[0]; ---> a <--- =d(a.containment).offset(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment)[0];a= ---> d <--- (a.containment).offset();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)[0];a=d( ---> a <--- .containment).offset();var c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment).offset();var  ---> c <--- =d(b).css("overflow")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).offset();var c= ---> d <--- (b).css("overflow")!="hidden"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
offset();var c=d( ---> b <--- ).css("overflow")!="hidden";this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)!="hidden";this.containment=[ ---> a <--- .left+(parseInt(d(b)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=[a.left+(parseInt( ---> d <--- (b).css("borderLeftWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.left+(parseInt(d( ---> b <--- ).css("borderLeftWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)+(parseInt( ---> d <--- (b).css("paddingLeft"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)+(parseInt(d( ---> b <--- ).css("paddingLeft"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0)-this.margins.left, ---> a <--- .top+(parseInt(d(b)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
left,a.top+(parseInt( ---> d <--- (b).css("borderTopWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.top+(parseInt(d( ---> b <--- ).css("borderTopWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)+(parseInt( ---> d <--- (b).css("paddingTop"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)+(parseInt(d( ---> b <--- ).css("paddingTop"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0)-this.margins.top, ---> a <--- .left+(c?Math.max(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.top,a.left+( ---> c <--- ?Math.max(b.scrollWidth,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
left+(c?Math.max( ---> b <--- .scrollWidth,b.offsetWidth):b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?Math.max(b.scrollWidth, ---> b <--- .offsetWidth):b.offsetWidth)-(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollWidth,b.offsetWidth): ---> b <--- .offsetWidth)-(parseInt(d(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.offsetWidth)-(parseInt( ---> d <--- (b).css("borderLeftWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetWidth)-(parseInt(d( ---> b <--- ).css("borderLeftWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)-(parseInt( ---> d <--- (b).css("paddingRight"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)-(parseInt(d( ---> b <--- ).css("paddingRight"),10)||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width-this.margins.left, ---> a <--- .top+(c?Math.max(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
margins.left,a.top+( ---> c <--- ?Math.max(b.scrollHeight,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
top+(c?Math.max( ---> b <--- .scrollHeight,b.offsetHeight):b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?Math.max(b.scrollHeight, ---> b <--- .offsetHeight):b.offsetHeight)-(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.scrollHeight,b.offsetHeight): ---> b <--- .offsetHeight)-(parseInt(d(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.offsetHeight)-(parseInt( ---> d <--- (b).css("borderTopWidth"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetHeight)-(parseInt(d( ---> b <--- ).css("borderTopWidth"),10)||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)-(parseInt( ---> d <--- (b).css("paddingBottom"),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)-(parseInt(d( ---> b <--- ).css("paddingBottom"),10)||

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){if(! ---> b <--- ){b=this.position;}a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b){if(!b){ ---> b <--- =this.position;}a=a==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){b=this.position;} ---> a <--- =a=="absolute"?1:-1;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b=this.position;}a= ---> a <--- =="absolute"?1:-1;var c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="absolute"?1:-1;var  ---> c <--- =this.cssPosition=="absolute"&&!(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0]!=document&& ---> d <--- .ui.contains(this.scrollParent[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
?this.offsetParent:this.scrollParent, ---> e <--- =/(html|body)/i.test(c[0].

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollParent,e=/(html|body)/i.test( ---> c <--- [0].tagName);return{top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
].tagName);return{top: ---> b <--- .top+this.offset.relative.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.relative.top* ---> a <--- +this.offset.parent.top*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.parent.top* ---> a <--- -(d.browser.safari&&this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.parent.top*a-( ---> d <--- .browser.safari&&this.cssPosition=="fixed"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollTop(): ---> e <--- ?0:c.scrollTop())*

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollTop():e?0: ---> c <--- .scrollTop())*a),left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0:c.scrollTop())* ---> a <--- ),left:b.left+this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
())*a),left: ---> b <--- .left+this.offset.relative.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.relative.left* ---> a <--- +this.offset.parent.left*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+this.offset.parent.left* ---> a <--- -(d.browser.safari&&this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.parent.left*a-( ---> d <--- .browser.safari&&this.cssPosition=="fixed"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollLeft(): ---> e <--- ?0:c.scrollLeft())*

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollLeft():e?0: ---> c <--- .scrollLeft())*a)};

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0:c.scrollLeft())* ---> a <--- )};},_generatePosition:function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_generatePosition:function(a){var  ---> b <--- =this.options,c=this.cssPosition

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this.options, ---> c <--- =this.cssPosition=="absolute"&&!(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.scrollParent[0]!=document&& ---> d <--- .ui.contains(this.scrollParent[0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
?this.offsetParent:this.scrollParent, ---> e <--- =/(html|body)/i.test(c[0].

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollParent,e=/(html|body)/i.test( ---> c <--- [0].tagName);if(this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._getRelativeOffset();}var  ---> f <--- =a.pageX,g=a.pageY

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._getRelativeOffset();}var f= ---> a <--- .pageX,g=a.pageY;if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var f=a.pageX, ---> g <--- =a.pageY;if(this.originalPosition

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=a.pageX,g= ---> a <--- .pageY;if(this.originalPosition){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.containment){if( ---> a <--- .pageX-this.offset.click.left

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[0]){ ---> f <--- =this.containment[0]+this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.click.left;}if( ---> a <--- .pageY-this.offset.click.top

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[1]){ ---> g <--- =this.containment[1]+this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.click.top;}if( ---> a <--- .pageX-this.offset.click.left

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[2]){ ---> f <--- =this.containment[2]+this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
offset.click.left;}if( ---> a <--- .pageY-this.offset.click.top

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[3]){ ---> g <--- =this.containment[3]+this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.click.top;}}if( ---> b <--- .grid){g=this.originalPageY+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(b.grid){ ---> g <--- =this.originalPageY+Math.round((

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this.originalPageY+Math.round(( ---> g <--- -this.originalPageY)/b.grid[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
((g-this.originalPageY)/ ---> b <--- .grid[1])*b.grid

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/b.grid[1])* ---> b <--- .grid[1];g=this.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)*b.grid[1]; ---> g <--- =this.containment?!(g-this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=this.containment?!( ---> g <--- -this.offset.click.top<this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
top<this.containment[1]|| ---> g <--- -this.offset.click.top>this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[3])? ---> g <--- :!(g-this.offset.click

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
[3])?g:!( ---> g <--- -this.offset.click.top<this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[1])? ---> g <--- -b.grid[1]:g+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment[1])?g- ---> b <--- .grid[1]:g+b.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g-b.grid[1]: ---> g <--- +b.grid[1]:g;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.grid[1]:g+ ---> b <--- .grid[1]:g;f=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g+b.grid[1]: ---> g <--- ;f=this.originalPageX+Math.round

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.grid[1]:g; ---> f <--- =this.originalPageX+Math.round((

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this.originalPageX+Math.round(( ---> f <--- -this.originalPageX)/b.grid[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
((f-this.originalPageX)/ ---> b <--- .grid[0])*b.grid

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/b.grid[0])* ---> b <--- .grid[0];f=this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
)*b.grid[0]; ---> f <--- =this.containment?!(f-this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;f=this.containment?!( ---> f <--- -this.offset.click.left<this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
left<this.containment[0]|| ---> f <--- -this.offset.click.left>this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
>this.containment[2])? ---> f <--- :!(f-this.offset.click

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[2])?f:!( ---> f <--- -this.offset.click.left<this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
<this.containment[0])? ---> f <--- -b.grid[0]:f+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.containment[0])?f- ---> b <--- .grid[0]:f+b.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f-b.grid[0]: ---> f <--- +b.grid[0]:f;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.grid[0]:f+ ---> b <--- .grid[0]:f;}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f+b.grid[0]: ---> f <--- ;}}return{top:g-this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:f;}}return{top: ---> g <--- -this.offset.click.top-this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.offset.parent.top+( ---> d <--- .browser.safari&&this.cssPosition=="fixed"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollTop(): ---> e <--- ?0:c.scrollTop()),

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollTop():e?0: ---> c <--- .scrollTop()),left:f-

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c.scrollTop()),left: ---> f <--- -this.offset.click.left-this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.offset.parent.left+( ---> d <--- .browser.safari&&this.cssPosition=="fixed"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-this.scrollParent.scrollLeft(): ---> e <--- ?0:c.scrollLeft())}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollLeft():e?0: ---> c <--- .scrollLeft())};},_rearrange

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,c,e){ ---> c <--- ?c[0].appendChild(this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b,c,e){c? ---> c <--- [0].appendChild(this.placeholder[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.placeholder[0]): ---> b <--- .item[0].parentNode.insertBefore(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0],this.direction=="down"? ---> b <--- .item[0]:b.item[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"down"?b.item[0]: ---> b <--- .item[0].nextSibling);this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?++this.counter:1;var  ---> f <--- =this,g=this.counter;window

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
counter:1;var f=this, ---> g <--- =this.counter;window.setTimeout(function

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;window.setTimeout(function(){ ---> g <--- ==f.counter&&f.refreshPositions(!

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.setTimeout(function(){g== ---> f <--- .counter&&f.refreshPositions(!e)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(){g==f.counter&& ---> f <--- .refreshPositions(!e);},0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
f.counter&&f.refreshPositions(! ---> e <--- );},0);},_clear

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.reverting=false;var  ---> c <--- =[];!this._noFinalSort&&this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
currentItem[0]){for(var  ---> e <---  in this._storedCSS){if(this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_storedCSS){if(this._storedCSS[ ---> e <--- ]=="auto"||this._storedCSS[e]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e]=="auto"||this._storedCSS[ ---> e <--- ]=="static"){this._storedCSS[e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]=="static"){this._storedCSS[ ---> e <--- ]="";}}this.currentItem.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();}this.fromOutside&&! ---> b <--- &&c.push(function(f){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}this.fromOutside&&!b&& ---> c <--- .push(function(f){this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){this._trigger("receive", ---> f <--- ,this._uiHash(this.fromOutside))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
parent()[0])&&! ---> b <--- ){c.push(function(f)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[0])&&!b){ ---> c <--- .push(function(f){this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){this._trigger("update", ---> f <--- ,this._uiHash());})

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);});}if(! ---> d <--- .ui.contains(this.element[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.currentItem[0])){ ---> b <--- ||c.push(function(f){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
currentItem[0])){b|| ---> c <--- .push(function(f){this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){this._trigger("remove", ---> f <--- ,this._uiHash());})

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
());});for( ---> e <--- =this.containers.length-1;e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.containers.length-1; ---> e <--- >=0;e--){if(d

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;e>=0; ---> e <--- --){if(d.ui.contains

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0;e--){if( ---> d <--- .ui.contains(this.containers[e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.contains(this.containers[ ---> e <--- ].element[0],this.currentItem

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.currentItem[0])&&! ---> b <--- ){c.push(function(f)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[0])&&!b){ ---> c <--- .push(function(f){returnfunction

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){returnfunction(g){ ---> f <--- ._trigger("receive",g,this._uiHash

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g){f._trigger("receive", ---> g <--- ,this._uiHash(this));}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(this,this.containers[ ---> e <--- ]));c.push(function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.containers[e])); ---> c <--- .push(function(f){returnfunction

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){returnfunction(g){ ---> f <--- ._trigger("update",g,this._uiHash

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g){f._trigger("update", ---> g <--- ,this._uiHash(this));}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(this,this.containers[ ---> e <--- ]));}}}for(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]));}}}for( ---> e <--- =this.containers.length-1;e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.containers.length-1; ---> e <--- >=0;e--){b||c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-1;e>=0; ---> e <--- --){b||c.push(function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;e>=0;e--){ ---> b <--- ||c.push(function(f){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0;e--){b|| ---> c <--- .push(function(f){returnfunction

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){returnfunction(g){ ---> f <--- ._trigger("deactivate",g,this._uiHash

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g){f._trigger("deactivate", ---> g <--- ,this._uiHash(this));}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(this,this.containers[ ---> e <--- ]));if(this.containers[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
));if(this.containers[ ---> e <--- ].containerCache.over){c.push

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[e].containerCache.over){ ---> c <--- .push(function(f){returnfunction

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){returnfunction(g){ ---> f <--- ._trigger("out",g,this._uiHash

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g){f._trigger("out", ---> g <--- ,this._uiHash(this));}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(this,this.containers[ ---> e <--- ]));this.containers[e]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e]));this.containers[ ---> e <--- ].containerCache.over=0;}}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;}}this._storedCursor&& ---> d <--- ("body").css("cursor",this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.cancelHelperRemoval){if(! ---> b <--- ){this._trigger("beforeStop",a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b){this._trigger("beforeStop", ---> a <--- ,this._uiHash());for(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._uiHash());for( ---> e <--- =0;e<c.length;e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
));for(e=0; ---> e <--- <c.length;e++){c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(e=0;e< ---> c <--- .length;e++){c[e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;e<c.length; ---> e <--- ++){c[e].call(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
<c.length;e++){ ---> c <--- [e].call(this,a)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;e++){c[ ---> e <--- ].call(this,a);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c[e].call(this, ---> a <--- );}this._trigger("stop",a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}this._trigger("stop", ---> a <--- ,this._uiHash());}return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
());}returnfalse;} ---> b <--- ||this._trigger("beforeStop",a,this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}b||this._trigger("beforeStop", ---> a <--- ,this._uiHash());this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.helper=null;if(! ---> b <--- ){for(e=0;e<

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!b){for( ---> e <--- =0;e<c.length;e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b){for(e=0; ---> e <--- <c.length;e++){c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{for(e=0;e< ---> c <--- .length;e++){c[e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;e<c.length; ---> e <--- ++){c[e].call(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
<c.length;e++){ ---> c <--- [e].call(this,a)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;e++){c[ ---> e <--- ].call(this,a);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c[e].call(this, ---> a <--- );}this._trigger("stop",a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}this._trigger("stop", ---> a <--- ,this._uiHash());}this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;},_trigger:function(){ ---> d <--- .Widget.prototype._trigger.apply(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_uiHash:function(a){var  ---> b <--- =a||this;return{helper:b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> a <--- ||this;return{helper:b.helper

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a||this;return{helper: ---> b <--- .helper,placeholder:b.placeholder||d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{helper:b.helper,placeholder: ---> b <--- .placeholder||d([]),position

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.helper,placeholder:b.placeholder|| ---> d <--- ([]),position:b.position

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||d([]),position: ---> b <--- .position,originalPosition:b.originalPosition,offset

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,position:b.position,originalPosition: ---> b <--- .originalPosition,offset:b.positionAbs,item

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,originalPosition:b.originalPosition,offset: ---> b <--- .positionAbs,item:b.currentItem,sender

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,offset:b.positionAbs,item: ---> b <--- .currentItem,sender:a?a.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,item:b.currentItem,sender: ---> a <--- ?a.element:null};}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.currentItem,sender:a? ---> a <--- .element:null};}});

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
element:null};}}); ---> d <--- .extend(d.ui.sortable,{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});d.extend( ---> d <--- .ui.sortable,{version:"1.8.5"}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(c){ ---> c <--- .widget("ui.accordion",{options:{active

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_create:function(){var  ---> a <--- =this,b=a.options;a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var a=this, ---> b <--- =a.options;a.running=0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this,b= ---> a <--- .options;a.running=0;a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,b=a.options; ---> a <--- .running=0;a.element.addClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;a.running=0; ---> a <--- .element.addClass("ui-accordion ui-widget ui-helper-reset").children(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("li").addClass("ui-accordion-li-fix"); ---> a <--- .headers=a.element.find(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-accordion-li-fix");a.headers= ---> a <--- .element.find(b.header).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.headers=a.element.find( ---> b <--- .header).addClass("ui-accordion-header ui-helper-reset ui-state-default ui-corner-all").bind

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("mouseenter.accordion",function(){ ---> b <--- .disabled||c(this).addClass(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){b.disabled|| ---> c <--- (this).addClass("ui-state-hover");}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("mouseleave.accordion",function(){ ---> b <--- .disabled||c(this).removeClass(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){b.disabled|| ---> c <--- (this).removeClass("ui-state-hover");}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("focus.accordion",function(){ ---> b <--- .disabled||c(this).addClass(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){b.disabled|| ---> c <--- (this).addClass("ui-state-focus");}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("blur.accordion",function(){ ---> b <--- .disabled||c(this).removeClass(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){b.disabled|| ---> c <--- (this).removeClass("ui-state-focus");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.removeClass("ui-state-focus");}); ---> a <--- .headers.next().addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom");if( ---> b <--- .navigation){var d=a.element

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(b.navigation){var  ---> d <--- =a.element.find("a").

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.navigation){var d= ---> a <--- .element.find("a").filter(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
element.find("a").filter( ---> b <--- .navigationFilter).eq(0);if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).eq(0);if( ---> d <--- .length){var f=d.closest

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(d.length){var  ---> f <--- =d.closest(".ui-accordion-header");a.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.length){var f= ---> d <--- .closest(".ui-accordion-header");a.active=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f=d.closest(".ui-accordion-header"); ---> a <--- .active=f.length?f:d

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
closest(".ui-accordion-header");a.active= ---> f <--- .length?f:d.closest(".ui-accordion-content"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.active=f.length? ---> f <--- :d.closest(".ui-accordion-content").prev(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.active=f.length?f: ---> d <--- .closest(".ui-accordion-content").prev();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
".ui-accordion-content").prev();}} ---> a <--- .active=a._findActive(a.active

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();}}a.active= ---> a <--- ._findActive(a.active||b.active

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}a.active=a._findActive( ---> a <--- .active||b.active).addClass(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a._findActive(a.active|| ---> b <--- .active).addClass("ui-state-default ui-state-active").toggleClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-state-default ui-state-active").toggleClass("ui-corner-all ui-corner-top"); ---> a <--- .active.next().addClass("ui-accordion-content-active"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
next().addClass("ui-accordion-content-active"); ---> a <--- ._createIcons();a.resize()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-accordion-content-active");a._createIcons(); ---> a <--- .resize();a.element.attr

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();a.resize(); ---> a <--- .element.attr("role","tablist");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
element.attr("role","tablist"); ---> a <--- .headers.attr("role","tab").

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("keydown.accordion",function(g){return ---> a <--- ._keydown(g);}).next

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(g){returna._keydown( ---> g <--- );}).next().attr

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).attr("role","tabpanel"); ---> a <--- .headers.not(a.active||""

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"tabpanel");a.headers.not( ---> a <--- .active||"").attr({"aria-expanded"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.next().hide(); ---> a <--- .active.length?a.active.attr

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();a.active.length? ---> a <--- .active.attr({"aria-expanded":"true",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:"true",tabIndex:0}): ---> a <--- .headers.eq(0).attr(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).attr("tabIndex",0); ---> c <--- .browser.safari||a.headers.find

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0);c.browser.safari|| ---> a <--- .headers.find("a").attr(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("tabIndex",-1); ---> b <--- .event&&a.headers.bind(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,-1);b.event&& ---> a <--- .headers.bind(b.event.split

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.event&&a.headers.bind( ---> b <--- .event.split(" ").join(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)+".accordion",function(g){ ---> a <--- ._clickHandler.call(a,g,this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g){a._clickHandler.call( ---> a <--- ,g,this);g.preventDefault(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{a._clickHandler.call(a, ---> g <--- ,this);g.preventDefault();

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
call(a,g,this); ---> g <--- .preventDefault();});},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_createIcons:function(){var  ---> a <--- =this.options;if(a.icons

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=this.options;if( ---> a <--- .icons){c("<span></span>").addClass

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
options;if(a.icons){ ---> c <--- ("<span></span>").addClass("ui-icon "+a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c("<span></span>").addClass("ui-icon "+ ---> a <--- .icons.header).prependTo(this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
active.children(".ui-icon").toggleClass( ---> a <--- .icons.header).toggleClass(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.icons.header).toggleClass( ---> a <--- .icons.headerSelected);this.element.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},destroy:function(){var  ---> a <--- =this.options;this.element.removeClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);this._destroyIcons();var  ---> b <--- =this.headers.next().css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).removeClass("ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-accordion-disabled ui-state-disabled");if( ---> a <--- .autoHeight||a.fillHeight){b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-helper-reset ui-widget-content ui-corner-bottom ui-accordion-content ui-accordion-content-active ui-accordion-disabled ui-state-disabled");if(a.autoHeight|| ---> a <--- .fillHeight){b.css("height",

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.autoHeight||a.fillHeight){ ---> b <--- .css("height","");}return

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css("height","");}return ---> c <--- .Widget.prototype.destroy.call(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_setOption:function(a,b){ ---> c <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_setOption.apply(this,arguments); ---> a <--- =="active"&&this.activate(b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;a=="active"&&this.activate( ---> b <--- );if(a=="icons"){this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.activate(b);if( ---> a <--- =="icons"){this._destroyIcons();

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"icons"){this._destroyIcons(); ---> b <--- &&this._createIcons();}if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._createIcons();}if( ---> a <--- =="disabled"){this.headers.add(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.headers.next())[ ---> b <--- ?"addClass":"removeClass"]("ui-accordion-disabled ui-state-disabled");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(!(this.options.disabled|| ---> a <--- .altKey||a.ctrlKey)){var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.disabled||a.altKey|| ---> a <--- .ctrlKey)){var b=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
altKey||a.ctrlKey)){var  ---> b <--- =c.ui.keyCode,d=this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey)){var b= ---> c <--- .ui.keyCode,d=this.headers

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=c.ui.keyCode, ---> d <--- =this.headers.length,f=this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=this.headers.length, ---> f <--- =this.headers.index(a.target

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=this.headers.index( ---> a <--- .target),g=false;switch(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
headers.index(a.target), ---> g <--- =false;switch(a.keyCode){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
target),g=false;switch( ---> a <--- .keyCode){caseb.RIGHT:case

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;switch(a.keyCode){case ---> b <--- .RIGHT:caseb.DOWN:g=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
keyCode){caseb.RIGHT:case ---> b <--- .DOWN:g=this.headers[(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b.RIGHT:caseb.DOWN: ---> g <--- =this.headers[(f+1)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
DOWN:g=this.headers[( ---> f <--- +1)%d];break;case

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.headers[(f+1)% ---> d <--- ];break;caseb.LEFT:case

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
1)%d];break;case ---> b <--- .LEFT:caseb.UP:g=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;caseb.LEFT:case ---> b <--- .UP:g=this.headers[(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b.LEFT:caseb.UP: ---> g <--- =this.headers[(f-1+

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
UP:g=this.headers[( ---> f <--- -1+d)%d];break

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.headers[(f-1+ ---> d <--- )%d];break;caseb.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[(f-1+d)% ---> d <--- ];break;caseb.SPACE:case

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d)%d];break;case ---> b <--- .SPACE:caseb.ENTER:this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;caseb.SPACE:case ---> b <--- .ENTER:this._clickHandler({target:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
ENTER:this._clickHandler({target: ---> a <--- .target},a.target);a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
({target:a.target}, ---> a <--- .target);a.preventDefault();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.target},a.target); ---> a <--- .preventDefault();}if(g)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a.preventDefault();}if( ---> g <--- ){c(a.target).attr

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
();}if(g){ ---> c <--- (a.target).attr("tabIndex",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(g){c( ---> a <--- .target).attr("tabIndex",-1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("tabIndex",-1); ---> c <--- (g).attr("tabIndex",0)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("tabIndex",-1);c( ---> g <--- ).attr("tabIndex",0);g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).attr("tabIndex",0); ---> g <--- .focus();returnfalse;}return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},resize:function(){var  ---> a <--- =this.options,b;if(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.options, ---> b <--- ;if(a.fillSpace){if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.options,b;if( ---> a <--- .fillSpace){if(c.browser.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.fillSpace){if( ---> c <--- .browser.msie){var d=this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(c.browser.msie){var  ---> d <--- =this.element.parent().css

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("overflow","hidden");} ---> b <--- =this.element.parent().height

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.parent().height(); ---> c <--- .browser.msie&&this.element.parent

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.parent().css("overflow", ---> d <--- );this.headers.each(function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.headers.each(function(){ ---> b <--- -=c(this).outerHeight(true)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(function(){b-= ---> c <--- (this).outerHeight(true);}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
().each(function(){ ---> c <--- (this).height(Math.max(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.height(Math.max(0, ---> b <--- -c(this).innerHeight()+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(Math.max(0,b- ---> c <--- (this).innerHeight()+c(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c(this).innerHeight()+ ---> c <--- (this).height()));

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,"auto");}else{if( ---> a <--- .autoHeight){b=0;this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(a.autoHeight){ ---> b <--- =0;this.headers.next()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
().each(function(){ ---> b <--- =Math.max(b,c(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(){b=Math.max( ---> b <--- ,c(this).height("")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=Math.max(b, ---> c <--- (this).height("").height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
());}).height( ---> b <--- );}}returnthis;},activate

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){this.options.active= ---> a <--- ;a=this._findActive(a)[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.options.active=a; ---> a <--- =this._findActive(a)[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a;a=this._findActive( ---> a <--- )[0];this._clickHandler({

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
];this._clickHandler({target: ---> a <--- },a);returnthis;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._clickHandler({target:a}, ---> a <--- );returnthis;},_findActive:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_findActive:function(a){return ---> a <--- ?typeofa==="number"?this.headers.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){returna?typeof ---> a <--- ==="number"?this.headers.filter(":eq("

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?this.headers.filter(":eq("+ ---> a <--- +")"):this.headers.not(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.not(this.headers.not( ---> a <--- )):a===false?c([

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.headers.not(a)): ---> a <--- ===false?c([]):this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a)):a===false? ---> c <--- ([]):this.headers.filter

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> d <--- =this.options;if(!d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d=this.options;if(! ---> d <--- .disabled){if(a.target)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(!d.disabled){if( ---> a <--- .target){a=c(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(a.target){ ---> a <--- =c(a.currentTarget||b);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.target){a= ---> c <--- (a.currentTarget||b);b=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.target){a=c( ---> a <--- .currentTarget||b);b=a[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{a=c(a.currentTarget|| ---> b <--- );b=a[0]===this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c(a.currentTarget||b); ---> b <--- =a[0]===this.active[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.currentTarget||b);b= ---> a <--- [0]===this.active[0]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
]===this.active[0]; ---> d <--- .active=d.collapsible&&b?false

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
active[0];d.active= ---> d <--- .collapsible&&b?false:this.headers

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.active=d.collapsible&& ---> b <--- ?false:this.headers.index(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?false:this.headers.index( ---> a <--- );if(!(this.running||

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!(this.running||! ---> d <--- .collapsible&&b)){this.active

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.running||!d.collapsible&& ---> b <--- )){this.active.removeClass("ui-state-active ui-corner-top"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).children(".ui-icon").removeClass( ---> d <--- .icons.headerSelected).addClass(d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.icons.headerSelected).addClass( ---> d <--- .icons.header);if(!b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.icons.header);if(! ---> b <--- ){a.removeClass("ui-state-default ui-corner-all").addClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
header);if(!b){ ---> a <--- .removeClass("ui-state-default ui-corner-all").addClass("ui-state-active ui-corner-top")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).children(".ui-icon").removeClass( ---> d <--- .icons.header).addClass(d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.icons.header).addClass( ---> d <--- .icons.headerSelected);a.next(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass(d.icons.headerSelected); ---> a <--- .next().addClass("ui-accordion-content-active");

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
().addClass("ui-accordion-content-active");} ---> h <--- =a.next();f=this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("ui-accordion-content-active");}h= ---> a <--- .next();f=this.active

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
}h=a.next(); ---> f <--- =this.active.next();g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.active.next(); ---> g <--- ={options:d,newHeader:b&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
next();g={options: ---> d <--- ,newHeader:b&&d.collapsible?c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
g={options:d,newHeader: ---> b <--- &&d.collapsible?c([])

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{options:d,newHeader:b&& ---> d <--- .collapsible?c([]):a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,newHeader:b&&d.collapsible? ---> c <--- ([]):a,oldHeader:this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.collapsible?c([]): ---> a <--- ,oldHeader:this.active,newContent:b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,oldHeader:this.active,newContent: ---> b <--- &&d.collapsible?c([])

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:this.active,newContent:b&& ---> d <--- .collapsible?c([]):h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,newContent:b&&d.collapsible? ---> c <--- ([]):h,oldContent:f

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.collapsible?c([]): ---> h <--- ,oldContent:f};d=this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
([]):h,oldContent: ---> f <--- };d=this.headers.index(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
):h,oldContent:f}; ---> d <--- =this.headers.index(this.active

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
])>this.headers.index( ---> a <--- [0]);this.active=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]);this.active= ---> b <--- ?c([]):a;this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]);this.active=b? ---> c <--- ([]):a;this._toggle

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=b?c([]): ---> a <--- ;this._toggle(h,f,g

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
]):a;this._toggle( ---> h <--- ,f,g,b,d);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:a;this._toggle(h, ---> f <--- ,g,b,d);}}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._toggle(h,f, ---> g <--- ,b,d);}}else{

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._toggle(h,f,g, ---> b <--- ,d);}}else{if(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(h,f,g,b, ---> d <--- );}}else{if(d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d);}}else{if( ---> d <--- .collapsible){this.active.removeClass(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).children(".ui-icon").removeClass( ---> d <--- .icons.headerSelected).addClass(d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.icons.headerSelected).addClass( ---> d <--- .icons.header);this.active.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
().addClass("ui-accordion-content-active");var  ---> f <--- =this.active.next(),g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.active.next(), ---> g <--- ={options:d,newHeader:c(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
next(),g={options: ---> d <--- ,newHeader:c([]),oldHeader

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
g={options:d,newHeader: ---> c <--- ([]),oldHeader:d.active

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:c([]),oldHeader: ---> d <--- .active,newContent:c([])

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,oldHeader:d.active,newContent: ---> c <--- ([]),oldContent:f},

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:c([]),oldContent: ---> f <--- },h=this.active=c(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
[]),oldContent:f}, ---> h <--- =this.active=c([])

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f},h=this.active= ---> c <--- ([]);this._toggle(h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
([]);this._toggle( ---> h <--- ,f,g);}}}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
]);this._toggle(h, ---> f <--- ,g);}}}},_toggle

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._toggle(h,f, ---> g <--- );}}}},_toggle:function

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,f,g){var  ---> h <--- =this,e=h.options;h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,g){var h=this, ---> e <--- =h.options;h.toShow=a

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){var h=this,e= ---> h <--- .options;h.toShow=a;h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,e=h.options; ---> h <--- .toShow=a;h.toHide=b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=h.options;h.toShow= ---> a <--- ;h.toHide=b;h.data

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;h.toShow=a; ---> h <--- .toHide=b;h.data=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.toShow=a;h.toHide= ---> b <--- ;h.data=d;var j=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=a;h.toHide=b; ---> h <--- .data=d;var j=function(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.toHide=b;h.data= ---> d <--- ;var j=function(){if(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
b;h.data=d;var  ---> j <--- =function(){if(h){

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
var j=function(){if( ---> h <--- ){returnh._completed.apply(h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(){if(h){return ---> h <--- ._completed.apply(h,arguments);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnh._completed.apply( ---> h <--- ,arguments);}};h._trigger

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(h,arguments);}}; ---> h <--- ._trigger("changestart",null,h.data

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;h._trigger("changestart",null, ---> h <--- .data);h.running=b.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"changestart",null,h.data); ---> h <--- .running=b.size()===0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
h.data);h.running= ---> b <--- .size()===0?a.size

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.size()===0? ---> a <--- .size():b.size()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
===0?a.size(): ---> b <--- .size();if(e.animated

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.size();if( ---> e <--- .animated){d={};d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(e.animated){ ---> d <--- ={};d=e.collapsible&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.animated){d={}; ---> d <--- =e.collapsible&&f?{toShow:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){d={};d= ---> e <--- .collapsible&&f?{toShow:c(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{};d=e.collapsible&& ---> f <--- ?{toShow:c([]),

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
e.collapsible&&f?{toShow: ---> c <--- ([]),toHide:b,complete

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:c([]),toHide: ---> b <--- ,complete:j,down:g,autoHeight

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
]),toHide:b,complete: ---> j <--- ,down:g,autoHeight:e.autoHeight

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:b,complete:j,down: ---> g <--- ,autoHeight:e.autoHeight||e.fillSpace

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:j,down:g,autoHeight: ---> e <--- .autoHeight||e.fillSpace}:{toShow

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:g,autoHeight:e.autoHeight|| ---> e <--- .fillSpace}:{toShow:a,toHide

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||e.fillSpace}:{toShow: ---> a <--- ,toHide:b,complete:j,down

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}:{toShow:a,toHide: ---> b <--- ,complete:j,down:g,autoHeight

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
:a,toHide:b,complete: ---> j <--- ,down:g,autoHeight:e.autoHeight

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:b,complete:j,down: ---> g <--- ,autoHeight:e.autoHeight||e.fillSpace

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:j,down:g,autoHeight: ---> e <--- .autoHeight||e.fillSpace};if(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:g,autoHeight:e.autoHeight|| ---> e <--- .fillSpace};if(!e.proxied

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
||e.fillSpace};if(! ---> e <--- .proxied){e.proxied=e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!e.proxied){ ---> e <--- .proxied=e.animated;}if(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.proxied){e.proxied= ---> e <--- .animated;}if(!e.proxiedDuration

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.animated;}if(! ---> e <--- .proxiedDuration){e.proxiedDuration=e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(!e.proxiedDuration){ ---> e <--- .proxiedDuration=e.duration;}e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.proxiedDuration){e.proxiedDuration= ---> e <--- .duration;}e.animated=c.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.proxiedDuration=e.duration;} ---> e <--- .animated=c.isFunction(e.proxied

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
e.duration;}e.animated= ---> c <--- .isFunction(e.proxied)?e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}e.animated=c.isFunction( ---> e <--- .proxied)?e.proxied(d)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c.isFunction(e.proxied)? ---> e <--- .proxied(d):e.proxied;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e.proxied)?e.proxied( ---> d <--- ):e.proxied;e.duration=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)?e.proxied(d): ---> e <--- .proxied;e.duration=c.isFunction

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
proxied(d):e.proxied; ---> e <--- .duration=c.isFunction(e.proxiedDuration

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:e.proxied;e.duration= ---> c <--- .isFunction(e.proxiedDuration)?e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;e.duration=c.isFunction( ---> e <--- .proxiedDuration)?e.proxiedDuration(d)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c.isFunction(e.proxiedDuration)? ---> e <--- .proxiedDuration(d):e.proxiedDuration;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e.proxiedDuration)?e.proxiedDuration( ---> d <--- ):e.proxiedDuration;f=c.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)?e.proxiedDuration(d): ---> e <--- .proxiedDuration;f=c.ui.accordion

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
proxiedDuration(d):e.proxiedDuration; ---> f <--- =c.ui.accordion.animations;var 

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d):e.proxiedDuration;f= ---> c <--- .ui.accordion.animations;var i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
c.ui.accordion.animations;var  ---> i <--- =e.duration,k=e.animated

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
ui.accordion.animations;var i= ---> e <--- .duration,k=e.animated;if

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
animations;var i=e.duration, ---> k <--- =e.animated;if(k&&!

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
var i=e.duration,k= ---> e <--- .animated;if(k&&!f[

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
,k=e.animated;if( ---> k <--- &&!f[k]&&!c.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e.animated;if(k&&! ---> f <--- [k]&&!c.easing[k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
animated;if(k&&!f[ ---> k <--- ]&&!c.easing[k])

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
k&&!f[k]&&! ---> c <--- .easing[k]){k="slide"

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
[k]&&!c.easing[ ---> k <--- ]){k="slide";}f[

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
!c.easing[k]){ ---> k <--- ="slide";}f[k]||(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
k]){k="slide";} ---> f <--- [k]||(f[k]=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
){k="slide";}f[ ---> k <--- ]||(f[k]=function(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"slide";}f[k]||( ---> f <--- [k]=function(l){this

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
}f[k]||(f[ ---> k <--- ]=function(l){this.slide

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
function(l){this.slide( ---> l <--- ,{easing:k,duration:i||

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
this.slide(l,{easing: ---> k <--- ,duration:i||700});}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
l,{easing:k,duration: ---> i <--- ||700});});f[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
i||700});}); ---> f <--- [k](d);}else{

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
700});});f[ ---> k <--- ](d);}else{if(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;});f[k]( ---> d <--- );}else{if(e.collapsible

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(d);}else{if( ---> e <--- .collapsible&&f){a.toggle(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(e.collapsible&& ---> f <--- ){a.toggle();}else

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e.collapsible&&f){ ---> a <--- .toggle();}else{b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.toggle();}else{ ---> b <--- .hide();a.show()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{b.hide(); ---> a <--- .show();}j(true)

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.show();} ---> j <--- (true);}b.prev()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);}j(true);} ---> b <--- .prev().attr({"aria-expanded":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-1}).blur(); ---> a <--- .prev().attr({"aria-expanded":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){this.running= ---> a <--- ?0:--this.running;if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.data);}}}); ---> c <--- .extend(c.ui.accordion,{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}}});c.extend( ---> c <--- .ui.accordion,{version:"1.8.5",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
slide:function(a,b){ ---> a <--- =c.extend({easing:"swing",

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){a= ---> c <--- .extend({easing:"swing",duration:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
easing:"swing",duration:300}, ---> a <--- ,b);if(a.toHide.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"swing",duration:300},a, ---> b <--- );if(a.toHide.size(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},a,b);if( ---> a <--- .toHide.size()){if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
toHide.size()){if( ---> a <--- .toShow.size()){var d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.toShow.size()){var  ---> d <--- =a.toShow.css("overflow"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size()){var d= ---> a <--- .toShow.css("overflow"),f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
a.toShow.css("overflow"), ---> f <--- =0,g={},h=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
css("overflow"),f=0, ---> g <--- ={},h={},e

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
f=0,g={}, ---> h <--- ={},e;b=a.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
={},h={}, ---> e <--- ;b=a.toShow;e=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},h={},e; ---> b <--- =a.toShow;e=b[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h={},e;b= ---> a <--- .toShow;e=b[0].

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e;b=a.toShow; ---> e <--- =b[0].style.width;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b=a.toShow;e= ---> b <--- [0].style.width;b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b[0].style.width; ---> b <--- .width(parseInt(b.parent()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.width;b.width(parseInt( ---> b <--- .parent().width(),10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width(),10)-parseInt( ---> b <--- .css("paddingLeft"),10)-parseInt

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("paddingLeft"),10)-parseInt( ---> b <--- .css("paddingRight"),10)-(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"paddingRight"),10)-(parseInt( ---> b <--- .css("borderLeftWidth"),10)||0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)-(parseInt( ---> b <--- .css("borderRightWidth"),10)||0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),10)||0)); ---> c <--- .each(["height","paddingTop","paddingBottom"]

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
],function(j,i){ ---> h <--- [i]="hide";j=(""

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(j,i){h[ ---> i <--- ]="hide";j=(""+c

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
){h[i]="hide"; ---> j <--- =(""+c.css(a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]="hide";j=(""+ ---> c <--- .css(a.toShow[0],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
j=(""+c.css( ---> a <--- .toShow[0],i)).

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
css(a.toShow[0], ---> i <--- )).match(/^([\d+-.]+)(.*)$/);g[

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
i)).match(/^([\d+-.]+)(.*)$/); ---> g <--- [i]={value:j[1

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
).match(/^([\d+-.]+)(.*)$/);g[ ---> i <--- ]={value:j[1],

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;g[i]={value: ---> j <--- [1],unit:j[2]

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
value:j[1],unit: ---> j <--- [2]||"px"};});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
2]||"px"};}); ---> a <--- .toShow.css({height:0,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:"hidden"}).show(); ---> a <--- .toHide.filter(":hidden").each(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
toHide.filter(":hidden").each( ---> a <--- .complete).end().filter(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
).filter(":visible").animate( ---> h <--- ,{step:function(j,i)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(j,i){if( ---> i <--- .prop=="height"){f=i.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
if(i.prop=="height"){ ---> f <--- =i.end-i.start===0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i.prop=="height"){f= ---> i <--- .end-i.start===0?0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"height"){f=i.end- ---> i <--- .start===0?0:(i.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i.start===0?0:( ---> i <--- .now-i.start)/(i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
0?0:(i.now- ---> i <--- .start)/(i.end-i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.now-i.start)/( ---> i <--- .end-i.start);}a

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.start)/(i.end- ---> i <--- .start);}a.toShow[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.end-i.start);} ---> a <--- .toShow[0].style[i.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
a.toShow[0].style[ ---> i <--- .prop]=f*g[i.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
].style[i.prop]= ---> f <--- *g[i.prop].value+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
style[i.prop]=f* ---> g <--- [i.prop].value+g[

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i.prop]=f*g[ ---> i <--- .prop].value+g[i.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g[i.prop].value+ ---> g <--- [i.prop].unit;},

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i.prop].value+g[ ---> i <--- .prop].unit;},duration:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
prop].unit;},duration: ---> a <--- .duration,easing:a.easing,complete

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,duration:a.duration,easing: ---> a <--- .easing,complete:function(){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,complete:function(){ ---> a <--- .autoHeight||a.toShow.css("height"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(){a.autoHeight|| ---> a <--- .toShow.css("height","");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
toShow.css("height",""); ---> a <--- .toShow.css({width:e,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a.toShow.css({width: ---> e <--- ,overflow:d});a.complete

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
css({width:e,overflow: ---> d <--- });a.complete();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:e,overflow:d}); ---> a <--- .complete();}});}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}});}else{ ---> a <--- .toHide.animate({height:"hide",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
paddingTop:"hide",paddingBottom:"hide"}, ---> a <--- );}}else{a.toShow.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},a);}}else{ ---> a <--- .toShow.animate({height:"show",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
paddingTop:"show",paddingBottom:"show"}, ---> a <--- );}},bounceslide:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){this.slide( ---> a <--- ,{easing:a.down?"easeOutBounce":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.slide(a,{easing: ---> a <--- .down?"easeOutBounce":"swing",duration:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.down?"easeOutBounce":"swing",duration: ---> a <--- .down?1000:200});}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(e){ ---> e <--- .widget("ui.autocomplete",{options:{appendTo

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_create:function(){var  ---> a <--- =this,b=this.element[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var a=this, ---> b <--- =this.element[0].ownerDocument;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(c){if(! ---> a <--- .options.disabled){var d=e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!a.options.disabled){var  ---> d <--- =e.ui.keyCode;switch(c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.disabled){var d= ---> e <--- .ui.keyCode;switch(c.keyCode

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.ui.keyCode;switch( ---> c <--- .keyCode){cased.PAGE_UP:a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;switch(c.keyCode){case ---> d <--- .PAGE_UP:a._move("previousPage",c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.keyCode){cased.PAGE_UP: ---> a <--- ._move("previousPage",c);break;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.PAGE_UP:a._move("previousPage", ---> c <--- );break;cased.PAGE_DOWN:a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("previousPage",c);break;case ---> d <--- .PAGE_DOWN:a._move("nextPage",c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;cased.PAGE_DOWN: ---> a <--- ._move("nextPage",c);break;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.PAGE_DOWN:a._move("nextPage", ---> c <--- );break;cased.UP:a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("nextPage",c);break;case ---> d <--- .UP:a._move("previous",c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;cased.UP: ---> a <--- ._move("previous",c);c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.UP:a._move("previous", ---> c <--- );c.preventDefault();break;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a._move("previous",c); ---> c <--- .preventDefault();break;cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.preventDefault();break;case ---> d <--- .DOWN:a._move("next",c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;cased.DOWN: ---> a <--- ._move("next",c);c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.DOWN:a._move("next", ---> c <--- );c.preventDefault();break;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a._move("next",c); ---> c <--- .preventDefault();break;cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.preventDefault();break;case ---> d <--- .ENTER:cased.NUMPAD_ENTER:a.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;cased.ENTER:case ---> d <--- .NUMPAD_ENTER:a.menu.element.is

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ENTER:cased.NUMPAD_ENTER: ---> a <--- .menu.element.is(":visible")&&

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
menu.element.is(":visible")&& ---> c <--- .preventDefault();cased.TAB:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&c.preventDefault();case ---> d <--- .TAB:if(!a.menu.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;cased.TAB:if(! ---> a <--- .menu.active){return;}a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.menu.active){return;} ---> a <--- .menu.select(c);break;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
return;}a.menu.select( ---> c <--- );break;cased.ESCAPE:a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.select(c);break;case ---> d <--- .ESCAPE:a.element.val(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;cased.ESCAPE: ---> a <--- .element.val(a.term);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ESCAPE:a.element.val( ---> a <--- .term);a.close(c)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
element.val(a.term); ---> a <--- .close(c);break;default:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.term);a.close( ---> c <--- );break;default:clearTimeout(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c);break;default:clearTimeout( ---> a <--- .searching);a.searching=setTimeout(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
default:clearTimeout(a.searching); ---> a <--- .searching=setTimeout(function(){if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=setTimeout(function(){if( ---> a <--- .term!=a.element.val()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(){if(a.term!= ---> a <--- .element.val()){a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.element.val()){ ---> a <--- .selectedItem=null;a.search(null

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)){a.selectedItem=null; ---> a <--- .search(null,c);}}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=null;a.search(null, ---> c <--- );}},a.options.delay

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(null,c);}}, ---> a <--- .options.delay);break;}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"focus.autocomplete",function(){if(! ---> a <--- .options.disabled){a.selectedItem=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(!a.options.disabled){ ---> a <--- .selectedItem=null;a.previous=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
disabled){a.selectedItem=null; ---> a <--- .previous=a.element.val()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedItem=null;a.previous= ---> a <--- .element.val();}})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(c){if(! ---> a <--- .options.disabled){clearTimeout(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.disabled){clearTimeout( ---> a <--- .searching);a.closing=setTimeout(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){clearTimeout(a.searching); ---> a <--- .closing=setTimeout(function(){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.closing=setTimeout(function(){ ---> a <--- .close(c);a._change(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){a.close( ---> c <--- );a._change(c);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){a.close(c); ---> a <--- ._change(c);},150)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
close(c);a._change( ---> c <--- );},150);}})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.response=function(){return ---> a <--- ._response.apply(a,arguments);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returna._response.apply( ---> a <--- ,arguments);};this.menu=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
arguments);};this.menu= ---> e <--- ("<ul></ul>").addClass("ui-autocomplete").appendTo

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-autocomplete").appendTo( ---> e <--- (this.options.appendTo||"body",b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.options.appendTo||"body", ---> b <--- )[0]).mousedown(function(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.mousedown(function(c){var  ---> d <--- =a.menu.element[0];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(c){var d= ---> a <--- .menu.element[0];c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.menu.element[0]; ---> c <--- .target===d&&setTimeout(function()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0];c.target=== ---> d <--- &&setTimeout(function(){e(document

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
===d&&setTimeout(function(){ ---> e <--- (document).one("mousedown",function(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
one("mousedown",function(f){ ---> f <--- .target!==a.element[0]&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(f){f.target!== ---> a <--- .element[0]&&f.target!==

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
target!==a.element[0]&& ---> f <--- .target!==d&&!e.ui.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
element[0]&&f.target!== ---> d <--- &&!e.ui.contains(d,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]&&f.target!==d&&! ---> e <--- .ui.contains(d,f.target

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d&&!e.ui.contains( ---> d <--- ,f.target)&&a.close(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
!e.ui.contains(d, ---> f <--- .target)&&a.close();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
contains(d,f.target)&& ---> a <--- .close();});},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;setTimeout(function(){clearTimeout( ---> a <--- .closing);},13);}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
focus:function(c,d){ ---> d <--- =d.item.data("item.autocomplete");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(c,d){d= ---> d <--- .item.data("item.autocomplete");false!==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
item.data("item.autocomplete");false!== ---> a <--- ._trigger("focus",null,{item:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("focus",null,{item: ---> d <--- })&&/^key/.test(c.originalEvent

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:d})&&/^key/.test( ---> c <--- .originalEvent.type)&&a.element.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
test(c.originalEvent.type)&& ---> a <--- .element.val(d.value);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
type)&&a.element.val( ---> d <--- .value);},selected:function(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
selected:function(c,d){ ---> d <--- =d.item.data("item.autocomplete");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(c,d){d= ---> d <--- .item.data("item.autocomplete");var f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.item.data("item.autocomplete");var  ---> f <--- =a.previous;if(a.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.data("item.autocomplete");var f= ---> a <--- .previous;if(a.element[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=a.previous;if( ---> a <--- .element[0]!==b.activeElement)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.element[0]!== ---> b <--- .activeElement){a.element.focus(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]!==b.activeElement){ ---> a <--- .element.focus();a.previous

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.element.focus(); ---> a <--- .previous=f;}if(false!==

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.focus();a.previous= ---> f <--- ;}if(false!==a._trigger(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
previous=f;}if(false!== ---> a <--- ._trigger("select",c,{item:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(false!==a._trigger("select", ---> c <--- ,{item:d})){a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("select",c,{item: ---> d <--- })){a.term=d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,{item:d})){ ---> a <--- .term=d.value;a.element

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d})){a.term= ---> d <--- .value;a.element.val(d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.term=d.value; ---> a <--- .element.val(d.value);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.value;a.element.val( ---> d <--- .value);}a.close(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.val(d.value);} ---> a <--- .close(c);a.selectedItem=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.value);}a.close( ---> c <--- );a.selectedItem=d;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}a.close(c); ---> a <--- .selectedItem=d;},blur:function

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
close(c);a.selectedItem= ---> d <--- ;},blur:function(){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;},blur:function(){ ---> a <--- .menu.element.is(":visible")&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
menu.element.is(":visible")&& ---> a <--- .element.val()!==a.term

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.element.val()!== ---> a <--- .term&&a.element.val(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.val()!==a.term&& ---> a <--- .element.val(a.term);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.term&&a.element.val( ---> a <--- .term);}}).zIndex(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
hide().data("menu"); ---> e <--- .fn.bgiframe&&this.menu.element

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.menu.element.remove(); ---> e <--- .Widget.prototype.destroy.call(this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_setOption:function(a,b){ ---> e <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_setOption.apply(this,arguments); ---> a <--- ==="source"&&this._initSource();if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&this._initSource();if( ---> a <--- ==="appendTo"){this.menu.element.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.menu.element.appendTo( ---> e <--- (b||"body",this.element[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.menu.element.appendTo(e( ---> b <--- ||"body",this.element[0].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_initSource:function(){var  ---> a <--- =this,b,c;if(e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var a=this, ---> b <--- ,c;if(e.isArray(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this,b, ---> c <--- ;if(e.isArray(this.options

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,b,c;if( ---> e <--- .isArray(this.options.source))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.options.source)){ ---> b <--- =this.options.source;this.source

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
source=function(d,f){ ---> f <--- (e.ui.autocomplete.filter(b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(d,f){f( ---> e <--- .ui.autocomplete.filter(b,d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(e.ui.autocomplete.filter( ---> b <--- ,d.term));};}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.autocomplete.filter(b, ---> d <--- .term));};}else{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.source==="string"){ ---> c <--- =this.options.source;this.source

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
source=function(d,f){ ---> a <--- .xhr&&a.xhr.abort()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d,f){a.xhr&& ---> a <--- .xhr.abort();a.xhr

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.xhr.abort(); ---> a <--- .xhr=e.getJSON(c,d

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.abort();a.xhr= ---> e <--- .getJSON(c,d,function(g

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.xhr=e.getJSON( ---> c <--- ,d,function(g,i,h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.xhr=e.getJSON(c, ---> d <--- ,function(g,i,h){

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
function(g,i,h){ ---> h <--- ===a.xhr&&f(g);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g,i,h){h=== ---> a <--- .xhr&&f(g);a.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
h){h===a.xhr&& ---> f <--- (g);a.xhr=null;

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{h===a.xhr&&f( ---> g <--- );a.xhr=null;})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.xhr&&f(g); ---> a <--- .xhr=null;});};

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
search:function(a,b){ ---> a <--- =a!=null?a:this.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){a= ---> a <--- !=null?a:this.element.val

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a=a!=null? ---> a <--- :this.element.val();this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.val();if( ---> a <--- .length<this.options.minLength){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.minLength){returnthis.close( ---> b <--- );}clearTimeout(this.closing);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!==false){returnthis._search( ---> a <--- );}},_search:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);this.source({term: ---> a <--- },this.response);},_response

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_response:function(a){if( ---> a <--- .length){a=this._normalize(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(a.length){ ---> a <--- =this._normalize(a);this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
length){a=this._normalize( ---> a <--- );this._suggest(a);this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_normalize(a);this._suggest( ---> a <--- );this._trigger("open");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this._trigger("close", ---> a <--- );this.menu.element.hide(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
()&&this._trigger("change", ---> a <--- ,{item:this.selectedItem});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_normalize:function(a){if( ---> a <--- .length&&a[0].label&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){if(a.length&& ---> a <--- [0].label&&a[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
length&&a[0].label&& ---> a <--- [0].value){returna;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a[0].value){return ---> a <--- ;}returne.map(a,function

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.value){returna;}return ---> e <--- .map(a,function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returna;}returne.map( ---> a <--- ,function(b){if(typeofb

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(b){if(typeof ---> b <--- ==="string"){return{label:b,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b==="string"){return{label: ---> b <--- ,value:b};}returne.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{return{label:b,value: ---> b <--- };}returne.extend({label

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b,value:b};}return ---> e <--- .extend({label:b.label||

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}returne.extend({label: ---> b <--- .label||b.value,value:b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
extend({label:b.label|| ---> b <--- .value,value:b.value||b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.label||b.value,value: ---> b <--- .value||b.label},b)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.value,value:b.value|| ---> b <--- .label},b);});

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.value||b.label}, ---> b <--- );});},_suggest:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_suggest:function(a){var  ---> b <--- =this.menu.element.empty()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
element.zIndex()+1), ---> c <--- ;this._renderMenu(b,a);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
1),c;this._renderMenu( ---> b <--- ,a);this.menu.deactivate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c;this._renderMenu(b, ---> a <--- );this.menu.deactivate();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.show().position( ---> e <--- .extend({of:this.element}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,this.options.position)); ---> a <--- =b.width("").outerWidth(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.position));a= ---> b <--- .width("").outerWidth();

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
width("").outerWidth(); ---> c <--- =this.element.outerWidth();b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.element.outerWidth(); ---> b <--- .outerWidth(Math.max(a,c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.outerWidth(Math.max( ---> a <--- ,c));},_renderMenu:function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerWidth(Math.max(a, ---> c <--- ));},_renderMenu:function(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =this;e.each(b,function

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var c=this; ---> e <--- .each(b,function(d,f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var c=this;e.each( ---> b <--- ,function(d,f){c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b,function(d,f){ ---> c <--- ._renderItem(a,f);})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d,f){c._renderItem( ---> a <--- ,f);});},_renderItem

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f){c._renderItem(a, ---> f <--- );});},_renderItem:function

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){return ---> e <--- ("<li></li>").data("item.autocomplete",b)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e("<li></li>").data("item.autocomplete", ---> b <--- ).append(e("<a></a>").text

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
data("item.autocomplete",b).append( ---> e <--- ("<a></a>").text(b.label)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
append(e("<a></a>").text( ---> b <--- .label)).appendTo(a);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.label)).appendTo( ---> a <--- );},_move:function(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.first()&&/^previous/.test( ---> a <--- )||this.menu.last()&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.last()&&/^next/.test( ---> a <--- )){this.element.val(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{this.menu[ ---> a <--- ](b);}}else{this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
else{this.menu[a]( ---> b <--- );}}else{this.search(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{this.search(null, ---> b <--- );}},widget:function()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.menu.element;}}); ---> e <--- .extend(e.ui.autocomplete,{

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});e.extend( ---> e <--- .ui.autocomplete,{escapeRegex:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{escapeRegex:function(a){return ---> a <--- .replace(/[-[\]{}()*+?.,\\^$|#\s]/g,"\\$&");},

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =new RegExp(e.ui.autocomplete.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b){var c=new RegExp( ---> e <--- .ui.autocomplete.escapeRegex(b),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(e.ui.autocomplete.escapeRegex( ---> b <--- ),"i");returne.grep(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
escapeRegex(b),"i");return ---> e <--- .grep(a,function(d){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,"i");returne.grep( ---> a <--- ,function(d){returnc.test

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,function(d){return ---> c <--- .test(d.label||d.value

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d){returnc.test( ---> d <--- .label||d.value||d);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
returnc.test(d.label|| ---> d <--- .value||d);});}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.label||d.value|| ---> d <--- );});}});}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(e){ ---> e <--- .widget("ui.menu",{_create:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,{_create:function(){var  ---> a <--- =this;this.element.addClass("ui-menu ui-widget ui-widget-content ui-corner-all"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
click(function(b){if( ---> e <--- (b.target).closest(".ui-menu-item a")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(b){if(e( ---> b <--- .target).closest(".ui-menu-item a").length

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.closest(".ui-menu-item a").length){ ---> b <--- .preventDefault();a.select(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
length){b.preventDefault(); ---> a <--- .select(b);}});

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.preventDefault();a.select( ---> b <--- );}});this.refresh(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},refresh:function(){var  ---> a <--- =this;this.element.children("li:not(.ui-menu-item):has(a)"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).mouseenter(function(b){ ---> a <--- .activate(b,e(this).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(b){a.activate( ---> b <--- ,e(this).parent())

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a.activate(b, ---> e <--- (this).parent());}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}).mouseleave(function(){ ---> a <--- .deactivate();});},

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.hasScroll()){var  ---> c <--- =b.offset().top-this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasScroll()){var c= ---> b <--- .offset().top-this.element

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.offset().top, ---> d <--- =this.element.attr("scrollTop"),

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element.attr("scrollTop"), ---> f <--- =this.element.height();if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.height();if( ---> c <--- <0){this.element.attr(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.element.attr("scrollTop", ---> d <--- +c);}else{c>=f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.attr("scrollTop",d+ ---> c <--- );}else{c>=f&&this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,d+c);}else{ ---> c <--- >=f&&this.element.attr("scrollTop"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
+c);}else{c>= ---> f <--- &&this.element.attr("scrollTop",d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&this.element.attr("scrollTop", ---> d <--- +c-f+b.height()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.attr("scrollTop",d+ ---> c <--- -f+b.height());

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("scrollTop",d+c- ---> f <--- +b.height());}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("scrollTop",d+c-f+ ---> b <--- .height());}}this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
));}}this.active= ---> b <--- .eq(0).children("a")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();this._trigger("focus", ---> a <--- ,{item:b});},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_trigger("focus",a,{item: ---> b <--- });},deactivate:function()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.move("next",".ui-menu-item:first", ---> a <--- );},previous:function(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.move("prev",".ui-menu-item:last", ---> a <--- );},first:function(){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(this.active){ ---> a <--- =this.active[a+"All"](

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
active){a=this.active[ ---> a <--- +"All"](".ui-menu-item").eq(0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(".ui-menu-item").eq(0); ---> a <--- .length?this.activate(c,a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.length?this.activate( ---> c <--- ,a):this.activate(c,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.length?this.activate(c, ---> a <--- ):this.activate(c,this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c,a):this.activate( ---> c <--- ,this.element.children(b))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,this.element.children( ---> b <--- ));}else{this.activate(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{this.activate( ---> c <--- ,this.element.children(b))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,this.element.children( ---> b <--- ));}},nextPage:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
last()){this.activate( ---> a <--- ,this.element.children(":first"))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(":first"));}else{var  ---> b <--- =this.active.offset().top

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.active.offset().top, ---> c <--- =this.element.height(),d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.element.height(), ---> d <--- =this.element.children("li").

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
).filter(function(){var  ---> f <--- =e(this).offset().

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
filter(function(){var f= ---> e <--- (this).offset().top-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this).offset().top- ---> b <--- -c+e(this).height(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset().top-b- ---> c <--- +e(this).height();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
().top-b-c+ ---> e <--- (this).height();returnf

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).height();return ---> f <--- <10&&f>-10;})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
height();returnf<10&& ---> f <--- >-10;});d.length

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f>-10;}); ---> d <--- .length||(d=this.element.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;});d.length||( ---> d <--- =this.element.children(":last"))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(":last"));this.activate( ---> a <--- ,d);}}else{this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
));this.activate(a, ---> d <--- );}}else{this.activate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}else{this.activate( ---> a <--- ,this.element.children(!this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
first()){this.activate( ---> a <--- ,this.element.children(":last"))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(":last"));}else{var  ---> b <--- =this.active.offset().top

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.active.offset().top, ---> c <--- =this.element.height();result

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).filter(function(){var  ---> d <--- =e(this).offset().

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
filter(function(){var d= ---> e <--- (this).offset().top-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this).offset().top- ---> b <--- +c-e(this).height(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset().top-b+ ---> c <--- -e(this).height();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
().top-b+c- ---> e <--- (this).height();returnd

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).height();return ---> d <--- <10&&d>-10;})

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
height();returnd<10&& ---> d <--- >-10;});result.length

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(":first"));this.activate( ---> a <--- ,result);}}else{this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}else{this.activate( ---> a <--- ,this.element.children(!this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){this._trigger("selected", ---> a <--- ,{item:this.active});

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
);(function(a){var  ---> g <--- ,i=function(b){a(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(a){var g, ---> i <--- =function(b){a(":ui-button",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g,i=function(b){ ---> a <--- (":ui-button",b.target.form).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(b){a(":ui-button", ---> b <--- .target.form).each(function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> c <--- =a(this).data("button")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var c= ---> a <--- (this).data("button");setTimeout

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"button");setTimeout(function(){ ---> c <--- .refresh();},1);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,1);});}, ---> h <--- =function(b){var c=b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=function(b){var  ---> c <--- =b.name,d=b.form

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(b){var c= ---> b <--- .name,d=b.form,e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=b.name, ---> d <--- =b.form,e=a([

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var c=b.name,d= ---> b <--- .form,e=a([])

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.name,d=b.form, ---> e <--- =a([]);if(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=b.form,e= ---> a <--- ([]);if(c){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=a([]);if( ---> c <--- ){e=d?a(d)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[]);if(c){ ---> e <--- =d?a(d).find(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(c){e= ---> d <--- ?a(d).find("[name='"+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c){e=d? ---> a <--- (d).find("[name='"+c+

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c){e=d?a( ---> d <--- ).find("[name='"+c+"']")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a(d).find("[name='"+ ---> c <--- +"']"):a("[name='"+c+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
find("[name='"+c+"']"): ---> a <--- ("[name='"+c+"']",b.ownerDocument

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c+"']"):a("[name='"+ ---> c <--- +"']",b.ownerDocument).filter(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:a("[name='"+c+"']", ---> b <--- .ownerDocument).filter(function(){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.form;});}return ---> e <--- ;};a.widget("ui.button",{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
});}returne;}; ---> a <--- .widget("ui.button",{options:{disabled

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
unbind("reset.button").bind("reset.button", ---> i <--- );if(typeofthis.options.disabled

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.buttonElement.attr("title");var  ---> b <--- =this,c=this.options,d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("title");var b=this, ---> c <--- =this.options,d=this.type

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,c=this.options, ---> d <--- =this.type==="checkbox"||this.type

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
==="checkbox"||this.type==="radio", ---> e <--- ="ui-state-hover"+(!d?" ui-state-active":""

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
==="radio",e="ui-state-hover"+(! ---> d <--- ?" ui-state-active":"");if(c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d?" ui-state-active":"");if( ---> c <--- .label===null){c.label=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c.label===null){ ---> c <--- .label=this.buttonElement.html()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.is(":disabled")){ ---> c <--- .disabled=true;}this.buttonElement.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"mouseenter.button",function(){if(! ---> c <--- .disabled){a(this).addClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(!c.disabled){ ---> a <--- (this).addClass("ui-state-hover");this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-state-hover");this=== ---> g <--- &&a(this).addClass("ui-state-active")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-state-hover");this===g&& ---> a <--- (this).addClass("ui-state-active");}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("mouseleave.button",function(){ ---> c <--- .disabled||a(this).removeClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){c.disabled|| ---> a <--- (this).removeClass(e);}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
disabled||a(this).removeClass( ---> e <--- );}).bind("focus.button",function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("focus.button",function(){ ---> a <--- (this).addClass("ui-state-focus");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("blur.button",function(){ ---> a <--- (this).removeClass("ui-state-focus");}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.removeClass("ui-state-focus");}); ---> d <--- &&this.element.bind("change.button",function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("change.button",function(){ ---> b <--- .refresh();});if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("click.button",function(){if( ---> c <--- .disabled){returnfalse;}a(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.disabled){returnfalse;} ---> a <--- (this).toggleClass("ui-state-active");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).toggleClass("ui-state-active"); ---> b <--- .buttonElement.attr("aria-pressed",b.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.buttonElement.attr("aria-pressed", ---> b <--- .element[0].checked);}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("click.button",function(){if( ---> c <--- .disabled){returnfalse;}a(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.disabled){returnfalse;} ---> a <--- (this).addClass("ui-state-active");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).addClass("ui-state-active"); ---> b <--- .buttonElement.attr("aria-pressed",true);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("aria-pressed",true);var  ---> f <--- =b.element[0];h(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("aria-pressed",true);var f= ---> b <--- .element[0];h(f)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
f=b.element[0]; ---> h <--- (f).not(f).map

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.element[0];h( ---> f <--- ).not(f).map(function

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
];h(f).not( ---> f <--- ).map(function(){returna

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).map(function(){return ---> a <--- (this).button("widget")[0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("mousedown.button",function(){if( ---> c <--- .disabled){returnfalse;}a(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.disabled){returnfalse;} ---> a <--- (this).addClass("ui-state-active");g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).addClass("ui-state-active"); ---> g <--- =this;a(document).one(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-state-active");g=this; ---> a <--- (document).one("mouseup",function(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.one("mouseup",function(){ ---> g <--- =null;});}).bind

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("mouseup.button",function(){if( ---> c <--- .disabled){returnfalse;}a(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.disabled){returnfalse;} ---> a <--- (this).removeClass("ui-state-active");}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"keydown.button",function(f){if( ---> c <--- .disabled){returnfalse;}if(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
disabled){returnfalse;}if( ---> f <--- .keyCode==a.ui.keyCode.SPACE

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
false;}if(f.keyCode== ---> a <--- .ui.keyCode.SPACE||f.keyCode

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
==a.ui.keyCode.SPACE|| ---> f <--- .keyCode==a.ui.keyCode.ENTER

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.keyCode.SPACE||f.keyCode== ---> a <--- .ui.keyCode.ENTER){a(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ui.keyCode.ENTER){ ---> a <--- (this).addClass("ui-state-active");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("keyup.button",function(){ ---> a <--- (this).removeClass("ui-state-active");}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
buttonElement.keyup(function(f){ ---> f <--- .keyCode===a.ui.keyCode.SPACE

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(f){f.keyCode=== ---> a <--- .ui.keyCode.SPACE&&a(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
===a.ui.keyCode.SPACE&& ---> a <--- (this).click();})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}this._setOption("disabled", ---> c <--- .disabled);},_determineButtonType:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.addClass("ui-helper-hidden-accessible");var  ---> b <--- =this.element.is(":checked");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element.is(":checked"); ---> b <--- &&this.buttonElement.addClass("ui-state-active");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.buttonElement.attr("aria-pressed", ---> b <--- );}else{this.buttonElement=this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.buttonElement.removeAttr("title"); ---> a <--- .Widget.prototype.destroy.call(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_setOption:function(b,c){ ---> a <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(this,arguments);if( ---> b <--- ==="disabled"){c?this.element.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(b==="disabled"){ ---> c <--- ?this.element.attr("disabled",true

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},refresh:function(){var  ---> b <--- =this.element.is(":disabled");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element.is(":disabled"); ---> b <--- !==this.options.disabled&&this._setOption

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled&&this._setOption("disabled", ---> b <--- );if(this.type==="radio")

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.type==="radio"){ ---> h <--- (this.element[0]).each

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]).each(function(){ ---> a <--- (this).is(":checked")?a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).is(":checked")? ---> a <--- (this).button("widget").addClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).attr("aria-pressed",true): ---> a <--- (this).button("widget").removeClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
options.label);}else{var  ---> b <--- =this.buttonElement.removeClass("ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only"),

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.buttonElement.removeClass("ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only"), ---> c <--- =a("<span></span>").addClass("ui-button-text")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
buttonElement.removeClass("ui-button-icons-only ui-button-icon-only ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary ui-button-text-only"),c= ---> a <--- ("<span></span>").addClass("ui-button-text").html

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.label).appendTo( ---> b <--- .empty()).text(),

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
empty()).text(), ---> d <--- =this.options.icons,e=d

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=this.options.icons, ---> e <--- =d.primary&&d.secondary;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.options.icons,e= ---> d <--- .primary&&d.secondary;if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.icons,e=d.primary&& ---> d <--- .secondary;if(d.primary||d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.primary&&d.secondary;if( ---> d <--- .primary||d.secondary){b.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.secondary;if(d.primary|| ---> d <--- .secondary){b.addClass("ui-button-text-icon"+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d.primary||d.secondary){ ---> b <--- .addClass("ui-button-text-icon"+(e?"s":

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){b.addClass("ui-button-text-icon"+( ---> e <--- ?"s":d.primary?"-primary":"-secondary"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-button-text-icon"+(e?"s": ---> d <--- .primary?"-primary":"-secondary"));d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.primary?"-primary":"-secondary")); ---> d <--- .primary&&b.prepend("<span class='ui-button-icon-primary ui-icon "+d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:"-secondary"));d.primary&& ---> b <--- .prepend("<span class='ui-button-icon-primary ui-icon "+d.primary+"'></span>"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.primary&&b.prepend("<span class='ui-button-icon-primary ui-icon "+ ---> d <--- .primary+"'></span>");d.secondary&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"<span class='ui-button-icon-primary ui-icon "+d.primary+"'></span>"); ---> d <--- .secondary&&b.append("<span class='ui-button-icon-secondary ui-icon "+d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
primary+"'></span>");d.secondary&& ---> b <--- .append("<span class='ui-button-icon-secondary ui-icon "+d.secondary+"'></span>"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.secondary&&b.append("<span class='ui-button-icon-secondary ui-icon "+ ---> d <--- .secondary+"'></span>");if(!this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(!this.options.text){ ---> b <--- .addClass(e?"ui-button-icons-only":"ui-button-icon-only").

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
options.text){b.addClass( ---> e <--- ?"ui-button-icons-only":"ui-button-icon-only").removeClass("ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
removeClass("ui-button-text-icons ui-button-text-icon-primary ui-button-text-icon-secondary");this.hasTitle|| ---> b <--- .attr("title",c);}}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasTitle||b.attr("title", ---> c <--- );}}else{b.addClass(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"title",c);}}else{ ---> b <--- .addClass("ui-button-text-only");}}}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-button-text-only");}}}}); ---> a <--- .widget("ui.buttonset",{_create:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_setOption:function(b,c){ ---> b <--- ==="disabled"&&this.buttons.button("option"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&this.buttons.button("option", ---> b <--- ,c);a.Widget.prototype.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.buttons.button("option",b, ---> c <--- );a.Widget.prototype._setOption.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
button("option",b,c); ---> a <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).map(function(){return ---> a <--- (this).button("widget")[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
buttons.map(function(){return ---> a <--- (this).button("widget")[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
end().button("destroy"); ---> a <--- .Widget.prototype.destroy.call(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;(function(c,j){ ---> c <--- .widget("ui.dialog",{options:{autoOpen

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,using:function(a){var  ---> b <--- =c(this).css(a)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> c <--- (this).css(a).offset

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b=c(this).css( ---> a <--- ).offset().top;b<

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a).offset().top; ---> b <--- <0&&c(this).css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
().top;b<0&& ---> c <--- (this).css("top",a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c(this).css("top", ---> a <--- .top-b);}},resizable

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("top",a.top- ---> b <--- );}},resizable:true,show

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options.title||this.originalTitle;var  ---> a <--- =this,b=a.options,d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.originalTitle;var a=this, ---> b <--- =a.options,d=b.title

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
originalTitle;var a=this,b= ---> a <--- .options,d=b.title||"&#160;"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,b=a.options, ---> d <--- =b.title||"&#160;",f=c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b=a.options,d= ---> b <--- .title||"&#160;",f=c.ui

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=b.title||"&#160;", ---> f <--- =c.ui.dialog.getTitleId(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.title||"&#160;",f= ---> c <--- .ui.dialog.getTitleId(a.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.ui.dialog.getTitleId( ---> a <--- .element),g=(a.uiDialog

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
dialog.getTitleId(a.element), ---> g <--- =(a.uiDialog=c("<div></div>")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.element),g=( ---> a <--- .uiDialog=c("<div></div>")).appendTo

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),g=(a.uiDialog= ---> c <--- ("<div></div>")).appendTo(document.body

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.hide().addClass("ui-dialog ui-widget ui-widget-content ui-corner-all "+ ---> b <--- .dialogClass).css({zIndex:b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.dialogClass).css({zIndex: ---> b <--- .zIndex}).attr("tabIndex",-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
keydown(function(i){if( ---> b <--- .closeOnEscape&&i.keyCode&&i.keyCode

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i){if(b.closeOnEscape&& ---> i <--- .keyCode&&i.keyCode===c.ui

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.closeOnEscape&&i.keyCode&& ---> i <--- .keyCode===c.ui.keyCode.ESCAPE

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&i.keyCode&&i.keyCode=== ---> c <--- .ui.keyCode.ESCAPE){a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.ui.keyCode.ESCAPE){ ---> a <--- .close(i);i.preventDefault(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
keyCode.ESCAPE){a.close( ---> i <--- );i.preventDefault();}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
){a.close(i); ---> i <--- .preventDefault();}}).attr

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
attr({role:"dialog","aria-labelledby": ---> f <--- }).mousedown(function(i){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).mousedown(function(i){ ---> a <--- .moveToTop(false,i);})

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i){a.moveToTop(false, ---> i <--- );});a.element.show

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(false,i);}); ---> a <--- .element.show().removeAttr("title"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-dialog-content ui-widget-content").appendTo( ---> g <--- );var e=(a.uiDialogTitlebar=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-dialog-content ui-widget-content").appendTo(g);var  ---> e <--- =(a.uiDialogTitlebar=c("<div></div>")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
appendTo(g);var e=( ---> a <--- .uiDialogTitlebar=c("<div></div>")).addClass

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;var e=(a.uiDialogTitlebar= ---> c <--- ("<div></div>")).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo( ---> g <--- ),h=c('<a href="#"></a>').addClass

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-dialog-titlebar ui-widget-header ui-corner-all ui-helper-clearfix").prependTo(g), ---> h <--- =c('<a href="#"></a>').addClass("ui-dialog-titlebar-close ui-corner-all")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).prependTo(g),h= ---> c <--- ('<a href="#"></a>').addClass("ui-dialog-titlebar-close ui-corner-all").attr

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"button").hover(function(){ ---> h <--- .addClass("ui-state-hover");},function(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-state-hover");},function(){ ---> h <--- .removeClass("ui-state-hover");}).focus

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}).focus(function(){ ---> h <--- .addClass("ui-state-focus");}).blur

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}).blur(function(){ ---> h <--- .removeClass("ui-state-focus");}).click

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).click(function(i){ ---> a <--- .close(i);returnfalse;}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(i){a.close( ---> i <--- );returnfalse;}).appendTo(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;returnfalse;}).appendTo( ---> e <--- );(a.uiDialogTitlebarCloseText=c("<span></span>"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}).appendTo(e);( ---> a <--- .uiDialogTitlebarCloseText=c("<span></span>")).addClass

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(e);(a.uiDialogTitlebarCloseText= ---> c <--- ("<span></span>")).addClass("ui-icon ui-icon-closethick").

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-icon ui-icon-closethick").text( ---> b <--- .closeText).appendTo(h);c

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
text(b.closeText).appendTo( ---> h <--- );c("<span></span>").addClass("ui-dialog-title"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.closeText).appendTo(h); ---> c <--- ("<span></span>").addClass("ui-dialog-title").attr

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-dialog-title").attr("id", ---> f <--- ).html(d).prependTo(e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
attr("id",f).html( ---> d <--- ).prependTo(e);if(c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
).html(d).prependTo( ---> e <--- );if(c.isFunction(b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).prependTo(e);if( ---> c <--- .isFunction(b.beforeclose)&&!c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e);if(c.isFunction( ---> b <--- .beforeclose)&&!c.isFunction(b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.isFunction(b.beforeclose)&&! ---> c <--- .isFunction(b.beforeClose)){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.beforeclose)&&!c.isFunction( ---> b <--- .beforeClose)){b.beforeClose=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.isFunction(b.beforeClose)){ ---> b <--- .beforeClose=b.beforeclose;}e.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.beforeClose)){b.beforeClose= ---> b <--- .beforeclose;}e.find("*")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b.beforeClose=b.beforeclose;} ---> e <--- .find("*").add(e)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.find("*").add( ---> e <--- ).disableSelection();b.draggable&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
add(e).disableSelection(); ---> b <--- .draggable&&c.fn.draggable&&a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.disableSelection();b.draggable&& ---> c <--- .fn.draggable&&a._makeDraggable()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.draggable&&c.fn.draggable&& ---> a <--- ._makeDraggable();b.resizable&&c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.draggable&&a._makeDraggable(); ---> b <--- .resizable&&c.fn.resizable&&a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._makeDraggable();b.resizable&& ---> c <--- .fn.resizable&&a._makeResizable()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.resizable&&c.fn.resizable&& ---> a <--- ._makeResizable();a._createButtons(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.resizable&&a._makeResizable(); ---> a <--- ._createButtons(b.buttons);a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._makeResizable();a._createButtons( ---> b <--- .buttons);a._isOpen=false;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a._createButtons(b.buttons); ---> a <--- ._isOpen=false;c.fn.bgiframe

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
buttons);a._isOpen=false; ---> c <--- .fn.bgiframe&&g.bgiframe()

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;c.fn.bgiframe&& ---> g <--- .bgiframe();},_init:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},destroy:function(){var  ---> a <--- =this;a.overlay&&a.overlay

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var a=this; ---> a <--- .overlay&&a.overlay.destroy()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=this;a.overlay&& ---> a <--- .overlay.destroy();a.uiDialog

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.overlay.destroy(); ---> a <--- .uiDialog.hide();a.element

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.uiDialog.hide(); ---> a <--- .element.unbind(".dialog").removeData(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
hide().appendTo("body"); ---> a <--- .uiDialog.remove();a.originalTitle

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.uiDialog.remove(); ---> a <--- .originalTitle&&a.element.attr("title"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.remove();a.originalTitle&& ---> a <--- .element.attr("title",a.originalTitle

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.element.attr("title", ---> a <--- .originalTitle);returna;},widget

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("title",a.originalTitle);return ---> a <--- ;},widget:function(){return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,close:function(a){var  ---> b <--- =this,d;if(false!==b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){var b=this, ---> d <--- ;if(false!==b._trigger("beforeClose"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,d;if(false!== ---> b <--- ._trigger("beforeClose",a)){b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(false!==b._trigger("beforeClose", ---> a <--- )){b.overlay&&b.overlay

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("beforeClose",a)){ ---> b <--- .overlay&&b.overlay.destroy()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a)){b.overlay&& ---> b <--- .overlay.destroy();b.uiDialog

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b.overlay.destroy(); ---> b <--- .uiDialog.unbind("keypress.ui-dialog");b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.uiDialog.unbind("keypress.ui-dialog"); ---> b <--- ._isOpen=false;if(b.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b._isOpen=false;if( ---> b <--- .options.hide){b.uiDialog.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b.options.hide){ ---> b <--- .uiDialog.hide(b.options.hide

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
hide){b.uiDialog.hide( ---> b <--- .options.hide,function(){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.hide,function(){ ---> b <--- ._trigger("close",a);})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(){b._trigger("close", ---> a <--- );});}else{b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a);});}else{ ---> b <--- .uiDialog.hide();b._trigger

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{b.uiDialog.hide(); ---> b <--- ._trigger("close",a);}c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();b._trigger("close", ---> a <--- );}c.ui.dialog.overlay

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("close",a);} ---> c <--- .ui.dialog.overlay.resize()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.overlay.resize();if( ---> b <--- .options.modal){d=0;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b.options.modal){ ---> d <--- =0;c(".ui-dialog").each(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
options.modal){d=0; ---> c <--- (".ui-dialog").each(function(){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){if(this!== ---> b <--- .uiDialog[0]){d=Math

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!==b.uiDialog[0]){ ---> d <--- =Math.max(d,c(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
]){d=Math.max( ---> d <--- ,c(this).css("z-index")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{d=Math.max(d, ---> c <--- (this).css("z-index"));

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("z-index"));}}); ---> c <--- .ui.dialog.maxZ=d;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.ui.dialog.maxZ= ---> d <--- ;}returnb;}},isOpen:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.dialog.maxZ=d;}return ---> b <--- ;}},isOpen:function(){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> d <--- =this,f=d.options;if

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var d=this, ---> f <--- =d.options;if(f.modal

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var d=this,f= ---> d <--- .options;if(f.modal&&!

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=d.options;if( ---> f <--- .modal&&!a||!f.stack

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options;if(f.modal&&! ---> a <--- ||!f.stack&&!f.modal

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.modal&&!a||! ---> f <--- .stack&&!f.modal){return

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
!a||!f.stack&&! ---> f <--- .modal){returnd._trigger("focus"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
stack&&!f.modal){return ---> d <--- ._trigger("focus",b);}if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd._trigger("focus", ---> b <--- );}if(f.zIndex>c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
("focus",b);}if( ---> f <--- .zIndex>c.ui.dialog.maxZ

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if(f.zIndex> ---> c <--- .ui.dialog.maxZ){c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.ui.dialog.maxZ){ ---> c <--- .ui.dialog.maxZ=f.zIndex

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.ui.dialog.maxZ= ---> f <--- .zIndex;}if(d.overlay)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
maxZ=f.zIndex;}if( ---> d <--- .overlay){c.ui.dialog.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(d.overlay){ ---> c <--- .ui.dialog.maxZ+=1;d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.dialog.maxZ+=1; ---> d <--- .overlay.$el.css("z-index",c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.overlay.$el.css("z-index", ---> c <--- .ui.dialog.overlay.maxZ=c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.dialog.overlay.maxZ= ---> c <--- .ui.dialog.maxZ);}a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.dialog.maxZ);} ---> a <--- ={scrollTop:d.element.attr(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
maxZ);}a={scrollTop: ---> d <--- .element.attr("scrollTop"),scrollLeft:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
element.attr("scrollTop"),scrollLeft: ---> d <--- .element.attr("scrollLeft")};c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.element.attr("scrollLeft")}; ---> c <--- .ui.dialog.maxZ+=1;d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.dialog.maxZ+=1; ---> d <--- .uiDialog.css("z-index",c.ui

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.uiDialog.css("z-index", ---> c <--- .ui.dialog.maxZ);d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.ui.dialog.maxZ); ---> d <--- .element.attr(a);d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
maxZ);d.element.attr( ---> a <--- );d._trigger("focus",b)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.element.attr(a); ---> d <--- ._trigger("focus",b);returnd

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a);d._trigger("focus", ---> b <--- );returnd;},open:function

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("focus",b);return ---> d <--- ;},open:function(){if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!this._isOpen){var  ---> a <--- =this,b=a.options,d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._isOpen){var a=this, ---> b <--- =a.options,d=a.uiDialog

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this,b= ---> a <--- .options,d=a.uiDialog;a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,b=a.options, ---> d <--- =a.uiDialog;a.overlay=b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b=a.options,d= ---> a <--- .uiDialog;a.overlay=b.modal

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,d=a.uiDialog; ---> a <--- .overlay=b.modal?new c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.uiDialog;a.overlay= ---> b <--- .modal?new c.ui.dialog.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.overlay=b.modal?new  ---> c <--- .ui.dialog.overlay(a):

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
new c.ui.dialog.overlay( ---> a <--- ):null;d.next().

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
dialog.overlay(a):null; ---> d <--- .next().length&&d.appendTo

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.next().length&& ---> d <--- .appendTo("body");a._size(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
length&&d.appendTo("body"); ---> a <--- ._size();a._position(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"body");a._size(); ---> a <--- ._position(b.position);d.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._size();a._position( ---> b <--- .position);d.show(b.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a._position(b.position); ---> d <--- .show(b.show);a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.position);d.show( ---> b <--- .show);a.moveToTop(true)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.show(b.show); ---> a <--- .moveToTop(true);b.modal&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.moveToTop(true); ---> b <--- .modal&&d.bind("keypress.ui-dialog",function

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
moveToTop(true);b.modal&& ---> d <--- .bind("keypress.ui-dialog",function(f){

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"keypress.ui-dialog",function(f){if( ---> f <--- .keyCode===c.ui.keyCode.TAB

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f){if(f.keyCode=== ---> c <--- .ui.keyCode.TAB){var g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.keyCode.TAB){var  ---> g <--- =c(":tabbable",this),e=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.keyCode.TAB){var g= ---> c <--- (":tabbable",this),e=g.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
g=c(":tabbable",this), ---> e <--- =g.filter(":first");g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
c(":tabbable",this),e= ---> g <--- .filter(":first");g=g.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e=g.filter(":first"); ---> g <--- =g.filter(":last");if(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g.filter(":first");g= ---> g <--- .filter(":last");if(f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
g.filter(":last");if( ---> f <--- .target===g[0]&&!f

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
":last");if(f.target=== ---> g <--- [0]&&!f.shiftKey){

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.target===g[0]&&! ---> f <--- .shiftKey){e.focus(1)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0]&&!f.shiftKey){ ---> e <--- .focus(1);returnfalse;}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;returnfalse;}else{if( ---> f <--- .target===e[0]&&f.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(f.target=== ---> e <--- [0]&&f.shiftKey){g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f.target===e[0]&& ---> f <--- .shiftKey){g.focus(1)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]&&f.shiftKey){ ---> g <--- .focus(1);returnfalse;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnfalse;}}}}); ---> c <--- (a.element.find(":tabbable").

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}}});c( ---> a <--- .element.find(":tabbable").get(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
":tabbable").get().concat( ---> d <--- .find(".ui-dialog-buttonpane :tabbable").get().

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
".ui-dialog-buttonpane :tabbable").get().concat( ---> d <--- .get()))).eq(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
eq(0).focus(); ---> a <--- ._isOpen=true;a._trigger("open"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();a._isOpen=true; ---> a <--- ._trigger("open");returna;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a._trigger("open");return ---> a <--- ;}},_createButtons:function(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_createButtons:function(a){var  ---> b <--- =this,d=false,f=c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){var b=this, ---> d <--- =false,f=c("<div></div>").

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this,d=false, ---> f <--- =c("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,d=false,f= ---> c <--- ("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("<div></div>").addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"), ---> g <--- =c("<div></div>").addClass("ui-dialog-buttonset")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-dialog-buttonpane ui-widget-content ui-helper-clearfix"),g= ---> c <--- ("<div></div>").addClass("ui-dialog-buttonset").appendTo

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-dialog-buttonset").appendTo( ---> f <--- );b.uiDialog.find(".ui-dialog-buttonpane")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-dialog-buttonset").appendTo(f); ---> b <--- .uiDialog.find(".ui-dialog-buttonpane").remove(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(".ui-dialog-buttonpane").remove();typeof ---> a <--- ==="object"&&a!==null&&c.each

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
remove();typeofa==="object"&& ---> a <--- !==null&&c.each(a,function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofa==="object"&&a!==null&& ---> c <--- .each(a,function(){return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a!==null&&c.each( ---> a <--- ,function(){return!(d=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a,function(){return!( ---> d <--- =true);});if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=true);});if( ---> d <--- ){c.each(a,function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;});if(d){ ---> c <--- .each(a,function(e,h

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d){c.each( ---> a <--- ,function(e,h){h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
a,function(e,h){ ---> h <--- =c.isFunction(h)?{click

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e,h){h= ---> c <--- .isFunction(h)?{click:h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
h){h=c.isFunction( ---> h <--- )?{click:h,text:e

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.isFunction(h)?{click: ---> h <--- ,text:e}:h;e=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)?{click:h,text: ---> e <--- }:h;e=c("<button></button>",

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
click:h,text:e}: ---> h <--- ;e=c("<button></button>",h).

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h,text:e}:h; ---> e <--- =c("<button></button>",h).unbind(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
text:e}:h;e= ---> c <--- ("<button></button>",h).unbind("click")

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:h;e=c("<button></button>", ---> h <--- ).unbind("click").click(function

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"click").click(function(){ ---> h <--- .click.apply(b.element[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(){h.click.apply( ---> b <--- .element[0],arguments);}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,arguments);}).appendTo( ---> g <--- );c.fn.button&&e.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}).appendTo(g); ---> c <--- .fn.button&&e.button()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
g);c.fn.button&& ---> e <--- .button();});f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e.button();}); ---> f <--- .appendTo(b.uiDialog);}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);});f.appendTo( ---> b <--- .uiDialog);}},_makeDraggable:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_makeDraggable:function(){function ---> a <--- (e){return{position:e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a(e){return{position: ---> e <--- .position,offset:e.offset};

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{position:e.position,offset: ---> e <--- .offset};}var b=this,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
offset:e.offset};}var  ---> b <--- =this,d=b.options,f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
offset};}var b=this, ---> d <--- =b.options,f=c(document

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var b=this,d= ---> b <--- .options,f=c(document),

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,d=b.options, ---> f <--- =c(document),g;b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=b.options,f= ---> c <--- (document),g;b.uiDialog.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
options,f=c(document), ---> g <--- ;b.uiDialog.draggable({cancel:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
f=c(document),g; ---> b <--- .uiDialog.draggable({cancel:".ui-dialog-content, .ui-dialog-titlebar-close",

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(e,h){ ---> g <--- =d.height==="auto"?"auto":c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e,h){g= ---> d <--- .height==="auto"?"auto":c(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.height==="auto"?"auto": ---> c <--- (this).height();c(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c(this).height(); ---> c <--- (this).height(c(this)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);c(this).height( ---> c <--- (this).height()).addClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
()).addClass("ui-dialog-dragging"); ---> b <--- ._trigger("dragStart",e,a(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-dialog-dragging");b._trigger("dragStart", ---> e <--- ,a(h));},drag

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b._trigger("dragStart",e, ---> a <--- (h));},drag:function

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("dragStart",e,a( ---> h <--- ));},drag:function(e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
drag:function(e,h){ ---> b <--- ._trigger("drag",e,a(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h){b._trigger("drag", ---> e <--- ,a(h));},stop

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b._trigger("drag",e, ---> a <--- (h));},stop:function

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("drag",e,a( ---> h <--- ));},stop:function(e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(e,h){ ---> d <--- .position=[h.position.left-

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,h){d.position=[ ---> h <--- .position.left-f.scrollLeft()

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
position=[h.position.left- ---> f <--- .scrollLeft(),h.position.top

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.left-f.scrollLeft(), ---> h <--- .position.top-f.scrollTop()

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(),h.position.top- ---> f <--- .scrollTop()];c(this)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
top-f.scrollTop()]; ---> c <--- (this).removeClass("ui-dialog-dragging").height

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).removeClass("ui-dialog-dragging").height( ---> g <--- );b._trigger("dragStop",e,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-dialog-dragging").height(g); ---> b <--- ._trigger("dragStop",e,a(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
g);b._trigger("dragStop", ---> e <--- ,a(h));c.ui

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b._trigger("dragStop",e, ---> a <--- (h));c.ui.dialog

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("dragStop",e,a( ---> h <--- ));c.ui.dialog.overlay

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,e,a(h)); ---> c <--- .ui.dialog.overlay.resize()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_makeResizable:function(a){function ---> b <--- (e){return{originalPosition:e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b(e){return{originalPosition: ---> e <--- .originalPosition,originalSize:e.originalSize,position

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{originalPosition:e.originalPosition,originalSize: ---> e <--- .originalSize,position:e.position,size

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,originalSize:e.originalSize,position: ---> e <--- .position,size:e.size};

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,position:e.position,size: ---> e <--- .size};}a=a===j

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,size:e.size};} ---> a <--- =a===j?this.options.resizable

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:e.size};}a= ---> a <--- ===j?this.options.resizable:a

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.size};}a=a=== ---> j <--- ?this.options.resizable:a;var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
===j?this.options.resizable: ---> a <--- ;var d=this,f=d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.resizable:a;var  ---> d <--- =this,f=d.options,g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
resizable:a;var d=this, ---> f <--- =d.options,g=d.uiDialog

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a;var d=this,f= ---> d <--- .options,g=d.uiDialog.css

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,f=d.options, ---> g <--- =d.uiDialog.css("position");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=d.options,g= ---> d <--- .uiDialog.css("position");a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.uiDialog.css("position"); ---> a <--- =typeofa==="string"?a:"n,e,s,w,se,sw,ne,nw";

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("position");a=typeof ---> a <--- ==="string"?a:"n,e,s,w,se,sw,ne,nw";d.uiDialog

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);a=typeofa==="string"? ---> a <--- :"n,e,s,w,se,sw,ne,nw";d.uiDialog.resizable({

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofa==="string"?a:"n,e,s,w,se,sw,ne,nw"; ---> d <--- .uiDialog.resizable({cancel:".ui-dialog-content",

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:".ui-dialog-content",containment:"document",alsoResize: ---> d <--- .element,maxWidth:f.maxWidth,maxHeight

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,alsoResize:d.element,maxWidth: ---> f <--- .maxWidth,maxHeight:f.maxHeight,minWidth

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,maxWidth:f.maxWidth,maxHeight: ---> f <--- .maxHeight,minWidth:f.minWidth,minHeight

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,maxHeight:f.maxHeight,minWidth: ---> f <--- .minWidth,minHeight:d._minHeight()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,minWidth:f.minWidth,minHeight: ---> d <--- ._minHeight(),handles:a,start

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:d._minHeight(),handles: ---> a <--- ,start:function(e,h){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
start:function(e,h){ ---> c <--- (this).addClass("ui-dialog-resizing");d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).addClass("ui-dialog-resizing"); ---> d <--- ._trigger("resizeStart",e,b(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-dialog-resizing");d._trigger("resizeStart", ---> e <--- ,b(h));},resize

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;d._trigger("resizeStart",e, ---> b <--- (h));},resize:function

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("resizeStart",e,b( ---> h <--- ));},resize:function(e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
resize:function(e,h){ ---> d <--- ._trigger("resize",e,b(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h){d._trigger("resize", ---> e <--- ,b(h));},stop

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{d._trigger("resize",e, ---> b <--- (h));},stop:function

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("resize",e,b( ---> h <--- ));},stop:function(e

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
stop:function(e,h){ ---> c <--- (this).removeClass("ui-dialog-resizing");f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).removeClass("ui-dialog-resizing"); ---> f <--- .height=c(this).height(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
removeClass("ui-dialog-resizing");f.height= ---> c <--- (this).height();f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c(this).height(); ---> f <--- .width=c(this).width(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.height();f.width= ---> c <--- (this).width();d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c(this).width(); ---> d <--- ._trigger("resizeStop",e,b(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
();d._trigger("resizeStop", ---> e <--- ,b(h));c.ui

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;d._trigger("resizeStop",e, ---> b <--- (h));c.ui.dialog

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
._trigger("resizeStop",e,b( ---> h <--- ));c.ui.dialog.overlay

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,e,b(h)); ---> c <--- .ui.dialog.overlay.resize()

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}).css("position", ---> g <--- ).find(".ui-resizable-se").addClass("ui-icon ui-icon-grip-diagonal-se"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_minHeight:function(){var  ---> a <--- =this.options;returna.height===

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=this.options;return ---> a <--- .height==="auto"?a.minHeight:Math

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options;returna.height==="auto"? ---> a <--- .minHeight:Math.min(a.minHeight

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?a.minHeight:Math.min( ---> a <--- .minHeight,a.height);},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:Math.min(a.minHeight, ---> a <--- .height);},_position:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_position:function(a){var  ---> b <--- =[],d=[0,0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a){var b=[], ---> d <--- =[0,0],f;if

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=[0,0], ---> f <--- ;if(a){if(typeofa

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0,0],f;if( ---> a <--- ){if(typeofa==="string"||typeof

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(a){if(typeof ---> a <--- ==="string"||typeofa==="object"&&"0" in 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(typeofa==="string"||typeof ---> a <--- ==="object"&&"0" in a){b=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"string"||typeofa==="object"&&"0" in  ---> a <--- ){b=a.split?a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a==="object"&&"0" in a){ ---> b <--- =a.split?a.split(" "

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"object"&&"0" in a){b= ---> a <--- .split?a.split(" "):

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){b=a.split? ---> a <--- .split(" "):[a[0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?a.split(" "):[ ---> a <--- [0],a[1]];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
" "):[a[0], ---> a <--- [1]];if(b.length

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a[1]];if( ---> b <--- .length===1){b[1]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b.length===1){ ---> b <--- [1]=b[0];}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
===1){b[1]= ---> b <--- [0];}c.each([

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
1]=b[0];} ---> c <--- .each(["left","top"],function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(g,e){if(+ ---> b <--- [g]===b[g]){

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){if(+b[ ---> g <--- ]===b[g]){d[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(+b[g]=== ---> b <--- [g]){d[g]=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(+b[g]===b[ ---> g <--- ]){d[g]=b[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
g]===b[g]){ ---> d <--- [g]=b[g];b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
===b[g]){d[ ---> g <--- ]=b[g];b[g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
g]){d[g]= ---> b <--- [g];b[g]=e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
){d[g]=b[ ---> g <--- ];b[g]=e;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[g]=b[g]; ---> b <--- [g]=e;}});

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
]=b[g];b[ ---> g <--- ]=e;}});a=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[g];b[g]= ---> e <--- ;}});a={my:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g]=e;}}); ---> a <--- ={my:b.join(" ")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}});a={my: ---> b <--- .join(" "),at:b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.join(" "),at: ---> b <--- .join(" "),offset:d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b.join(" "),offset: ---> d <--- .join(" ")};}a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.join(" ")};} ---> a <--- =c.extend({},c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
join(" ")};}a= ---> c <--- .extend({},c.ui.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a=c.extend({}, ---> c <--- .ui.dialog.prototype.options.position

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.dialog.prototype.options.position, ---> a <--- );}else{a=c.ui

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.position,a);}else{ ---> a <--- =c.ui.dialog.prototype.options

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,a);}else{a= ---> c <--- .ui.dialog.prototype.options.position

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.prototype.options.position;}( ---> f <--- =this.uiDialog.is(":visible"))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:0}).position( ---> a <--- );f||this.uiDialog.hide(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0}).position(a); ---> f <--- ||this.uiDialog.hide();}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> d <--- =this,f=d.uiDialog,g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var d=this, ---> f <--- =d.uiDialog,g=f.is

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var d=this,f= ---> d <--- .uiDialog,g=f.is(":data(resizable)"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,f=d.uiDialog, ---> g <--- =f.is(":data(resizable)"),e=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=d.uiDialog,g= ---> f <--- .is(":data(resizable)"),e=false;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
g=f.is(":data(resizable)"), ---> e <--- =false;switch(a){case"beforeclose"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
":data(resizable)"),e=false;switch( ---> a <--- ){case"beforeclose":a="beforeClose";break

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;switch(a){case"beforeclose": ---> a <--- ="beforeClose";break;case"buttons":d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a="beforeClose";break;case"buttons": ---> d <--- ._createButtons(b);e=true;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
break;case"buttons":d._createButtons( ---> b <--- );e=true;break;case"closeText"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"buttons":d._createButtons(b); ---> e <--- =true;break;case"closeText":d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e=true;break;case"closeText": ---> d <--- .uiDialogTitlebarCloseText.text(""+b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.uiDialogTitlebarCloseText.text(""+ ---> b <--- );break;case"dialogClass":f.removeClass

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
+b);break;case"dialogClass": ---> f <--- .removeClass(d.options.dialogClass).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
break;case"dialogClass":f.removeClass( ---> d <--- .options.dialogClass).addClass("ui-dialog ui-widget ui-widget-content ui-corner-all "+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
options.dialogClass).addClass("ui-dialog ui-widget ui-widget-content ui-corner-all "+ ---> b <--- );break;case"disabled":b?f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+b);break;case"disabled": ---> b <--- ?f.addClass("ui-dialog-disabled"):f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"disabled":b? ---> f <--- .addClass("ui-dialog-disabled"):f.removeClass(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b?f.addClass("ui-dialog-disabled"): ---> f <--- .removeClass("ui-dialog-disabled");break;case"draggable"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-dialog-disabled");break;case"draggable": ---> b <--- ?d._makeDraggable():f.draggable

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"draggable":b? ---> d <--- ._makeDraggable():f.draggable("destroy"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:b?d._makeDraggable(): ---> f <--- .draggable("destroy");break;case"height"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
("destroy");break;case"height": ---> e <--- =true;break;case"maxHeight":g&&

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e=true;break;case"maxHeight": ---> g <--- &&f.resizable("option","maxHeight",b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
true;break;case"maxHeight":g&& ---> f <--- .resizable("option","maxHeight",b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f.resizable("option","maxHeight", ---> b <--- );e=true;break;case"maxWidth"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
resizable("option","maxHeight",b); ---> e <--- =true;break;case"maxWidth":g&&

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e=true;break;case"maxWidth": ---> g <--- &&f.resizable("option","maxWidth",b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
true;break;case"maxWidth":g&& ---> f <--- .resizable("option","maxWidth",b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f.resizable("option","maxWidth", ---> b <--- );e=true;break;case"minHeight"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
resizable("option","maxWidth",b); ---> e <--- =true;break;case"minHeight":g&&

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e=true;break;case"minHeight": ---> g <--- &&f.resizable("option","minHeight",b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
true;break;case"minHeight":g&& ---> f <--- .resizable("option","minHeight",b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f.resizable("option","minHeight", ---> b <--- );e=true;break;case"minWidth"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
resizable("option","minHeight",b); ---> e <--- =true;break;case"minWidth":g&&

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e=true;break;case"minWidth": ---> g <--- &&f.resizable("option","minWidth",b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
true;break;case"minWidth":g&& ---> f <--- .resizable("option","minWidth",b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f.resizable("option","minWidth", ---> b <--- );e=true;break;case"position"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
resizable("option","minWidth",b); ---> e <--- =true;break;case"position":d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e=true;break;case"position": ---> d <--- ._position(b);break;case"resizable"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
break;case"position":d._position( ---> b <--- );break;case"resizable":g&&!

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(b);break;case"resizable": ---> g <--- &&!b&&f.resizable("destroy")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"resizable":g&&! ---> b <--- &&f.resizable("destroy");g&&

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;case"resizable":g&&!b&& ---> f <--- .resizable("destroy");g&&typeofb

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b&&f.resizable("destroy"); ---> g <--- &&typeofb==="string"&&f.resizable(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.resizable("destroy");g&&typeof ---> b <--- ==="string"&&f.resizable("option","handles"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);g&&typeofb==="string"&& ---> f <--- .resizable("option","handles",b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f.resizable("option","handles", ---> b <--- );!g&&b!==false&&d

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("option","handles",b);! ---> g <--- &&b!==false&&d._makeResizable(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,"handles",b);!g&& ---> b <--- !==false&&d._makeResizable(b);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);!g&&b!==false&& ---> d <--- ._makeResizable(b);break;case"title"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b!==false&&d._makeResizable( ---> b <--- );break;case"title":c(".ui-dialog-title"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(b);break;case"title": ---> c <--- (".ui-dialog-title",d.uiDialogTitlebar).html(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
break;case"title":c(".ui-dialog-title", ---> d <--- .uiDialogTitlebar).html(""+(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.uiDialogTitlebar).html(""+( ---> b <--- ||"&#160;"));break;case"width":

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"&#160;"));break;case"width": ---> e <--- =true;break;}c.Widget.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"width":e=true;break;} ---> c <--- .Widget.prototype._setOption.apply(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.Widget.prototype._setOption.apply( ---> d <--- ,arguments);e&&d._size(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_setOption.apply(d,arguments); ---> e <--- &&d._size();},_size

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(d,arguments);e&& ---> d <--- ._size();},_size:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_size:function(){var  ---> a <--- =this.options,b;this.element

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.options, ---> b <--- ;this.element.css({width:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:0});if( ---> a <--- .minWidth>a.width){a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
});if(a.minWidth> ---> a <--- .width){a.width=a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.minWidth>a.width){ ---> a <--- .width=a.minWidth;}b=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.width){a.width= ---> a <--- .minWidth;}b=this.uiDialog.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.width=a.minWidth;} ---> b <--- =this.uiDialog.css({height:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
css({height:"auto",width: ---> a <--- .width}).height();this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();this.element.css( ---> a <--- .height==="auto"?{minHeight:Math.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"auto"?{minHeight:Math.max( ---> a <--- .minHeight-b,0),height:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:Math.max(a.minHeight- ---> b <--- ,0),height:c.support.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
minHeight-b,0),height: ---> c <--- .support.minHeight?"auto":Math.max

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.minHeight?"auto":Math.max( ---> a <--- .minHeight-b,0)}:{

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:Math.max(a.minHeight- ---> b <--- ,0)}:{minHeight:0,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,height:Math.max( ---> a <--- .height-b,0)}).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:Math.max(a.height- ---> b <--- ,0)}).show();

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_minHeight());}}); ---> c <--- .extend(c.ui.dialog,{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});c.extend( ---> c <--- .ui.dialog,{version:"1.8.5",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0,getTitleId:function(a){ ---> a <--- =a.attr("id");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
getTitleId:function(a){a= ---> a <--- .attr("id");if(!a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("id");if(! ---> a <--- ){this.uuid+=1;a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){this.uuid+=1; ---> a <--- =this.uuid;}return"ui-dialog-title-"+a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.uuid;}return"ui-dialog-title-"+ ---> a <--- ;},overlay:function(a){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){this.$el= ---> c <--- .ui.dialog.overlay.create(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.dialog.overlay.create( ---> a <--- );}});c.extend(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
create(a);}}); ---> c <--- .extend(c.ui.dialog.overlay

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});c.extend( ---> c <--- .ui.dialog.overlay,{instances:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[],maxZ:0,events: ---> c <--- .map("focus,mousedown,mouseup,keydown,keypress,click".split(","),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
","),function(a){return ---> a <--- +".dialog-overlay";}).join(" ")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0){setTimeout(function(){ ---> c <--- .ui.dialog.overlay.instances.length

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.dialog.overlay.instances.length&& ---> c <--- (document).bind(c.ui.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
length&&c(document).bind( ---> c <--- .ui.dialog.overlay.events,function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
events,function(d){if( ---> c <--- (d.target).zIndex()<

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(d){if(c( ---> d <--- .target).zIndex()<c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d.target).zIndex()< ---> c <--- .ui.dialog.overlay.maxZ){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}});},1); ---> c <--- (document).bind("keydown.dialog-overlay",function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"keydown.dialog-overlay",function(d){if( ---> a <--- .options.closeOnEscape&&d.keyCode&&d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(a.options.closeOnEscape&& ---> d <--- .keyCode&&d.keyCode===c.ui

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.closeOnEscape&&d.keyCode&& ---> d <--- .keyCode===c.ui.keyCode.ESCAPE

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&d.keyCode&&d.keyCode=== ---> c <--- .ui.keyCode.ESCAPE){a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.ui.keyCode.ESCAPE){ ---> a <--- .close(d);d.preventDefault(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
keyCode.ESCAPE){a.close( ---> d <--- );d.preventDefault();}}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){a.close(d); ---> d <--- .preventDefault();}});c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.preventDefault();}}); ---> c <--- (window).bind("resize.dialog-overlay",c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c(window).bind("resize.dialog-overlay", ---> c <--- .ui.dialog.overlay.resize);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
dialog.overlay.resize);}var  ---> b <--- =(this.oldInstances.pop()||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.oldInstances.pop()|| ---> c <--- ("<div></div>").addClass("ui-widget-overlay")).

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:this.height()}); ---> c <--- .fn.bgiframe&&b.bgiframe()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
});c.fn.bgiframe&& ---> b <--- .bgiframe();this.instances.push

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();this.instances.push( ---> b <--- );returnb;},destroy:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.instances.push(b);return ---> b <--- ;},destroy:function(a){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.push(this.instances.splice( ---> c <--- .inArray(a,this.instances),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.instances.splice(c.inArray( ---> a <--- ,this.instances),1)[0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.instances.length===0&& ---> c <--- ([document,window]).unbind(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
window]).unbind(".dialog-overlay"); ---> a <--- .remove();var b=0;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.remove();var  ---> b <--- =0;c.each(this.instances

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
remove();var b=0; ---> c <--- .each(this.instances,function()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.instances,function(){ ---> b <--- =Math.max(b,this.css

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(){b=Math.max( ---> b <--- ,this.css("z-index"));}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);});this.maxZ= ---> b <--- ;},height:function(){var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},height:function(){var  ---> a <--- ,b;if(c.browser.msie

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
height:function(){var a, ---> b <--- ;if(c.browser.msie&&c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a,b;if( ---> c <--- .browser.msie&&c.browser.version

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(c.browser.msie&& ---> c <--- .browser.version<7){a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.browser.version<7){ ---> a <--- =Math.max(document.documentElement.scrollHeight

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollHeight,document.body.scrollHeight); ---> b <--- =Math.max(document.documentElement.offsetHeight

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,document.body.offsetHeight);return ---> a <--- <b?c(window).height(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.body.offsetHeight);returna< ---> b <--- ?c(window).height()+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetHeight);returna<b? ---> c <--- (window).height()+"px":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
window).height()+"px": ---> a <--- +"px";}else{returnc(document

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:a+"px";}else{return ---> c <--- (document).height()+"px";

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},width:function(){var  ---> a <--- ,b;if(c.browser.msie

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width:function(){var a, ---> b <--- ;if(c.browser.msie&&c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a,b;if( ---> c <--- .browser.msie&&c.browser.version

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(c.browser.msie&& ---> c <--- .browser.version<7){a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.browser.version<7){ ---> a <--- =Math.max(document.documentElement.scrollWidth

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
scrollWidth,document.body.scrollWidth); ---> b <--- =Math.max(document.documentElement.offsetWidth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,document.body.offsetWidth);return ---> a <--- <b?c(window).width(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.body.offsetWidth);returna< ---> b <--- ?c(window).width()+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetWidth);returna<b? ---> c <--- (window).width()+"px":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
window).width()+"px": ---> a <--- +"px";}else{returnc(document

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:a+"px";}else{return ---> c <--- (document).width()+"px";

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},resize:function(){var  ---> a <--- =c([]);c.each

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
resize:function(){var a= ---> c <--- ([]);c.each(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=c([]); ---> c <--- .each(c.ui.dialog.overlay

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
([]);c.each( ---> c <--- .ui.dialog.overlay.instances,function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.overlay.instances,function(){ ---> a <--- =a.add(this);})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.instances,function(){a= ---> a <--- .add(this);});a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.add(this);}); ---> a <--- .css({width:0,height:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0}).css({width: ---> c <--- .ui.dialog.overlay.width()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.overlay.width(),height: ---> c <--- .ui.dialog.overlay.height()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
()});}}); ---> c <--- .extend(c.ui.dialog.overlay

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});c.extend( ---> c <--- .ui.dialog.overlay.prototype,{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
prototype,{destroy:function(){ ---> c <--- .ui.dialog.overlay.destroy(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(d){ ---> d <--- .widget("ui.slider",d.ui.mouse

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d){d.widget("ui.slider", ---> d <--- .ui.mouse,{widgetEventPrefix:"slide",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_create:function(){var  ---> a <--- =this,b=this.options;this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var a=this, ---> b <--- =this.options;this._mouseSliding=this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-slider ui-slider-"+this.orientation+" ui-widget ui-widget-content ui-corner-all"); ---> b <--- .disabled&&this.element.addClass("ui-slider-disabled ui-disabled"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-slider-disabled ui-disabled");this.range= ---> d <--- ([]);if(b.range

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=d([]);if( ---> b <--- .range){if(b.range===

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b.range){if( ---> b <--- .range===true){this.range=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
range===true){this.range= ---> d <--- ("<div></div>");if(!b.values

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=d("<div></div>");if(! ---> b <--- .values){b.values=[this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!b.values){ ---> b <--- .values=[this._valueMin(),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._valueMin()];}if( ---> b <--- .values.length&&b.values.length

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(b.values.length&& ---> b <--- .values.length!==2){b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.values.length!==2){ ---> b <--- .values=[b.values[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
!==2){b.values=[ ---> b <--- .values[0],b.values[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=[b.values[0], ---> b <--- .values[0]];}}else

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}else{this.range= ---> d <--- ("<div></div>");}this.range.appendTo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-slider-range");if( ---> b <--- .range==="min"||b.range==="max"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(b.range==="min"|| ---> b <--- .range==="max"){this.range.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.range.addClass("ui-slider-range-"+ ---> b <--- .range);}this.range.addClass

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.range.addClass("ui-widget-header");} ---> d <--- (".ui-slider-handle",this.element).length===

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.element).length===0&& ---> d <--- ("<a href='#'></a>").appendTo(this.element)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-slider-handle");if( ---> b <--- .values&&b.values.length){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-slider-handle");if(b.values&& ---> b <--- .values.length){for(;d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.values.length){for(; ---> d <--- (".ui-slider-handle",this.element).length<

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
".ui-slider-handle",this.element).length< ---> b <--- .values.length;){d("<a href='#'></a>"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
<b.values.length;){ ---> d <--- ("<a href='#'></a>").appendTo(this.element)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-slider-handle");}}this.handles= ---> d <--- (".ui-slider-handle",this.element).addClass(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).click(function(c){ ---> c <--- .preventDefault();}).hover(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}).hover(function(){ ---> b <--- .disabled||d(this).addClass(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){b.disabled|| ---> d <--- (this).addClass("ui-state-hover");}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-state-hover");},function(){ ---> d <--- (this).removeClass("ui-state-hover");}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.focus(function(){if( ---> b <--- .disabled){d(this).blur

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(b.disabled){ ---> d <--- (this).blur();}else

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).blur();}else{ ---> d <--- (".ui-slider .ui-state-focus").removeClass("ui-state-focus");d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(".ui-slider .ui-state-focus").removeClass("ui-state-focus"); ---> d <--- (this).addClass("ui-state-focus");}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}).blur(function(){ ---> d <--- (this).removeClass("ui-state-focus");}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
handles.each(function(c){ ---> d <--- (this).data("index.ui-slider-handle",c)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d(this).data("index.ui-slider-handle", ---> c <--- );});this.handles.keydown

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.keydown(function(c){var  ---> e <--- =true,f=d(this).

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(c){var e=true, ---> f <--- =d(this).data("index.ui-slider-handle")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var e=true,f= ---> d <--- (this).data("index.ui-slider-handle"),h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).data("index.ui-slider-handle"), ---> h <--- ,g,i;if(!a.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("index.ui-slider-handle"),h, ---> g <--- ,i;if(!a.options.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
data("index.ui-slider-handle"),h,g, ---> i <--- ;if(!a.options.disabled)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h,g,i;if(! ---> a <--- .options.disabled){switch(c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.disabled){switch( ---> c <--- .keyCode){cased.ui.keyCode

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{switch(c.keyCode){case ---> d <--- .ui.keyCode.HOME:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.HOME:case ---> d <--- .ui.keyCode.END:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.END:case ---> d <--- .ui.keyCode.PAGE_UP:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.PAGE_UP:case ---> d <--- .ui.keyCode.PAGE_DOWN:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.PAGE_DOWN:case ---> d <--- .ui.keyCode.UP:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.UP:case ---> d <--- .ui.keyCode.RIGHT:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.RIGHT:case ---> d <--- .ui.keyCode.DOWN:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.DOWN:case ---> d <--- .ui.keyCode.LEFT:e=false

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
cased.ui.keyCode.LEFT: ---> e <--- =false;if(!a._keySliding)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
LEFT:e=false;if(! ---> a <--- ._keySliding){a._keySliding=true;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!a._keySliding){ ---> a <--- ._keySliding=true;d(this).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_keySliding){a._keySliding=true; ---> d <--- (this).addClass("ui-state-active");h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).addClass("ui-state-active"); ---> h <--- =a._start(c,f);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-state-active");h= ---> a <--- ._start(c,f);if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-state-active");h=a._start( ---> c <--- ,f);if(h===false)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;h=a._start(c, ---> f <--- );if(h===false){return

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
_start(c,f);if( ---> h <--- ===false){return;}}break;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
){return;}}break;} ---> i <--- =a.options.step;h=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
return;}}break;}i= ---> a <--- .options.step;h=a.options

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}i=a.options.step; ---> h <--- =a.options.values&&a.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.options.step;h= ---> a <--- .options.values&&a.options.values

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;h=a.options.values&& ---> a <--- .options.values.length?(g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.values.length?( ---> g <--- =a.values(f)):(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options.values.length?(g= ---> a <--- .values(f)):(g=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
length?(g=a.values( ---> f <--- )):(g=a.value(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a.values(f)):( ---> g <--- =a.value());switch(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
values(f)):(g= ---> a <--- .value());switch(c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.value());switch( ---> c <--- .keyCode){cased.ui.keyCode

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;switch(c.keyCode){case ---> d <--- .ui.keyCode.HOME:g=a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
cased.ui.keyCode.HOME: ---> g <--- =a._valueMin();break;case

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.keyCode.HOME:g= ---> a <--- ._valueMin();break;cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a._valueMin();break;case ---> d <--- .ui.keyCode.END:g=a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
cased.ui.keyCode.END: ---> g <--- =a._valueMax();break;case

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.keyCode.END:g= ---> a <--- ._valueMax();break;cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a._valueMax();break;case ---> d <--- .ui.keyCode.PAGE_UP:g=a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
cased.ui.keyCode.PAGE_UP: ---> g <--- =a._trimAlignValue(h+(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.keyCode.PAGE_UP:g= ---> a <--- ._trimAlignValue(h+(a._valueMax(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.PAGE_UP:g=a._trimAlignValue( ---> h <--- +(a._valueMax()-a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g=a._trimAlignValue(h+( ---> a <--- ._valueMax()-a._valueMin()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h+(a._valueMax()- ---> a <--- ._valueMin())/5);break

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
))/5);break;case ---> d <--- .ui.keyCode.PAGE_DOWN:g=a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
cased.ui.keyCode.PAGE_DOWN: ---> g <--- =a._trimAlignValue(h-(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.keyCode.PAGE_DOWN:g= ---> a <--- ._trimAlignValue(h-(a._valueMax(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.PAGE_DOWN:g=a._trimAlignValue( ---> h <--- -(a._valueMax()-a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g=a._trimAlignValue(h-( ---> a <--- ._valueMax()-a._valueMin()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h-(a._valueMax()- ---> a <--- ._valueMin())/5);break

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
))/5);break;case ---> d <--- .ui.keyCode.UP:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.UP:case ---> d <--- .ui.keyCode.RIGHT:if(h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.keyCode.RIGHT:if( ---> h <--- ===a._valueMax()){return;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.keyCode.RIGHT:if(h=== ---> a <--- ._valueMax()){return;}g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
._valueMax()){return;} ---> g <--- =a._trimAlignValue(h+i);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
()){return;}g= ---> a <--- ._trimAlignValue(h+i);break;

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
return;}g=a._trimAlignValue( ---> h <--- +i);break;cased.ui

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
}g=a._trimAlignValue(h+ ---> i <--- );break;cased.ui.keyCode

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(h+i);break;case ---> d <--- .ui.keyCode.DOWN:cased.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.ui.keyCode.DOWN:case ---> d <--- .ui.keyCode.LEFT:if(h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.ui.keyCode.LEFT:if( ---> h <--- ===a._valueMin()){return;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.keyCode.LEFT:if(h=== ---> a <--- ._valueMin()){return;}g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
._valueMin()){return;} ---> g <--- =a._trimAlignValue(h-i);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
()){return;}g= ---> a <--- ._trimAlignValue(h-i);break;

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
return;}g=a._trimAlignValue( ---> h <--- -i);break;}a._slide

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
}g=a._trimAlignValue(h- ---> i <--- );break;}a._slide(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(h-i);break;} ---> a <--- ._slide(c,f,g);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;}a._slide( ---> c <--- ,f,g);returne;}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}a._slide(c, ---> f <--- ,g);returne;}})

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}a._slide(c,f, ---> g <--- );returne;}}).keyup

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,f,g);return ---> e <--- ;}}).keyup(function(c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.keyup(function(c){var  ---> e <--- =d(this).data("index.ui-slider-handle")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(c){var e= ---> d <--- (this).data("index.ui-slider-handle");if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).data("index.ui-slider-handle");if( ---> a <--- ._keySliding){a._keySliding=false;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(a._keySliding){ ---> a <--- ._keySliding=false;a._stop(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_keySliding){a._keySliding=false; ---> a <--- ._stop(c,e);a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._keySliding=false;a._stop( ---> c <--- ,e);a._change(c,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;a._stop(c, ---> e <--- );a._change(c,e)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a._stop(c,e); ---> a <--- ._change(c,e);d(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c,e);a._change( ---> c <--- ,e);d(this).removeClass

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e);a._change(c, ---> e <--- );d(this).removeClass("ui-state-active"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a._change(c,e); ---> d <--- (this).removeClass("ui-state-active");}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseCapture:function(a){var  ---> b <--- =this.options,c,e,f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this.options, ---> c <--- ,e,f,h,g;if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this.options,c, ---> e <--- ,f,h,g;if(b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.options,c,e, ---> f <--- ,h,g;if(b.disabled

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.options,c,e,f, ---> h <--- ,g;if(b.disabled){

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,c,e,f,h, ---> g <--- ;if(b.disabled){returnfalse

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,f,h,g;if( ---> b <--- .disabled){returnfalse;}this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.element.offset(); ---> c <--- =this._normValueFromMouse({x:a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c=this._normValueFromMouse({x: ---> a <--- .pageX,y:a.pageY})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{x:a.pageX,y: ---> a <--- .pageY});e=this._valueMax

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,y:a.pageY}); ---> e <--- =this._valueMax()-this._valueMin

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
-this._valueMin()+1; ---> h <--- =this;this.handles.each(function

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(function(i){var  ---> j <--- =Math.abs(c-h.values

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var j=Math.abs( ---> c <--- -h.values(i));if

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
var j=Math.abs(c- ---> h <--- .values(i));if(e

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(c-h.values( ---> i <--- ));if(e>j){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.values(i));if( ---> e <--- >j){e=j;f=

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
(i));if(e> ---> j <--- ){e=j;f=d(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(e>j){ ---> e <--- =j;f=d(this);

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e>j){e= ---> j <--- ;f=d(this);g=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e>j){e=j; ---> f <--- =d(this);g=i;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
j){e=j;f= ---> d <--- (this);g=i;}}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
j;f=d(this); ---> g <--- =i;}});if(b

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
f=d(this);g= ---> i <--- ;}});if(b.range

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=i;}});if( ---> b <--- .range===true&&this.values(1

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
true&&this.values(1)=== ---> b <--- .min){g+=1;f=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(1)===b.min){ ---> g <--- +=1;f=d(this.handles

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.min){g+=1; ---> f <--- =d(this.handles[g])

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
min){g+=1;f= ---> d <--- (this.handles[g]);}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;f=d(this.handles[ ---> g <--- ]);}if(this._start(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if(this._start( ---> a <--- ,g)===false){returnfalse;

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(this._start(a, ---> g <--- )===false){returnfalse;}this

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
false;}this._mouseSliding=true; ---> h <--- ._handleIndex=g;f.addClass("ui-state-active"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseSliding=true;h._handleIndex= ---> g <--- ;f.addClass("ui-state-active").focus(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;h._handleIndex=g; ---> f <--- .addClass("ui-state-active").focus();

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-state-active").focus(); ---> b <--- =f.offset();this._clickOffset

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-state-active").focus();b= ---> f <--- .offset();this._clickOffset=!

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
offset();this._clickOffset=! ---> d <--- (a.target).parents().

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);this._clickOffset=!d( ---> a <--- .target).parents().andSelf(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:0}:{left: ---> a <--- .pageX-b.left-f.width

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}:{left:a.pageX- ---> b <--- .left-f.width()/2

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.pageX-b.left- ---> f <--- .width()/2,top:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width()/2,top: ---> a <--- .pageY-b.top-f.height

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/2,top:a.pageY- ---> b <--- .top-f.height()/2

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.pageY-b.top- ---> f <--- .height()/2-(parseInt(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
height()/2-(parseInt( ---> f <--- .css("borderTopWidth"),10)||0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)-(parseInt( ---> f <--- .css("borderBottomWidth"),10)||0

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
10)||0)+(parseInt( ---> f <--- .css("marginTop"),10)||0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||0)};this._slide( ---> a <--- ,g,c);returnthis._animateOff

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)};this._slide(a, ---> g <--- ,c);returnthis._animateOff=true

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._slide(a,g, ---> c <--- );returnthis._animateOff=true;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_mouseDrag:function(a){var  ---> b <--- =this._normValueFromMouse({x:a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b=this._normValueFromMouse({x: ---> a <--- .pageX,y:a.pageY})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{x:a.pageX,y: ---> a <--- .pageY});this._slide(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.pageY});this._slide( ---> a <--- ,this._handleIndex,b);returnfalse

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._slide(a,this._handleIndex, ---> b <--- );returnfalse;},_mouseStop:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._mouseSliding=false;this._stop( ---> a <--- ,this._handleIndex);this._change(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._handleIndex);this._change( ---> a <--- ,this._handleIndex);this._clickOffset=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_normValueFromMouse:function(a){var  ---> b <--- ;if(this.orientation==="horizontal"){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.orientation==="horizontal"){ ---> b <--- =this.elementSize.width;a=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=this.elementSize.width; ---> a <--- =a.x-this.elementOffset.left

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.elementSize.width;a= ---> a <--- .x-this.elementOffset.left-(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.left:0);}else{ ---> b <--- =this.elementSize.height;a=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=this.elementSize.height; ---> a <--- =a.y-this.elementOffset.top

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.elementSize.height;a= ---> a <--- .y-this.elementOffset.top-(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._clickOffset.top:0);} ---> b <--- =a/b;if(b>1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top:0);}b= ---> a <--- /b;if(b>1){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:0);}b=a/ ---> b <--- ;if(b>1){b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}b=a/b;if( ---> b <--- >1){b=1;}if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b;if(b>1){ ---> b <--- =1;}if(b<0)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){b=1;}if( ---> b <--- <0){b=0;}if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(b<0){ ---> b <--- =0;}if(this.orientation===

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.orientation==="vertical"){ ---> b <--- =1-b;}a=this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
orientation==="vertical"){b=1- ---> b <--- ;}a=this._valueMax()-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){b=1-b;} ---> a <--- =this._valueMax()-this._valueMin

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._trimAlignValue(this._valueMin()+ ---> b <--- *a);},_start:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this._valueMin()+b* ---> a <--- );},_start:function(a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- ={handle:this.handles[b]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c={handle:this.handles[ ---> b <--- ],value:this.value()}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.values.length){ ---> c <--- .value=this.values(b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.value=this.values( ---> b <--- );c.values=this.values(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
value=this.values(b); ---> c <--- .values=this.values();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnthis._trigger("start", ---> a <--- ,c);},_slide:function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis._trigger("start",a, ---> c <--- );},_slide:function(a,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b,c){var  ---> e <--- ;if(this.options.values&&this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.values.length){ ---> e <--- =this.values(b?0:1

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
length){e=this.values( ---> b <--- ?0:1);if(this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.range===true&&( ---> b <--- ===0&&c>e||b===1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
range===true&&(b===0&& ---> c <--- >e||b===1&&c<e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
true&&(b===0&&c> ---> e <--- ||b===1&&c<e))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b===0&&c>e|| ---> b <--- ===1&&c<e)){c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c>e||b===1&& ---> c <--- <e)){c=e;}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
>e||b===1&&c< ---> e <--- )){c=e;}if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
===1&&c<e)){ ---> c <--- =e;}if(c!==this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c<e)){c= ---> e <--- ;}if(c!==this.values(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){c=e;}if( ---> c <--- !==this.values(b)){e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(c!==this.values( ---> b <--- )){e=this.values()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
!==this.values(b)){ ---> e <--- =this.values();e[b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{e=this.values(); ---> e <--- [b]=c;a=this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.values();e[ ---> b <--- ]=c;a=this._trigger(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
values();e[b]= ---> c <--- ;a=this._trigger("slide",a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);e[b]=c; ---> a <--- =this._trigger("slide",a,{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a=this._trigger("slide", ---> a <--- ,{handle:this.handles[b]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,{handle:this.handles[ ---> b <--- ],value:c,values:e}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.handles[b],value: ---> c <--- ,values:e});this.values

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b],value:c,values: ---> e <--- });this.values(b?0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:e});this.values( ---> b <--- ?0:1);a!==false&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
values(b?0:1); ---> a <--- !==false&&this.values(b,c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;a!==false&&this.values( ---> b <--- ,c,true);}}else{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
!==false&&this.values(b, ---> c <--- ,true);}}else{if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
true);}}else{if( ---> c <--- !==this.value()){a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c!==this.value()){ ---> a <--- =this._trigger("slide",a,{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a=this._trigger("slide", ---> a <--- ,{handle:this.handles[b]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,{handle:this.handles[ ---> b <--- ],value:c});a!==

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.handles[b],value: ---> c <--- });a!==false&&this.value

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b],value:c}); ---> a <--- !==false&&this.value(c);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;a!==false&&this.value( ---> c <--- );}}},_stop:function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- ={handle:this.handles[b]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c={handle:this.handles[ ---> b <--- ],value:this.value()}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.values.length){ ---> c <--- .value=this.values(b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.value=this.values( ---> b <--- );c.values=this.values(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
value=this.values(b); ---> c <--- .values=this.values();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}this._trigger("stop", ---> a <--- ,c);},_change:function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}this._trigger("stop",a, ---> c <--- );},_change:function(a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_keySliding&&!this._mouseSliding){var  ---> c <--- ={handle:this.handles[b]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c={handle:this.handles[ ---> b <--- ],value:this.value()}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.values.length){ ---> c <--- .value=this.values(b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.value=this.values( ---> b <--- );c.values=this.values(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
value=this.values(b); ---> c <--- .values=this.values();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}this._trigger("change", ---> a <--- ,c);}},value:function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}this._trigger("change",a, ---> c <--- );}},value:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.value=this._trimAlignValue( ---> a <--- );this._refreshValue();this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- ,e,f;if(arguments.length

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c, ---> e <--- ,f;if(arguments.length>1

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var c,e, ---> f <--- ;if(arguments.length>1){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1){this.options.values[ ---> a <--- ]=this._trimAlignValue(b);this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
values[a]=this._trimAlignValue( ---> b <--- );this._refreshValue();this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();this._change(null, ---> a <--- );}if(arguments.length){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(arguments.length){if( ---> d <--- .isArray(arguments[0])){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
isArray(arguments[0])){ ---> c <--- =this.options.values;e=arguments

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{c=this.options.values; ---> e <--- =arguments[0];for(f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e=arguments[0];for( ---> f <--- =0;f<c.length;f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0];for(f=0; ---> f <--- <c.length;f+=1){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(f=0;f< ---> c <--- .length;f+=1){c[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;f<c.length; ---> f <--- +=1){c[f]=this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.length;f+=1){ ---> c <--- [f]=this._trimAlignValue(e[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
length;f+=1){c[ ---> f <--- ]=this._trimAlignValue(e[f]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c[f]=this._trimAlignValue( ---> e <--- [f]);this._change(null

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f]=this._trimAlignValue(e[ ---> f <--- ]);this._change(null,f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
]);this._change(null, ---> f <--- );}this._refreshValue();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.values.length?this._values( ---> a <--- ):this.value();}}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- ,e=0;if(d.isArray

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c, ---> e <--- =0;if(d.isArray(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var c,e=0;if( ---> d <--- .isArray(this.options.values))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.options.values)){ ---> e <--- =this.options.values.length;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.values.length;} ---> d <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
apply(this,arguments);switch( ---> a <--- ){case"disabled":if(b){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){case"disabled":if( ---> b <--- ){this.handles.filter(".ui-state-focus")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._refreshValue();for( ---> c <--- =0;c<e;c+=1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
();for(c=0; ---> c <--- <e;c+=1){this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(c=0;c< ---> e <--- ;c+=1){this._change(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(c=0;c<e; ---> c <--- +=1){this._change(null,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
1){this._change(null, ---> c <--- );}this._animateOff=false;break

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_value:function(){var  ---> a <--- =this.options.value;returna=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=this.options.value;return ---> a <--- =this._trimAlignValue(a);},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
value;returna=this._trimAlignValue( ---> a <--- );},_values:function(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_values:function(a){var  ---> b <--- ,c;if(arguments.length){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b, ---> c <--- ;if(arguments.length){b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c;if(arguments.length){ ---> b <--- =this.options.values[a];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=this.options.values[ ---> a <--- ];returnb=this._trimAlignValue(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.values[a];return ---> b <--- =this._trimAlignValue(b);}else

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
];returnb=this._trimAlignValue( ---> b <--- );}else{b=this.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._trimAlignValue(b);}else{ ---> b <--- =this.options.values.slice()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.values.slice();for( ---> c <--- =0;c<b.length;c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
();for(c=0; ---> c <--- <b.length;c+=1){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(c=0;c< ---> b <--- .length;c+=1){b[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;c<b.length; ---> c <--- +=1){b[c]=this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.length;c+=1){ ---> b <--- [c]=this._trimAlignValue(b[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
length;c+=1){b[ ---> c <--- ]=this._trimAlignValue(b[c]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b[c]=this._trimAlignValue( ---> b <--- [c]);}returnb;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c]=this._trimAlignValue(b[ ---> c <--- ]);}returnb;}},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b[c]);}return ---> b <--- ;}},_trimAlignValue:function(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_trimAlignValue:function(a){if( ---> a <--- <this._valueMin()){returnthis

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._valueMin();}if( ---> a <--- >this._valueMax()){returnthis

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis._valueMax();}var  ---> b <--- =this.options.step>0?this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
?this.options.step:1, ---> c <--- =a%b;a=a-c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.step:1,c= ---> a <--- %b;a=a-c;if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.step:1,c=a% ---> b <--- ;a=a-c;if(Math

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:1,c=a%b; ---> a <--- =a-c;if(Math.abs

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=a%b;a= ---> a <--- -c;if(Math.abs(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=a%b;a=a- ---> c <--- ;if(Math.abs(c)*

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-c;if(Math.abs( ---> c <--- )*2>=b){a+=c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.abs(c)*2>= ---> b <--- ){a+=c>0?b:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)*2>=b){ ---> a <--- +=c>0?b:-b;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
)*2>=b){a+= ---> c <--- >0?b:-b;}return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a+=c>0? ---> b <--- :-b;}returnparseFloat(a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a+=c>0?b:- ---> b <--- ;}returnparseFloat(a.toFixed(5

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b:-b;}returnparseFloat( ---> a <--- .toFixed(5));},_valueMin

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_refreshValue:function(){var  ---> a <--- =this.options.range,b=this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var a=this.options.range, ---> b <--- =this.options,c=this,e

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.range,b=this.options, ---> c <--- =this,e=!this._animateOff?

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.options,c=this, ---> e <--- =!this._animateOff?b.animate:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this,e=!this._animateOff? ---> b <--- .animate:false,f,h={

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._animateOff?b.animate:false, ---> f <--- ,h={},g,i,

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
?b.animate:false,f, ---> h <--- ={},g,i,j,

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
false,f,h={}, ---> g <--- ,i,j,l;if(this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
f,h={},g, ---> i <--- ,j,l;if(this.options

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
h={},g,i, ---> j <--- ,l;if(this.options.values

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
{},g,i,j, ---> l <--- ;if(this.options.values&&this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
handles.each(function(k){ ---> f <--- =(c.values(k)-c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(k){f=( ---> c <--- .values(k)-c._valueMin(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
){f=(c.values( ---> k <--- )-c._valueMin())/(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=(c.values(k)- ---> c <--- ._valueMin())/(c._valueMax

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-c._valueMin())/( ---> c <--- ._valueMax()-c._valueMin()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
)/(c._valueMax()- ---> c <--- ._valueMin())*100;h[

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
c._valueMin())*100; ---> h <--- [c.orientation==="horizontal"?"left":"bottom"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_valueMin())*100;h[ ---> c <--- .orientation==="horizontal"?"left":"bottom"]=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
orientation==="horizontal"?"left":"bottom"]= ---> f <--- +"%";d(this).stop(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"left":"bottom"]=f+"%"; ---> d <--- (this).stop(1,1)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
).stop(1,1)[ ---> e <--- ?"animate":"css"](h,b.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
)[e?"animate":"css"]( ---> h <--- ,b.animate);if(c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e?"animate":"css"](h, ---> b <--- .animate);if(c.options.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h,b.animate);if( ---> c <--- .options.range===true){if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
options.range===true){if( ---> c <--- .orientation==="horizontal"){if(k===

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
c.orientation==="horizontal"){if( ---> k <--- ===0){c.range.stop(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(k===0){ ---> c <--- .range.stop(1,1)[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
range.stop(1,1)[ ---> e <--- ?"animate":"css"]({left:f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?"animate":"css"]({left: ---> f <--- +"%"},b.animate);}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
({left:f+"%"}, ---> b <--- .animate);}if(k===1

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.animate);}if( ---> k <--- ===1){c.range[e?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(k===1){ ---> c <--- .range[e?"animate":"css"](

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
k===1){c.range[ ---> e <--- ?"animate":"css"]({width:f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?"animate":"css"]({width: ---> f <--- -g+"%"},{queue:false

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:"css"]({width:f- ---> g <--- +"%"},{queue:false,duration

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},{queue:false,duration: ---> b <--- .animate});}}else{if

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
});}}else{if( ---> k <--- ===0){c.range.stop(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(k===0){ ---> c <--- .range.stop(1,1)[

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
range.stop(1,1)[ ---> e <--- ?"animate":"css"]({bottom:f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?"animate":"css"]({bottom: ---> f <--- +"%"},b.animate);}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
({bottom:f+"%"}, ---> b <--- .animate);}if(k===1

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.animate);}if( ---> k <--- ===1){c.range[e?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(k===1){ ---> c <--- .range[e?"animate":"css"](

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
k===1){c.range[ ---> e <--- ?"animate":"css"]({height:f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?"animate":"css"]({height: ---> f <--- -g+"%"},{queue:false

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:"css"]({height:f- ---> g <--- +"%"},{queue:false,duration

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},{queue:false,duration: ---> b <--- .animate});}}}g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b.animate});}}} ---> g <--- =f;});}else{i

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
animate});}}}g= ---> f <--- ;});}else{i=this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=f;});}else{ ---> i <--- =this.value();j=this

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
{i=this.value(); ---> j <--- =this._valueMin();l=this

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
;j=this._valueMin(); ---> l <--- =this._valueMax();f=l

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;l=this._valueMax(); ---> f <--- =l!==j?(i-j)

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._valueMax();f= ---> l <--- !==j?(i-j)/(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
._valueMax();f=l!== ---> j <--- ?(i-j)/(l-

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);f=l!==j?( ---> i <--- -j)/(l-j)*

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
f=l!==j?(i- ---> j <--- )/(l-j)*100:

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
j?(i-j)/( ---> l <--- -j)*100:0;h[

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
(i-j)/(l- ---> j <--- )*100:0;h[c.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
l-j)*100:0; ---> h <--- [c.orientation==="horizontal"?"left":"bottom"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
j)*100:0;h[ ---> c <--- .orientation==="horizontal"?"left":"bottom"]=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
orientation==="horizontal"?"left":"bottom"]= ---> f <--- +"%";this.handle.stop(1

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
handle.stop(1,1)[ ---> e <--- ?"animate":"css"](h,b.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
)[e?"animate":"css"]( ---> h <--- ,b.animate);if(a===

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e?"animate":"css"](h, ---> b <--- .animate);if(a==="min"&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h,b.animate);if( ---> a <--- ==="min"&&this.orientation==="horizontal"){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
range.stop(1,1)[ ---> e <--- ?"animate":"css"]({width:f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?"animate":"css"]({width: ---> f <--- +"%"},b.animate);}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
({width:f+"%"}, ---> b <--- .animate);}if(a==="max"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.animate);}if( ---> a <--- ==="max"&&this.orientation==="horizontal"){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
orientation==="horizontal"){this.range[ ---> e <--- ?"animate":"css"]({width:100

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:"css"]({width:100- ---> f <--- +"%"},{queue:false,duration

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},{queue:false,duration: ---> b <--- .animate});}if(a===

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.animate});}if( ---> a <--- ==="min"&&this.orientation==="vertical"){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
range.stop(1,1)[ ---> e <--- ?"animate":"css"]({height:f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
?"animate":"css"]({height: ---> f <--- +"%"},b.animate);}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
({height:f+"%"}, ---> b <--- .animate);}if(a==="max"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.animate);}if( ---> a <--- ==="max"&&this.orientation==="vertical"){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
orientation==="vertical"){this.range[ ---> e <--- ?"animate":"css"]({height:100

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:"css"]({height:100- ---> f <--- +"%"},{queue:false,duration

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
},{queue:false,duration: ---> b <--- .animate});}}}})

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
});}}}}); ---> d <--- .extend(d.ui.slider,{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}}});d.extend( ---> d <--- .ui.slider,{version:"1.8.5"}

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(d,p){function ---> u <--- (){return++v;}functionw

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
){functionu(){return++ ---> v <--- ;}functionw(){return++x

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
(){return++v;}function ---> w <--- (){return++x;}var v

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
;}functionw(){return++ ---> x <--- ;}var v=0,x=0

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
(){return++x;}var  ---> v <--- =0,x=0;d.widget

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
++x;}var v=0, ---> x <--- =0;d.widget("ui.tabs",{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var v=0,x=0; ---> d <--- .widget("ui.tabs",{options:{add

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,e){if( ---> a <--- =="selected"){this.options.collapsible&&

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"selected"){this.options.collapsible&& ---> e <--- ==this.options.selected||this.select

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.selected||this.select( ---> e <--- );}else{this.options[a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{this.options[ ---> a <--- ]=e;this._tabify();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
else{this.options[a]= ---> e <--- ;this._tabify();}},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_tabId:function(a){return ---> a <--- .title&&a.title.replace(/\s/g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){returna.title&& ---> a <--- .title.replace(/\s/g,"_").

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
"")||this.options.idPrefix+ ---> u <--- ();},_sanitizeSelector:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_sanitizeSelector:function(a){return ---> a <--- .replace(/:/g,"\\:");},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_cookie:function(){var  ---> a <--- =this.cookie||(this.cookie=

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.cookie.name||"ui-tabs-"+ ---> w <--- ());returnd.cookie.apply

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
||"ui-tabs-"+w());return ---> d <--- .cookie.apply(null,[a]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.cookie.apply(null,[ ---> a <--- ].concat(d.makeArray(arguments)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(null,[a].concat( ---> d <--- .makeArray(arguments)));},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,e){return{tab: ---> a <--- ,panel:e,index:this.anchors

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{return{tab:a,panel: ---> e <--- ,index:this.anchors.index(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,index:this.anchors.index( ---> a <--- )};},_cleanup:function()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> a <--- =d(this);a.html(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var a= ---> d <--- (this);a.html(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=d(this); ---> a <--- .html(a.data("label.tabs"))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d(this);a.html( ---> a <--- .data("label.tabs")).removeData("label.tabs"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,_tabify:function(a){function ---> e <--- (g,f){g.css(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{functione(g,f){ ---> g <--- .css("display","");!d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("display","");! ---> d <--- .support.opacity&&f.opacity&&g

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);!d.support.opacity&& ---> f <--- .opacity&&g[0].style.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.support.opacity&&f.opacity&& ---> g <--- [0].style.removeAttribute("filter")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
style.removeAttribute("filter");}var  ---> b <--- =this,c=this.options,h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"filter");}var b=this, ---> c <--- =this.options,h=/^#.+/;this

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,c=this.options, ---> h <--- =/^#.+/;this.list=this.element

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
eq(0);this.lis= ---> d <--- (" > li:has(a[href])",this.list);this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
lis.map(function(){return ---> d <--- ("a",this)[0];}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];});this.panels= ---> d <--- ([]);this.anchors.each

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(g,f){var  ---> i <--- =d(f).attr("href")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(g,f){var i= ---> d <--- (f).attr("href"),l

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,f){var i=d( ---> f <--- ).attr("href"),l=i

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
(f).attr("href"), ---> l <--- =i.split("#")[0]

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
).attr("href"),l= ---> i <--- .split("#")[0],q

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
.split("#")[0], ---> q <--- ;if(l&&(l===location.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
)[0],q;if( ---> l <--- &&(l===location.toString().

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
],q;if(l&&( ---> l <--- ===location.toString().split("#"

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
split("#")[0]||( ---> q <--- =d("base")[0])&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"#")[0]||(q= ---> d <--- ("base")[0])&&l===

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
d("base")[0])&& ---> l <--- ===q.href)){i=f

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
"base")[0])&&l=== ---> q <--- .href)){i=f.hash

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
&&l===q.href)){ ---> i <--- =f.hash;f.href=i

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
===q.href)){i= ---> f <--- .hash;f.href=i;}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
)){i=f.hash; ---> f <--- .href=i;}if(h.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=f.hash;f.href= ---> i <--- ;}if(h.test(i)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
f.href=i;}if( ---> h <--- .test(i)){b.panels

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i;}if(h.test( ---> i <--- )){b.panels=b.panels

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(h.test(i)){ ---> b <--- .panels=b.panels.add(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(i)){b.panels= ---> b <--- .panels.add(b._sanitizeSelector(i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.panels=b.panels.add( ---> b <--- ._sanitizeSelector(i));}else{

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.panels.add(b._sanitizeSelector( ---> i <--- ));}else{if(i&&

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i));}else{if( ---> i <--- &&i!=="#"){d.data(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{if(i&& ---> i <--- !=="#"){d.data(f,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(i&&i!=="#"){ ---> d <--- .data(f,"href.tabs",i);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
i!=="#"){d.data( ---> f <--- ,"href.tabs",i);d.data(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{d.data(f,"href.tabs", ---> i <--- );d.data(f,"load.tabs",

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
data(f,"href.tabs",i); ---> d <--- .data(f,"load.tabs",i.replace

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"href.tabs",i);d.data( ---> f <--- ,"load.tabs",i.replace(/#.*$/,""

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.data(f,"load.tabs", ---> i <--- .replace(/#.*$/,""));i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.replace(/#.*$/,"")); ---> i <--- =b._tabId(f);f.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(/#.*$/,""));i= ---> b <--- ._tabId(f);f.href=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
));i=b._tabId( ---> f <--- );f.href="#"+i;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
i=b._tabId(f); ---> f <--- .href="#"+i;f=d

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
f);f.href="#"+ ---> i <--- ;f=d("#"+i);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;f.href="#"+i; ---> f <--- =d("#"+i);if(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.href="#"+i;f= ---> d <--- ("#"+i);if(!f

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+i;f=d("#"+ ---> i <--- );if(!f.length){

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
("#"+i);if(! ---> f <--- .length){f=d(c.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!f.length){ ---> f <--- =d(c.panelTemplate).attr(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(!f.length){f= ---> d <--- (c.panelTemplate).attr("id",

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f.length){f=d( ---> c <--- .panelTemplate).attr("id",i)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
c.panelTemplate).attr("id", ---> i <--- ).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter( ---> b <--- .panels[g-1]||b.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-tabs-panel ui-widget-content ui-corner-bottom").insertAfter(b.panels[ ---> g <--- -1]||b.list);f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.panels[g-1]|| ---> b <--- .list);f.data("destroy.tabs",

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
-1]||b.list); ---> f <--- .data("destroy.tabs",true);}b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.data("destroy.tabs",true);} ---> b <--- .panels=b.panels.add(f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,true);}b.panels= ---> b <--- .panels.add(f);}else

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.panels=b.panels.add( ---> f <--- );}else{c.disabled.push

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.add(f);}else{ ---> c <--- .disabled.push(g);}}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{c.disabled.push( ---> g <--- );}}});if(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}}});if( ---> a <--- ){this.element.addClass("ui-tabs ui-widget ui-widget-content ui-corner-all")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
panels.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom");if( ---> c <--- .selected===p){location.hash&&

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-tabs-panel ui-widget-content ui-corner-bottom");if(c.selected=== ---> p <--- ){location.hash&&this.anchors.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
function(g,f){if( ---> f <--- .hash==location.hash){c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f.hash==location.hash){ ---> c <--- .selected=g;returnfalse;}}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
location.hash){c.selected= ---> g <--- ;returnfalse;}});if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
false;}});if(typeof ---> c <--- .selected!=="number"&&c.cookie){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(typeofc.selected!=="number"&& ---> c <--- .cookie){c.selected=parseInt(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
selected!=="number"&&c.cookie){ ---> c <--- .selected=parseInt(b._cookie()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
cookie){c.selected=parseInt( ---> b <--- ._cookie(),10);}if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),10);}if(typeof ---> c <--- .selected!=="number"&&this.lis.filter

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.filter(".ui-tabs-selected").length){ ---> c <--- .selected=this.lis.index(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
lis.filter(".ui-tabs-selected"));} ---> c <--- .selected=c.selected||(this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
".ui-tabs-selected"));}c.selected= ---> c <--- .selected||(this.lis.length?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-1);}else{if( ---> c <--- .selected===null){c.selected=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c.selected===null){ ---> c <--- .selected=-1;}}c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.selected=-1;}} ---> c <--- .selected=c.selected>=0&&this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-1;}}c.selected= ---> c <--- .selected>=0&&this.anchors[c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.selected>=0&&this.anchors[ ---> c <--- .selected]||c.selected<0?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.anchors[c.selected]|| ---> c <--- .selected<0?c.selected:0

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
selected]||c.selected<0? ---> c <--- .selected:0;c.disabled=d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
<0?c.selected:0; ---> c <--- .disabled=d.unique(c.disabled

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.selected:0;c.disabled= ---> d <--- .unique(c.disabled.concat(d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.disabled=d.unique( ---> c <--- .disabled.concat(d.map(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.unique(c.disabled.concat( ---> d <--- .map(this.lis.filter(".ui-state-disabled"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
".ui-state-disabled"),function(g){return ---> b <--- .lis.index(g);})

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnb.lis.index( ---> g <--- );}))).sort()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}))).sort(); ---> d <--- .inArray(c.selected,c.disabled

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.sort();d.inArray( ---> c <--- .selected,c.disabled)!=-1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.inArray(c.selected, ---> c <--- .disabled)!=-1&&c.disabled

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,c.disabled)!=-1&& ---> c <--- .disabled.splice(d.inArray(c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
-1&&c.disabled.splice( ---> d <--- .inArray(c.selected,c.disabled

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled.splice(d.inArray( ---> c <--- .selected,c.disabled),1)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.inArray(c.selected, ---> c <--- .disabled),1);this.panels

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
lis.removeClass("ui-tabs-selected ui-state-active");if( ---> c <--- .selected>=0&&this.anchors.length

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
length){this.panels.eq( ---> c <--- .selected).removeClass("ui-tabs-hide");this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-tabs-hide");this.lis.eq( ---> c <--- .selected).addClass("ui-tabs-selected ui-state-active");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.selected).addClass("ui-tabs-selected ui-state-active"); ---> b <--- .element.queue("tabs",function()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("tabs",function(){ ---> b <--- ._trigger("show",null,b._ui

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{b._trigger("show",null, ---> b <--- ._ui(b.anchors[c.selected

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("show",null,b._ui( ---> b <--- .anchors[c.selected],b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,b._ui(b.anchors[ ---> c <--- .selected],b.panels[c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.anchors[c.selected], ---> b <--- .panels[c.selected]));

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.selected],b.panels[ ---> c <--- .selected]));});this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);});this.load( ---> c <--- .selected);}d(window).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.load(c.selected);} ---> d <--- (window).bind("unload",function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("unload",function(){ ---> b <--- .lis.add(b.anchors).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(){b.lis.add( ---> b <--- .anchors).unbind(".tabs");b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.anchors).unbind(".tabs"); ---> b <--- .lis=b.anchors=b.panels

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
unbind(".tabs");b.lis= ---> b <--- .anchors=b.panels=null;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.lis=b.anchors= ---> b <--- .panels=null;});}else

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=null;});}else{ ---> c <--- .selected=this.lis.index(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
".ui-tabs-selected"));}this.element[ ---> c <--- .collapsible?"addClass":"removeClass"]("ui-tabs-collapsible")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
?"addClass":"removeClass"]("ui-tabs-collapsible"); ---> c <--- .cookie&&this._cookie(c.selected

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.cookie&&this._cookie( ---> c <--- .selected,c.cookie);a=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&this._cookie(c.selected, ---> c <--- .cookie);a=0;for(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.selected,c.cookie); ---> a <--- =0;for(var j;j=

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
);a=0;for(var  ---> j <--- ;j=this.lis[a];

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
a=0;for(var j; ---> j <--- =this.lis[a];a++

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var j;j=this.lis[ ---> a <--- ];a++){d(j)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
j=this.lis[a]; ---> a <--- ++){d(j)[d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
lis[a];a++){ ---> d <--- (j)[d.inArray(a,

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
a];a++){d( ---> j <--- )[d.inArray(a,c.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a++){d(j)[ ---> d <--- .inArray(a,c.disabled)!=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d(j)[d.inArray( ---> a <--- ,c.disabled)!=-1&&!

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
j)[d.inArray(a, ---> c <--- .disabled)!=-1&&!d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.disabled)!=-1&&! ---> d <--- (j).hasClass("ui-tabs-selected")?"addClass"

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
disabled)!=-1&&!d( ---> j <--- ).hasClass("ui-tabs-selected")?"addClass":"removeClass"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"addClass":"removeClass"]("ui-state-disabled");} ---> c <--- .cache===false&&this.anchors.removeData

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).unbind(".tabs");if( ---> c <--- .event!=="mouseover"){var k=function

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(c.event!=="mouseover"){var  ---> k <--- =function(g,f){f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
k=function(g,f){ ---> f <--- .is(":not(.ui-state-disabled)")&&f.addClass(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){f.is(":not(.ui-state-disabled)")&& ---> f <--- .addClass("ui-state-"+g);},

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
":not(.ui-state-disabled)")&&f.addClass("ui-state-"+ ---> g <--- );},n=function(g,

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-state-"+g);}, ---> n <--- =function(g,f){f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
n=function(g,f){ ---> f <--- .removeClass("ui-state-"+g);};

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
f){f.removeClass("ui-state-"+ ---> g <--- );};this.lis.bind(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("mouseover.tabs",function(){ ---> k <--- ("hover",d(this));}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){k("hover", ---> d <--- (this));});this.

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("mouseout.tabs",function(){ ---> n <--- ("hover",d(this));}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){n("hover", ---> d <--- (this));});this.

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("focus.tabs",function(){ ---> k <--- ("focus",d(this).closest(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){k("focus", ---> d <--- (this).closest("li"));

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("blur.tabs",function(){ ---> n <--- ("focus",d(this).closest(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){n("focus", ---> d <--- (this).closest("li"));

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
"li"));});}var  ---> m <--- ,o;if(c.fx){

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
);});}var m, ---> o <--- ;if(c.fx){if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var m,o;if( ---> c <--- .fx){if(d.isArray(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c.fx){if( ---> d <--- .isArray(c.fx)){m

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
fx){if(d.isArray( ---> c <--- .fx)){m=c.fx

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
.isArray(c.fx)){ ---> m <--- =c.fx[0];o=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(c.fx)){m= ---> c <--- .fx[0];o=c.

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
m=c.fx[0]; ---> o <--- =c.fx[1];}else

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.fx[0];o= ---> c <--- .fx[1];}else{m

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
.fx[1];}else{ ---> m <--- =o=c.fx;}}var 

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
[1];}else{m= ---> o <--- =c.fx;}}var r=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
];}else{m=o= ---> c <--- .fx;}}var r=o?

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
o=c.fx;}}var  ---> r <--- =o?function(g,f){

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
c.fx;}}var r= ---> o <--- ?function(g,f){d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
o?function(g,f){ ---> d <--- (g).closest("li").addClass

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
function(g,f){d( ---> g <--- ).closest("li").addClass("ui-tabs-selected ui-state-active"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
("li").addClass("ui-tabs-selected ui-state-active"); ---> f <--- .hide().removeClass("ui-tabs-hide").

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
).removeClass("ui-tabs-hide").animate( ---> o <--- ,o.duration||"normal",function()

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
removeClass("ui-tabs-hide").animate(o, ---> o <--- .duration||"normal",function(){e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.duration||"normal",function(){ ---> e <--- (f,o);b._trigger(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
||"normal",function(){e( ---> f <--- ,o);b._trigger("show",

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){e(f, ---> o <--- );b._trigger("show",null,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){e(f,o); ---> b <--- ._trigger("show",null,b._ui

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b._trigger("show",null, ---> b <--- ._ui(g,f[0])

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("show",null,b._ui( ---> g <--- ,f[0]));})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,null,b._ui(g, ---> f <--- [0]));});}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}:function(g,f){ ---> d <--- (g).closest("li").addClass

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
function(g,f){d( ---> g <--- ).closest("li").addClass("ui-tabs-selected ui-state-active"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
("li").addClass("ui-tabs-selected ui-state-active"); ---> f <--- .removeClass("ui-tabs-hide");b._trigger(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);f.removeClass("ui-tabs-hide"); ---> b <--- ._trigger("show",null,b._ui

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b._trigger("show",null, ---> b <--- ._ui(g,f[0])

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("show",null,b._ui( ---> g <--- ,f[0]));},

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,null,b._ui(g, ---> f <--- [0]));},s=

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
f[0]));}, ---> s <--- =m?function(g,f){

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
0]));},s= ---> m <--- ?function(g,f){f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
m?function(g,f){ ---> f <--- .animate(m,m.duration||"normal"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
g,f){f.animate( ---> m <--- ,m.duration||"normal",function()

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
f){f.animate(m, ---> m <--- .duration||"normal",function(){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.duration||"normal",function(){ ---> b <--- .lis.removeClass("ui-tabs-selected ui-state-active");f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.lis.removeClass("ui-tabs-selected ui-state-active"); ---> f <--- .addClass("ui-tabs-hide");e(f,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);f.addClass("ui-tabs-hide"); ---> e <--- (f,m);b.element.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f.addClass("ui-tabs-hide");e( ---> f <--- ,m);b.element.dequeue(

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("ui-tabs-hide");e(f, ---> m <--- );b.element.dequeue("tabs")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);e(f,m); ---> b <--- .element.dequeue("tabs");})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}:function(g,f){ ---> b <--- .lis.removeClass("ui-tabs-selected ui-state-active");f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.lis.removeClass("ui-tabs-selected ui-state-active"); ---> f <--- .addClass("ui-tabs-hide");b.element.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);f.addClass("ui-tabs-hide"); ---> b <--- .element.dequeue("tabs");};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;};this.anchors.bind( ---> c <--- .event+".tabs",function(){var 

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
event+".tabs",function(){var  ---> g <--- =this,f=d(g).

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){var g=this, ---> f <--- =d(g).closest("li")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var g=this,f= ---> d <--- (g).closest("li"),i

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
var g=this,f=d( ---> g <--- ).closest("li"),i=b

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(g).closest("li"), ---> i <--- =b.panels.filter(":not(.ui-tabs-hide)"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).closest("li"),i= ---> b <--- .panels.filter(":not(.ui-tabs-hide)"),l=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
b.panels.filter(":not(.ui-tabs-hide)"), ---> l <--- =d(b._sanitizeSelector(g.hash

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
panels.filter(":not(.ui-tabs-hide)"),l= ---> d <--- (b._sanitizeSelector(g.hash))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
filter(":not(.ui-tabs-hide)"),l=d( ---> b <--- ._sanitizeSelector(g.hash));if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,l=d(b._sanitizeSelector( ---> g <--- .hash));if(f.hasClass

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(g.hash));if( ---> f <--- .hasClass("ui-tabs-selected")&&!c.collapsible

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.hasClass("ui-tabs-selected")&&! ---> c <--- .collapsible||f.hasClass("ui-state-disabled")||

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-tabs-selected")&&!c.collapsible|| ---> f <--- .hasClass("ui-state-disabled")||f.hasClass(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
collapsible||f.hasClass("ui-state-disabled")|| ---> f <--- .hasClass("ui-state-processing")||b.panels.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)||f.hasClass("ui-state-processing")|| ---> b <--- .panels.filter(":animated").length||

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
panels.filter(":animated").length|| ---> b <--- ._trigger("select",null,b._ui

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||b._trigger("select",null, ---> b <--- ._ui(this,l[0])

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,null,b._ui(this, ---> l <--- [0]))===false){this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.blur();returnfalse;} ---> c <--- .selected=b.anchors.index(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;returnfalse;}c.selected= ---> b <--- .anchors.index(this);b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.anchors.index(this); ---> b <--- .abort();if(c.collapsible

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.abort();if( ---> c <--- .collapsible){if(f.hasClass(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c.collapsible){if( ---> f <--- .hasClass("ui-tabs-selected")){c.selected

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.hasClass("ui-tabs-selected")){ ---> c <--- .selected=-1;c.cookie&&

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){c.selected=-1; ---> c <--- .cookie&&b._cookie(c.selected

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
selected=-1;c.cookie&& ---> b <--- ._cookie(c.selected,c.cookie

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.cookie&&b._cookie( ---> c <--- .selected,c.cookie);b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b._cookie(c.selected, ---> c <--- .cookie);b.element.queue(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.selected,c.cookie); ---> b <--- .element.queue("tabs",function()

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("tabs",function(){ ---> s <--- (g,i);}).dequeue

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("tabs",function(){s( ---> g <--- ,i);}).dequeue("tabs"

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){s(g, ---> i <--- );}).dequeue("tabs");

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
returnfalse;}else{if(! ---> i <--- .length){c.cookie&&b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(!i.length){ ---> c <--- .cookie&&b._cookie(c.selected

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
i.length){c.cookie&& ---> b <--- ._cookie(c.selected,c.cookie

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.cookie&&b._cookie( ---> c <--- .selected,c.cookie);b.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b._cookie(c.selected, ---> c <--- .cookie);b.element.queue(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.selected,c.cookie); ---> b <--- .element.queue("tabs",function()

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("tabs",function(){ ---> r <--- (g,l);});b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("tabs",function(){r( ---> g <--- ,l);});b.load

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){r(g, ---> l <--- );});b.load(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(g,l);}); ---> b <--- .load(b.anchors.index(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);});b.load( ---> b <--- .anchors.index(this));this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
();returnfalse;}}} ---> c <--- .cookie&&b._cookie(c.selected

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
false;}}}c.cookie&& ---> b <--- ._cookie(c.selected,c.cookie

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}c.cookie&&b._cookie( ---> c <--- .selected,c.cookie);if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b._cookie(c.selected, ---> c <--- .cookie);if(l.length)

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
selected,c.cookie);if( ---> l <--- .length){i.length&&b.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(l.length){ ---> i <--- .length&&b.element.queue("tabs"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
l.length){i.length&& ---> b <--- .element.queue("tabs",function()

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("tabs",function(){ ---> s <--- (g,i);});b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("tabs",function(){s( ---> g <--- ,i);});b.element

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){s(g, ---> i <--- );});b.element.queue

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(g,i);}); ---> b <--- .element.queue("tabs",function()

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("tabs",function(){ ---> r <--- (g,l);});b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("tabs",function(){r( ---> g <--- ,l);});b.load

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){r(g, ---> l <--- );});b.load(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(g,l);}); ---> b <--- .load(b.anchors.index(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);});b.load( ---> b <--- .anchors.index(this));}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{throw"jQuery UI Tabs: Mismatching fragment identifier.";} ---> d <--- .browser.msie&&this.blur()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){if(typeof ---> a <--- =="string"){a=this.anchors.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(typeofa=="string"){ ---> a <--- =this.anchors.index(this.anchors

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.anchors.filter("[href$="+ ---> a <--- +"]"));}returna;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+a+"]"));}return ---> a <--- ;},destroy:function(){var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},destroy:function(){var  ---> a <--- =this.options;this.abort()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
anchors.each(function(){var  ---> e <--- =d.data(this,"href.tabs");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var e= ---> d <--- .data(this,"href.tabs");if(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
data(this,"href.tabs");if( ---> e <--- ){this.href=e;}var 

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e){this.href= ---> e <--- ;}var b=d(this).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.href=e;}var  ---> b <--- =d(this).unbind(".tabs")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.href=e;}var b= ---> d <--- (this).unbind(".tabs");d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(this).unbind(".tabs"); ---> d <--- .each(["href","load","cache"]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
],function(c,h){ ---> b <--- .removeData(h+".tabs");})

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
c,h){b.removeData( ---> h <--- +".tabs");});});

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
panels).each(function(){ ---> d <--- .data(this,"destroy.tabs")?d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.data(this,"destroy.tabs")? ---> d <--- (this).remove():d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d(this).remove(): ---> d <--- (this).removeClass("ui-state-default ui-corner-top ui-tabs-selected ui-state-active ui-state-hover ui-state-focus ui-state-disabled ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.removeClass("ui-state-default ui-corner-top ui-tabs-selected ui-state-active ui-state-hover ui-state-focus ui-state-disabled ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");}); ---> a <--- .cookie&&this._cookie(null,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.cookie&&this._cookie(null, ---> a <--- .cookie);returnthis;},add

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,e,b){if( ---> b <--- ===p){b=this.anchors.

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
e,b){if(b=== ---> p <--- ){b=this.anchors.length;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(b===p){ ---> b <--- =this.anchors.length;}var c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.anchors.length;}var  ---> c <--- =this,h=this.options;e

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;}var c=this, ---> h <--- =this.options;e=d(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,h=this.options; ---> e <--- =d(h.tabTemplate.replace(/#\{href\}/g

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=this.options;e= ---> d <--- (h.tabTemplate.replace(/#\{href\}/g,a

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.options;e=d( ---> h <--- .tabTemplate.replace(/#\{href\}/g,a).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(h.tabTemplate.replace(/#\{href\}/g, ---> a <--- ).replace(/#\{label\}/g,e));

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
/#\{href\}/g,a).replace(/#\{label\}/g, ---> e <--- ));a=!a.indexOf(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.replace(/#\{label\}/g,e)); ---> a <--- =!a.indexOf("#")?a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/#\{label\}/g,e));a=! ---> a <--- .indexOf("#")?a.replace(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=!a.indexOf("#")? ---> a <--- .replace("#",""):this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"#",""):this._tabId( ---> d <--- ("a",e)[0]);

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:this._tabId(d("a", ---> e <--- )[0]);e.addClass(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"a",e)[0]); ---> e <--- .addClass("ui-state-default ui-corner-top").data("destroy.tabs",

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.data("destroy.tabs",true);var  ---> j <--- =d("#"+a);j.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("destroy.tabs",true);var j= ---> d <--- ("#"+a);j.length||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var j=d("#"+ ---> a <--- );j.length||(j=d

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
j=d("#"+a); ---> j <--- .length||(j=d(h.

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
+a);j.length||( ---> j <--- =d(h.panelTemplate).attr(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);j.length||(j= ---> d <--- (h.panelTemplate).attr("id",

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
j.length||(j=d( ---> h <--- .panelTemplate).attr("id",a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h.panelTemplate).attr("id", ---> a <--- ).data("destroy.tabs",true));

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.data("destroy.tabs",true)); ---> j <--- .addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");if(b>=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
j.addClass("ui-tabs-panel ui-widget-content ui-corner-bottom ui-tabs-hide");if( ---> b <--- >=this.lis.length){e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b>=this.lis.length){ ---> e <--- .appendTo(this.list);j.

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
e.appendTo(this.list); ---> j <--- .appendTo(this.list[0].

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0].parentNode);}else{ ---> e <--- .insertBefore(this.lis[b])

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{e.insertBefore(this.lis[ ---> b <--- ]);j.insertBefore(this.panels

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.lis[b]); ---> j <--- .insertBefore(this.panels[b])

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;j.insertBefore(this.panels[ ---> b <--- ]);}h.disabled=d.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
this.panels[b]);} ---> h <--- .disabled=d.map(h.disabled

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b]);}h.disabled= ---> d <--- .map(h.disabled,function(k

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}h.disabled=d.map( ---> h <--- .disabled,function(k){returnk

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled,function(k){return ---> k <--- >=b?++k:k;})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(k){returnk>= ---> b <--- ?++k:k;});this

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
k){returnk>=b?++ ---> k <--- :k;});this._tabify(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnk>=b?++k: ---> k <--- ;});this._tabify();

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
this.anchors.length==1){ ---> h <--- .selected=0;e.addClass("ui-tabs-selected ui-state-active"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
1){h.selected=0; ---> e <--- .addClass("ui-tabs-selected ui-state-active");j.removeClass(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
0;e.addClass("ui-tabs-selected ui-state-active"); ---> j <--- .removeClass("ui-tabs-hide");this.element.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("tabs",function(){ ---> c <--- ._trigger("show",null,c._ui

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{c._trigger("show",null, ---> c <--- ._ui(c.anchors[0],

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("show",null,c._ui( ---> c <--- .anchors[0],c.panels[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_ui(c.anchors[0], ---> c <--- .panels[0]));})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,this._ui(this.anchors[ ---> b <--- ],this.panels[b]))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
anchors[b],this.panels[ ---> b <--- ]));returnthis;},remove

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},remove:function(a){ ---> a <--- =this._getIndex(a);var e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){a=this._getIndex( ---> a <--- );var e=this.options,b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._getIndex(a);var  ---> e <--- =this.options,b=this.lis

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);var e=this.options, ---> b <--- =this.lis.eq(a).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b=this.lis.eq( ---> a <--- ).remove(),c=this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
eq(a).remove(), ---> c <--- =this.panels.eq(a).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=this.panels.eq( ---> a <--- ).remove();if(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a).remove();if( ---> b <--- .hasClass("ui-tabs-selected")&&this.anchors.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
length>1){this.select( ---> a <--- +(a+1<this.anchors.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.select(a+( ---> a <--- +1<this.anchors.length?1

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
?1:-1));} ---> e <--- .disabled=d.map(d.grep

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
1));}e.disabled= ---> d <--- .map(d.grep(e.disabled

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}e.disabled=d.map( ---> d <--- .grep(e.disabled,function(h

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.map(d.grep( ---> e <--- .disabled,function(h){returnh

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled,function(h){return ---> h <--- !=a;}),function(h)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(h){returnh!= ---> a <--- ;}),function(h){return

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}),function(h){return ---> h <--- >=a?--h:h;})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(h){returnh>= ---> a <--- ?--h:h;});this

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
h){returnh>=a?-- ---> h <--- :h;});this._tabify(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnh>=a?--h: ---> h <--- ;});this._tabify();

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("remove",null,this._ui( ---> b <--- .find("a")[0],c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.find("a")[0], ---> c <--- [0]));returnthis;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},enable:function(a){ ---> a <--- =this._getIndex(a);var e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){a=this._getIndex( ---> a <--- );var e=this.options;if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._getIndex(a);var  ---> e <--- =this.options;if(d.inArray

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var e=this.options;if( ---> d <--- .inArray(a,e.disabled)!=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options;if(d.inArray( ---> a <--- ,e.disabled)!=-1){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(d.inArray(a, ---> e <--- .disabled)!=-1){this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1){this.lis.eq( ---> a <--- ).removeClass("ui-state-disabled");e.disabled

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a).removeClass("ui-state-disabled"); ---> e <--- .disabled=d.grep(e.disabled

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
removeClass("ui-state-disabled");e.disabled= ---> d <--- .grep(e.disabled,function(b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;e.disabled=d.grep( ---> e <--- .disabled,function(b){returnb

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.disabled,function(b){return ---> b <--- !=a;});this._trigger(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(b){returnb!= ---> a <--- ;});this._trigger("enable",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,this._ui(this.anchors[ ---> a <--- ],this.panels[a]))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
anchors[a],this.panels[ ---> a <--- ]));returnthis;}},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},disable:function(a){ ---> a <--- =this._getIndex(a);var e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){a=this._getIndex( ---> a <--- );var e=this.options;if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._getIndex(a);var  ---> e <--- =this.options;if(a!=e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var e=this.options;if( ---> a <--- !=e.selected){this.lis.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.options;if(a!= ---> e <--- .selected){this.lis.eq(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
selected){this.lis.eq( ---> a <--- ).addClass("ui-state-disabled");e.disabled

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a).addClass("ui-state-disabled"); ---> e <--- .disabled.push(a);e.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-state-disabled");e.disabled.push( ---> a <--- );e.disabled.sort();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.disabled.push(a); ---> e <--- .disabled.sort();this._trigger

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,this._ui(this.anchors[ ---> a <--- ],this.panels[a]))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
anchors[a],this.panels[ ---> a <--- ]));}returnthis;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},select:function(a){ ---> a <--- =this._getIndex(a);if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){a=this._getIndex( ---> a <--- );if(a==-1){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getIndex(a);if( ---> a <--- ==-1){if(this.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.selected!=-1){ ---> a <--- =this.options.selected;}else{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}this.anchors.eq( ---> a <--- ).trigger(this.options.event+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},load:function(a){ ---> a <--- =this._getIndex(a);var e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){a=this._getIndex( ---> a <--- );var e=this,b=this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._getIndex(a);var  ---> e <--- =this,b=this.options,c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a);var e=this, ---> b <--- =this.options,c=this.anchors

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,b=this.options, ---> c <--- =this.anchors.eq(a)[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=this.anchors.eq( ---> a <--- )[0],h=d.data

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.eq(a)[0], ---> h <--- =d.data(c,"load.tabs");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a)[0],h= ---> d <--- .data(c,"load.tabs");this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0],h=d.data( ---> c <--- ,"load.tabs");this.abort();

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
this.abort();if(! ---> h <--- ||this.element.queue("tabs").

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
queue("tabs").length!==0&& ---> d <--- .data(c,"cache.tabs")){this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.length!==0&&d.data( ---> c <--- ,"cache.tabs")){this.element.dequeue

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{this.lis.eq( ---> a <--- ).addClass("ui-state-processing");if(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
).addClass("ui-state-processing");if( ---> b <--- .spinner){var j=d("span"

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(b.spinner){var  ---> j <--- =d("span",c);j.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.spinner){var j= ---> d <--- ("span",c);j.data(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var j=d("span", ---> c <--- );j.data("label.tabs",j.

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
j=d("span",c); ---> j <--- .data("label.tabs",j.html()

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
c);j.data("label.tabs", ---> j <--- .html()).html(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
j.html()).html( ---> b <--- .spinner);}this.xhr=d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.spinner);}this.xhr= ---> d <--- .ajax(d.extend({},

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}this.xhr=d.ajax( ---> d <--- .extend({},b.ajaxOptions,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ajax(d.extend({}, ---> b <--- .ajaxOptions,{url:h,success:

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
},b.ajaxOptions,{url: ---> h <--- ,success:function(k,n){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
success:function(k,n){ ---> d <--- (e._sanitizeSelector(c.hash))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(k,n){d( ---> e <--- ._sanitizeSelector(c.hash)).html

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
n){d(e._sanitizeSelector( ---> c <--- .hash)).html(k);

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(c.hash)).html( ---> k <--- );e._cleanup();b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
hash)).html(k); ---> e <--- ._cleanup();b.cache&&d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
k);e._cleanup(); ---> b <--- .cache&&d.data(c,"cache.tabs"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._cleanup();b.cache&& ---> d <--- .data(c,"cache.tabs",true);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.cache&&d.data( ---> c <--- ,"cache.tabs",true);e._trigger(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
data(c,"cache.tabs",true); ---> e <--- ._trigger("load",null,e._ui

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;e._trigger("load",null, ---> e <--- ._ui(e.anchors[a],

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
("load",null,e._ui( ---> e <--- .anchors[a],e.panels[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e._ui(e.anchors[ ---> a <--- ],e.panels[a]))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_ui(e.anchors[a], ---> e <--- .panels[a]));try{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
anchors[a],e.panels[ ---> a <--- ]));try{b.ajaxOptions.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
panels[a]));try{ ---> b <--- .ajaxOptions.success(k,n);

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
;try{b.ajaxOptions.success( ---> k <--- ,n);}catch(m){

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
{b.ajaxOptions.success(k, ---> n <--- );}catch(m){}}

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
(k,n);}catch( ---> m <--- ){}},error:function(k

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
error:function(k,n){ ---> e <--- ._cleanup();e._trigger("load"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
n){e._cleanup(); ---> e <--- ._trigger("load",null,e._ui

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;e._trigger("load",null, ---> e <--- ._ui(e.anchors[a],

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
("load",null,e._ui( ---> e <--- .anchors[a],e.panels[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e._ui(e.anchors[ ---> a <--- ],e.panels[a]))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_ui(e.anchors[a], ---> e <--- .panels[a]));try{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
anchors[a],e.panels[ ---> a <--- ]));try{b.ajaxOptions.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
panels[a]));try{ ---> b <--- .ajaxOptions.error(k,n,a

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
;try{b.ajaxOptions.error( ---> k <--- ,n,a,c);}catch

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
{b.ajaxOptions.error(k, ---> n <--- ,a,c);}catch(m

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ajaxOptions.error(k,n, ---> a <--- ,c);}catch(m){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.error(k,n,a, ---> c <--- );}catch(m){}}

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
,a,c);}catch( ---> m <--- ){}}}));e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
m){}}})); ---> e <--- .element.dequeue("tabs");returnthis

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e){this.anchors.eq( ---> a <--- ).removeData("cache.tabs").data("load.tabs"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
removeData("cache.tabs").data("load.tabs", ---> e <--- );returnthis;},length:function

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.anchors.length;}}); ---> d <--- .extend(d.ui.tabs,{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});d.extend( ---> d <--- .ui.tabs,{version:"1.8.5"}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
tabs,{version:"1.8.5"}); ---> d <--- .extend(d.ui.tabs.prototype

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:"1.8.5"});d.extend( ---> d <--- .ui.tabs.prototype,{rotation:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,e){var  ---> b <--- =this,c=this.options,h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){var b=this, ---> c <--- =this.options,h=b._rotate

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=this,c=this.options, ---> h <--- =b._rotate||(b._rotate=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=this.options,h= ---> b <--- ._rotate||(b._rotate=function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
options,h=b._rotate||( ---> b <--- ._rotate=function(j){clearTimeout(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_rotate=function(j){clearTimeout( ---> b <--- .rotation);b.rotation=setTimeout(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){clearTimeout(b.rotation); ---> b <--- .rotation=setTimeout(function(){var 

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
rotation=setTimeout(function(){var  ---> k <--- =c.selected;b.select(++

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
setTimeout(function(){var k= ---> c <--- .selected;b.select(++k<

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var k=c.selected; ---> b <--- .select(++k<b.anchors.

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
c.selected;b.select(++ ---> k <--- <b.anchors.length?k:0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
selected;b.select(++k< ---> b <--- .anchors.length?k:0);

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
++k<b.anchors.length? ---> k <--- :0);},a);j

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
length?k:0);}, ---> a <--- );j&&j.stopPropagation();

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
:0);},a); ---> j <--- &&j.stopPropagation();});

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
);},a);j&& ---> j <--- .stopPropagation();});e=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
j.stopPropagation();}); ---> e <--- =b._unrotate||(b._unrotate=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
stopPropagation();});e= ---> b <--- ._unrotate||(b._unrotate=!e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);e=b._unrotate||( ---> b <--- ._unrotate=!e?function(j)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
._unrotate||(b._unrotate=! ---> e <--- ?function(j){j.clientX&&

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=!e?function(j){ ---> j <--- .clientX&&b.rotate(null);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(j){j.clientX&& ---> b <--- .rotate(null);}:function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}:function(){t= ---> c <--- .selected;h();});

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(){t=c.selected; ---> h <--- ();});if(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h();});if( ---> a <--- ){this.element.bind("tabsshow",

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.element.bind("tabsshow", ---> h <--- );this.anchors.bind(c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h);this.anchors.bind( ---> c <--- .event+".tabs",e);h(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind(c.event+".tabs", ---> e <--- );h();}else{clearTimeout

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
c.event+".tabs",e); ---> h <--- ();}else{clearTimeout(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
h();}else{clearTimeout( ---> b <--- .rotation);this.element.unbind(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.element.unbind("tabsshow", ---> h <--- );this.anchors.unbind(c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h);this.anchors.unbind( ---> c <--- .event+".tabs",e);delete this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.unbind(c.event+".tabs", ---> e <--- );delete this._rotate;delete this.

[WARNING] The symbol L is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(d,G){function ---> L <--- (){this.debug=false;this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
showButtonPanel:false,autoSize:false}; ---> d <--- .extend(this._defaults,this.regional

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[""]);this.dpDiv= ---> d <--- ('<div id="'+this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-helper-hidden-accessible"></div>');

[WARNING] The symbol E is declared but is apparently never used.
This code can probably be written in a more compact way.
this._mainDivId+'" class="ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all ui-helper-hidden-accessible"></div>');}function ---> E <--- (a,b){d.extend(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}functionE(a,b){ ---> d <--- .extend(a,b);for(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b){d.extend( ---> a <--- ,b);for(var c in b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b){d.extend(a, ---> b <--- );for(var c in b){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b);for(var  ---> c <---  in b){if(b[c]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b);for(var c in  ---> b <--- ){if(b[c]==null

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(var c in b){if( ---> b <--- [c]==null||b[c]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c in b){if(b[ ---> c <--- ]==null||b[c]==G

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b[c]==null|| ---> b <--- [c]==G){a[c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b[c]==null||b[ ---> c <--- ]==G){a[c]=

[WARNING] The symbol G is declared but is apparently never used.
This code can probably be written in a more compact way.
]==null||b[c]== ---> G <--- ){a[c]=b[c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||b[c]==G){ ---> a <--- [c]=b[c];}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[c]==G){a[ ---> c <--- ]=b[c];}}return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
==G){a[c]= ---> b <--- [c];}}returna;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){a[c]=b[ ---> c <--- ];}}returna;}d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=b[c];}}return ---> a <--- ;}d.extend(d.ui,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c];}}returna;} ---> d <--- .extend(d.ui,{datepicker:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}returna;}d.extend( ---> d <--- .ui,{datepicker:{version:"1.8.5"

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
{version:"1.8.5"}});var  ---> y <--- =(new Date).getTime();

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(new Date).getTime(); ---> d <--- .extend(L.prototype,{markerClassName:

[WARNING] The symbol L is declared but is apparently never used.
This code can probably be written in a more compact way.
.getTime();d.extend( ---> L <--- .prototype,{markerClassName:"hasDatepicker",log:

[WARNING] The symbol E is declared but is apparently never used.
This code can probably be written in a more compact way.
},setDefaults:function(a){ ---> E <--- (this._defaults,a||{})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){E(this._defaults, ---> a <--- ||{});returnthis;},

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =null;for(var e in this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{var c=null;for(var  ---> e <---  in this._defaults){var f=a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var e in this._defaults){var  ---> f <--- =a.getAttribute("date:"+e);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
 in this._defaults){var f= ---> a <--- .getAttribute("date:"+e);if(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=a.getAttribute("date:"+ ---> e <--- );if(f){c=c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
getAttribute("date:"+e);if( ---> f <--- ){c=c||{};try

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+e);if(f){ ---> c <--- =c||{};try{c[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(f){c= ---> c <--- ||{};try{c[e]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=c||{};try{ ---> c <--- [e]=eval(f);}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c||{};try{c[ ---> e <--- ]=eval(f);}catch(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
try{c[e]=eval( ---> f <--- );}catch(h){c[

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=eval(f);}catch( ---> h <--- ){c[e]=f;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f);}catch(h){ ---> c <--- [e]=f;}}}e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}catch(h){c[ ---> e <--- ]=f;}}}e=a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(h){c[e]= ---> f <--- ;}}}e=a.nodeName.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[e]=f;}}} ---> e <--- =a.nodeName.toLowerCase();f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]=f;}}}e= ---> a <--- .nodeName.toLowerCase();f=e

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.nodeName.toLowerCase(); ---> f <--- =e=="div"||e=="span";if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.nodeName.toLowerCase();f= ---> e <--- =="div"||e=="span";if(!

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
();f=e=="div"|| ---> e <--- =="span";if(!a.id)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"div"||e=="span";if(! ---> a <--- .id){this.uuid+=1;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
id){this.uuid+=1; ---> a <--- .id="dp"+this.uuid;}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
="dp"+this.uuid;}var  ---> i <--- =this._newInst(d(a),

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var i=this._newInst( ---> d <--- (a),f);i.settings

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var i=this._newInst(d( ---> a <--- ),f);i.settings=d

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this._newInst(d(a), ---> f <--- );i.settings=d.extend(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(d(a),f); ---> i <--- .settings=d.extend({},

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
),f);i.settings= ---> d <--- .extend({},b||{}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
settings=d.extend({}, ---> b <--- ||{},c||{});

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
({},b||{}, ---> c <--- ||{});if(e=="input"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,c||{});if( ---> e <--- =="input"){this._connectDatepicker(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e=="input"){this._connectDatepicker( ---> a <--- ,i);}else{f&&this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"input"){this._connectDatepicker(a, ---> i <--- );}else{f&&this._inlineDatepicker

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,i);}else{ ---> f <--- &&this._inlineDatepicker(a,i);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{f&&this._inlineDatepicker( ---> a <--- ,i);}},_newInst:function

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{f&&this._inlineDatepicker(a, ---> i <--- );}},_newInst:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b){return{id: ---> a <--- [0].id.replace(/([^A-Za-z0-9_])/g,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
replace(/([^A-Za-z0-9_])/g,"\\\\$1"),input: ---> a <--- ,selectedDay:0,selectedMonth:0,selectedYear

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,drawYear:0,inline: ---> b <--- ,dpDiv:!b?this.dpDiv:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0,inline:b,dpDiv:! ---> b <--- ?this.dpDiv:d('<div class="'+this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
dpDiv:!b?this.dpDiv: ---> d <--- ('<div class="'+this._inlineClass+' ui-datepicker ui-widget ui-widget-content ui-helper-clearfix ui-corner-all"></div>')}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =d(a);b.append=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c= ---> d <--- (a);b.append=d(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var c=d( ---> a <--- );b.append=d([]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{var c=d(a); ---> b <--- .append=d([]);b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d(a);b.append= ---> d <--- ([]);b.trigger=d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.append=d([]); ---> b <--- .trigger=d([]);if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
([]);b.trigger= ---> d <--- ([]);if(!c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d([]);if(! ---> c <--- .hasClass(this.markerClassName)){this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.markerClassName)){this._attachments( ---> c <--- ,b);c.addClass(this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this._attachments(c, ---> b <--- );c.addClass(this.markerClassName)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._attachments(c,b); ---> c <--- .addClass(this.markerClassName).keydown(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e,f,h){ ---> b <--- .settings[f]=h;})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f,h){b.settings[ ---> f <--- ]=h;}).bind("getData.datepicker"

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){b.settings[f]= ---> h <--- ;}).bind("getData.datepicker",function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,f){returnthis._get( ---> b <--- ,f);});this._autoSize

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnthis._get(b, ---> f <--- );});this._autoSize(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);});this._autoSize( ---> b <--- );d.data(a,"datepicker",

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);this._autoSize(b); ---> d <--- .data(a,"datepicker",b);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_autoSize(b);d.data( ---> a <--- ,"datepicker",b);}},_attachments

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.data(a,"datepicker", ---> b <--- );}},_attachments:function(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =this._get(b,"appendText"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this._get( ---> b <--- ,"appendText"),e=this._get(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(b,"appendText"), ---> e <--- =this._get(b,"isRTL");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"appendText"),e=this._get( ---> b <--- ,"isRTL");b.append&&b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(b,"isRTL"); ---> b <--- .append&&b.append.remove()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b,"isRTL");b.append&& ---> b <--- .append.remove();if(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.append.remove();if( ---> c <--- ){b.append=d('<span class="'+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
remove();if(c){ ---> b <--- .append=d('<span class="'+this._appendClass

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c){b.append= ---> d <--- ('<span class="'+this._appendClass+'">'+c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
('<span class="'+this._appendClass+'">'+ ---> c <--- +"</span>");a[e?"before":

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_appendClass+'">'+c+"</span>"); ---> a <--- [e?"before":"after"](b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
'">'+c+"</span>");a[ ---> e <--- ?"before":"after"](b.append)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a[e?"before":"after"]( ---> b <--- .append);}a.unbind("focus"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"after"](b.append);} ---> a <--- .unbind("focus",this._showDatepicker);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
unbind("focus",this._showDatepicker); ---> b <--- .trigger&&b.trigger.remove()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._showDatepicker);b.trigger&& ---> b <--- .trigger.remove();c=this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b.trigger.remove(); ---> c <--- =this._get(b,"showOn");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();c=this._get( ---> b <--- ,"showOn");if(c=="focus"||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(b,"showOn");if( ---> c <--- =="focus"||c=="both"){a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"showOn");if(c=="focus"|| ---> c <--- =="both"){a.focus(this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="focus"||c=="both"){ ---> a <--- .focus(this._showDatepicker);}if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this._showDatepicker);}if( ---> c <--- =="button"||c=="both"){c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if(c=="button"|| ---> c <--- =="both"){c=this._get(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="button"||c=="both"){ ---> c <--- =this._get(b,"buttonText");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"both"){c=this._get( ---> b <--- ,"buttonText");var f=this._get

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"buttonText");var  ---> f <--- =this._get(b,"buttonImage");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);var f=this._get( ---> b <--- ,"buttonImage");b.trigger=d(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(b,"buttonImage"); ---> b <--- .trigger=d(this._get(b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b,"buttonImage");b.trigger= ---> d <--- (this._get(b,"buttonImageOnly")?

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.trigger=d(this._get( ---> b <--- ,"buttonImageOnly")?d("<img/>").addClass

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(b,"buttonImageOnly")? ---> d <--- ("<img/>").addClass(this._triggerClass)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._triggerClass).attr({src: ---> f <--- ,alt:c,title:c})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
attr({src:f,alt: ---> c <--- ,title:c}):d('<button type="button"></button>'

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:f,alt:c,title: ---> c <--- }):d('<button type="button"></button>').addClass(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:c,title:c}): ---> d <--- ('<button type="button"></button>').addClass(this._triggerClass)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass(this._triggerClass).html( ---> f <--- ==""?c:d("<img/>").

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_triggerClass).html(f==""? ---> c <--- :d("<img/>").attr({src

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.html(f==""?c: ---> d <--- ("<img/>").attr({src:f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
("<img/>").attr({src: ---> f <--- ,alt:c,title:c})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
attr({src:f,alt: ---> c <--- ,title:c})));a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:f,alt:c,title: ---> c <--- })));a[e?"before"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,title:c}))); ---> a <--- [e?"before":"after"](b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:c})));a[ ---> e <--- ?"before":"after"](b.trigger)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a[e?"before":"after"]( ---> b <--- .trigger);b.trigger.click(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:"after"](b.trigger); ---> b <--- .trigger.click(function(){d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.trigger.click(function(){ ---> d <--- .datepicker._datepickerShowing&&d.datepicker._lastInput

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(){d.datepicker._datepickerShowing&& ---> d <--- .datepicker._lastInput==a[0]?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._datepickerShowing&&d.datepicker._lastInput== ---> a <--- [0]?d.datepicker._hideDatepicker(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._lastInput==a[0]? ---> d <--- .datepicker._hideDatepicker():d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
?d.datepicker._hideDatepicker(): ---> d <--- .datepicker._showDatepicker(a[0])

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
():d.datepicker._showDatepicker( ---> a <--- [0]);returnfalse;})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){if(this._get( ---> a <--- ,"autoSize")&&!a.inline){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(a,"autoSize")&&! ---> a <--- .inline){var b=new Date(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&!a.inline){var  ---> b <--- =new Date(2009,11,20)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
Date(2009,11,20), ---> c <--- =this._get(a,"dateFormat");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
20),c=this._get( ---> a <--- ,"dateFormat");if(c.match(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"dateFormat");if( ---> c <--- .match(/[DM]/)){var e=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c.match(/[DM]/)){var  ---> e <--- =function(f){for(var h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(f){for(var  ---> h <--- =0,i=0,g=0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var h=0, ---> i <--- =0,g=0;g<f

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
var h=0,i=0, ---> g <--- =0;g<f.length;g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,i=0,g=0; ---> g <--- <f.length;g++){if

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=0,g=0;g< ---> f <--- .length;g++){if(f

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;g<f.length; ---> g <--- ++){if(f[g].

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;g++){if( ---> f <--- [g].length>h){h

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;g++){if(f[ ---> g <--- ].length>h){h=f

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(f[g].length> ---> h <--- ){h=f[g].length

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
[g].length>h){ ---> h <--- =f[g].length;i=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
].length>h){h= ---> f <--- [g].length;i=g;

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
length>h){h=f[ ---> g <--- ].length;i=g;}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
h=f[g].length; ---> i <--- =g;}}returni;};

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
f[g].length;i= ---> g <--- ;}}returni;};b.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
length;i=g;}}return ---> i <--- ;};b.setMonth(e(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
g;}}returni;}; ---> b <--- .setMonth(e(this._get(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returni;};b.setMonth( ---> e <--- (this._get(a,c.match

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.setMonth(e(this._get( ---> a <--- ,c.match(/MM/)?"monthNames":

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(e(this._get(a, ---> c <--- .match(/MM/)?"monthNames":"monthNamesShort")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)?"monthNames":"monthNamesShort"))); ---> b <--- .setDate(e(this._get(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"monthNamesShort")));b.setDate( ---> e <--- (this._get(a,c.match

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.setDate(e(this._get( ---> a <--- ,c.match(/DD/)?"dayNames":

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(e(this._get(a, ---> c <--- .match(/DD/)?"dayNames":"dayNamesShort")

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?"dayNames":"dayNamesShort"))+20- ---> b <--- .getDay());}a.input

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-b.getDay());} ---> a <--- .input.attr("size",this._formatDate

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("size",this._formatDate( ---> a <--- ,b).length);}},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("size",this._formatDate(a, ---> b <--- ).length);}},_inlineDatepicker:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =d(a);if(!c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b){var c= ---> d <--- (a);if(!c.hasClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){var c=d( ---> a <--- );if(!c.hasClass(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=d(a);if(! ---> c <--- .hasClass(this.markerClassName)){c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass(this.markerClassName)){ ---> c <--- .addClass(this.markerClassName).append(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass(this.markerClassName).append( ---> b <--- .dpDiv).bind("setData.datepicker",function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e,f,h){ ---> b <--- .settings[f]=h;})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f,h){b.settings[ ---> f <--- ]=h;}).bind("getData.datepicker"

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){b.settings[f]= ---> h <--- ;}).bind("getData.datepicker",function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,f){returnthis._get( ---> b <--- ,f);});d.data

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnthis._get(b, ---> f <--- );});d.data(a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,f);}); ---> d <--- .data(a,"datepicker",b);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);});d.data( ---> a <--- ,"datepicker",b);this._setDate(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.data(a,"datepicker", ---> b <--- );this._setDate(b,this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"datepicker",b);this._setDate( ---> b <--- ,this._getDefaultDate(b),true)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._setDate(b,this._getDefaultDate( ---> b <--- ),true);this._updateDatepicker(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
),true);this._updateDatepicker( ---> b <--- );this._updateAlternate(b);}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_updateDatepicker(b);this._updateAlternate( ---> b <--- );}},_dialogDatepicker:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,c,e,f){ ---> a <--- =this._dialogInst;if(!a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=this._dialogInst;if(! ---> a <--- ){this.uuid+=1;this.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.uuid+=1;this._dialogInput= ---> d <--- ('<input type="text" id="'+("dp"+this.uuid)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_dialogInput.keydown(this._doKeyDown); ---> d <--- ("body").append(this._dialogInput)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
).append(this._dialogInput); ---> a <--- =this._dialogInst=this._newInst(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_newInst(this._dialogInput,false); ---> a <--- .settings={};d.data(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.settings={}; ---> d <--- .data(this._dialogInput[0],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._dialogInput[0],"datepicker", ---> a <--- );}E(a.settings,e

[WARNING] The symbol E is declared but is apparently never used.
This code can probably be written in a more compact way.
0],"datepicker",a);} ---> E <--- (a.settings,e||{})

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,"datepicker",a);}E( ---> a <--- .settings,e||{});b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);}E(a.settings, ---> e <--- ||{});b=b&&b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.settings,e||{}); ---> b <--- =b&&b.constructor==Date?this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,e||{});b= ---> b <--- &&b.constructor==Date?this._formatDate

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||{});b=b&& ---> b <--- .constructor==Date?this._formatDate(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.constructor==Date?this._formatDate( ---> a <--- ,b):b;this._dialogInput.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
==Date?this._formatDate(a, ---> b <--- ):b;this._dialogInput.val(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._formatDate(a,b): ---> b <--- ;this._dialogInput.val(b);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:b;this._dialogInput.val( ---> b <--- );this._pos=f?f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
val(b);this._pos= ---> f <--- ?f.length?f:[f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b);this._pos=f? ---> f <--- .length?f:[f.pageX,

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._pos=f?f.length? ---> f <--- :[f.pageX,f.pageY]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f?f.length?f:[ ---> f <--- .pageX,f.pageY]:null;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
length?f:[f.pageX, ---> f <--- .pageY]:null;if(!this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._pos[1]+"px"); ---> a <--- .settings.onSelect=c;this._inDialog

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"px");a.settings.onSelect= ---> c <--- ;this._inDialog=true;this.dpDiv

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(this._dialogInput[0]); ---> d <--- .blockUI&&d.blockUI(this.dpDiv

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]);d.blockUI&& ---> d <--- .blockUI(this.dpDiv);d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.blockUI(this.dpDiv); ---> d <--- .data(this._dialogInput[0],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._dialogInput[0],"datepicker", ---> a <--- );returnthis;},_destroyDatepicker:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_destroyDatepicker:function(a){var  ---> b <--- =d(a),c=d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- (a),c=d.data(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){var b=d( ---> a <--- ),c=d.data(a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{var b=d(a), ---> c <--- =d.data(a,"datepicker");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b=d(a),c= ---> d <--- .data(a,"datepicker");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a),c=d.data( ---> a <--- ,"datepicker");if(b.hasClass(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
data(a,"datepicker");if( ---> b <--- .hasClass(this.markerClassName)){var 

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
hasClass(this.markerClassName)){var  ---> e <--- =a.nodeName.toLowerCase();d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.markerClassName)){var e= ---> a <--- .nodeName.toLowerCase();d.removeData

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.nodeName.toLowerCase(); ---> d <--- .removeData(a,"datepicker");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.toLowerCase();d.removeData( ---> a <--- ,"datepicker");if(e=="input")

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
removeData(a,"datepicker");if( ---> e <--- =="input"){c.append.remove(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(e=="input"){ ---> c <--- .append.remove();c.trigger

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.append.remove(); ---> c <--- .trigger.remove();b.removeClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.trigger.remove(); ---> b <--- .removeClass(this.markerClassName).unbind(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
._doKeyUp);}else{if( ---> e <--- =="div"||e=="span"){b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(e=="div"|| ---> e <--- =="span"){b.removeClass(this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e=="div"||e=="span"){ ---> b <--- .removeClass(this.markerClassName).empty(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_enableDatepicker:function(a){var  ---> b <--- =d(a),c=d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- (a),c=d.data(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){var b=d( ---> a <--- ),c=d.data(a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{var b=d(a), ---> c <--- =d.data(a,"datepicker");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b=d(a),c= ---> d <--- .data(a,"datepicker");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a),c=d.data( ---> a <--- ,"datepicker");if(b.hasClass(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
data(a,"datepicker");if( ---> b <--- .hasClass(this.markerClassName)){var 

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
hasClass(this.markerClassName)){var  ---> e <--- =a.nodeName.toLowerCase();if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.markerClassName)){var e= ---> a <--- .nodeName.toLowerCase();if(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.nodeName.toLowerCase();if( ---> e <--- =="input"){a.disabled=false;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(e=="input"){ ---> a <--- .disabled=false;c.trigger.filter

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"input"){a.disabled=false; ---> c <--- .trigger.filter("button").each(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
""});}else{if( ---> e <--- =="div"||e=="span"){b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(e=="div"|| ---> e <--- =="span"){b.children("."+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e=="div"||e=="span"){ ---> b <--- .children("."+this._inlineClass).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-state-disabled");}}this._disabledInputs= ---> d <--- .map(this._disabledInputs,function(f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._disabledInputs,function(f){return ---> f <--- ==a?null:f;});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(f){returnf== ---> a <--- ?null:f;});}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnf==a?null: ---> f <--- ;});}},_disableDatepicker:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_disableDatepicker:function(a){var  ---> b <--- =d(a),c=d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- (a),c=d.data(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){var b=d( ---> a <--- ),c=d.data(a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{var b=d(a), ---> c <--- =d.data(a,"datepicker");

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b=d(a),c= ---> d <--- .data(a,"datepicker");if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a),c=d.data( ---> a <--- ,"datepicker");if(b.hasClass(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
data(a,"datepicker");if( ---> b <--- .hasClass(this.markerClassName)){var 

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
hasClass(this.markerClassName)){var  ---> e <--- =a.nodeName.toLowerCase();if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.markerClassName)){var e= ---> a <--- .nodeName.toLowerCase();if(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.nodeName.toLowerCase();if( ---> e <--- =="input"){a.disabled=true;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(e=="input"){ ---> a <--- .disabled=true;c.trigger.filter

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"input"){a.disabled=true; ---> c <--- .trigger.filter("button").each(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"default"});}else{if( ---> e <--- =="div"||e=="span"){b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(e=="div"|| ---> e <--- =="span"){b.children("."+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e=="div"||e=="span"){ ---> b <--- .children("."+this._inlineClass).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"ui-state-disabled");}}this._disabledInputs= ---> d <--- .map(this._disabledInputs,function(f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._disabledInputs,function(f){return ---> f <--- ==a?null:f;});

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(f){returnf== ---> a <--- ?null:f;});this.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnf==a?null: ---> f <--- ;});this._disabledInputs[this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_disabledInputs[this._disabledInputs.length]= ---> a <--- ;}},_isDisabledDatepicker:function(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){if(! ---> a <--- ){returnfalse;}for(var b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnfalse;}for(var  ---> b <--- =0;b<this._disabledInputs.length

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}for(var b=0; ---> b <--- <this._disabledInputs.length;b++)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b<this._disabledInputs.length; ---> b <--- ++){if(this._disabledInputs[b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(this._disabledInputs[ ---> b <--- ]==a){returntrue;}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this._disabledInputs[b]== ---> a <--- ){returntrue;}}returnfalse;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){try{return ---> d <--- .data(a,"datepicker");}catch

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){try{returnd.data( ---> a <--- ,"datepicker");}catch(b){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,"datepicker");}catch( ---> b <--- ){throw"Missing instance data for this datepicker";}},_optionDatepicker:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b,c){var  ---> e <--- =this._getInst(a);if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var e=this._getInst( ---> a <--- );if(arguments.length==2&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(arguments.length==2&&typeof ---> b <--- =="string"){returnb=="defaults"?d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
2&&typeofb=="string"){return ---> b <--- =="defaults"?d.extend({},

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=="string"){returnb=="defaults"? ---> d <--- .extend({},d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"defaults"?d.extend({}, ---> d <--- .datepicker._defaults):e?b==

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
},d.datepicker._defaults): ---> e <--- ?b=="all"?d.extend({

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._defaults):e? ---> b <--- =="all"?d.extend({},

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults):e?b=="all"? ---> d <--- .extend({},e.settings)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"all"?d.extend({}, ---> e <--- .settings):this._get(e,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.settings):this._get( ---> e <--- ,b):null;}var f=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
settings):this._get(e, ---> b <--- ):null;}var f=b||

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e,b):null;}var  ---> f <--- =b||{};if(typeofb

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b):null;}var f= ---> b <--- ||{};if(typeofb=="string"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b||{};if(typeof ---> b <--- =="string"){f={};f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(typeofb=="string"){ ---> f <--- ={};f[b]=c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=="string"){f={}; ---> f <--- [b]=c;}if(e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){f={};f[ ---> b <--- ]=c;}if(e){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
={};f[b]= ---> c <--- ;}if(e){this._curInst

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[b]=c;}if( ---> e <--- ){this._curInst==e&&this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
if(e){this._curInst== ---> e <--- &&this._hideDatepicker();var h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
e&&this._hideDatepicker();var  ---> h <--- =this._getDateDatepicker(a,true);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var h=this._getDateDatepicker( ---> a <--- ,true);E(e.settings,

[WARNING] The symbol E is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getDateDatepicker(a,true); ---> E <--- (e.settings,f);this.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_getDateDatepicker(a,true);E( ---> e <--- .settings,f);this._attachments(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
true);E(e.settings, ---> f <--- );this._attachments(d(a)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
settings,f);this._attachments( ---> d <--- (a),e);this._autoSize

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f);this._attachments(d( ---> a <--- ),e);this._autoSize(e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._attachments(d(a), ---> e <--- );this._autoSize(e);this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
),e);this._autoSize( ---> e <--- );this._setDateDatepicker(a,h)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_autoSize(e);this._setDateDatepicker( ---> a <--- ,h);this._updateDatepicker(e)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
e);this._setDateDatepicker(a, ---> h <--- );this._updateDatepicker(e);}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a,h);this._updateDatepicker( ---> e <--- );}},_changeDatepicker:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,c){this._optionDatepicker( ---> a <--- ,b,c);},_refreshDatepicker:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c){this._optionDatepicker(a, ---> b <--- ,c);},_refreshDatepicker:function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{this._optionDatepicker(a,b, ---> c <--- );},_refreshDatepicker:function(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,_refreshDatepicker:function(a){( ---> a <--- =this._getInst(a))&&this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){(a=this._getInst( ---> a <--- ))&&this._updateDatepicker(a);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a))&&this._updateDatepicker( ---> a <--- );},_setDateDatepicker:function(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){if( ---> a <--- =this._getInst(a)){this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(a=this._getInst( ---> a <--- )){this._setDate(a,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a)){this._setDate( ---> a <--- ,b);this._updateDatepicker(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this._setDate(a, ---> b <--- );this._updateDatepicker(a);this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b);this._updateDatepicker( ---> a <--- );this._updateAlternate(a);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_updateDatepicker(a);this._updateAlternate( ---> a <--- );}},_getDateDatepicker:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){( ---> a <--- =this._getInst(a))&&!

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){(a=this._getInst( ---> a <--- ))&&!a.inline&&this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getInst(a))&&! ---> a <--- .inline&&this._setDateFromField(a,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!a.inline&&this._setDateFromField( ---> a <--- ,b);returna?this._getDate

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.inline&&this._setDateFromField(a, ---> b <--- );returna?this._getDate(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._setDateFromField(a,b);return ---> a <--- ?this._getDate(a):null;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);returna?this._getDate( ---> a <--- ):null;},_doKeyDown:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_doKeyDown:function(a){var  ---> b <--- =d.datepicker._getInst(a.target

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .datepicker._getInst(a.target),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=d.datepicker._getInst( ---> a <--- .target),c=true,e=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._getInst(a.target), ---> c <--- =true,e=b.dpDiv.is

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a.target),c=true, ---> e <--- =b.dpDiv.is(".ui-datepicker-rtl");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
target),c=true,e= ---> b <--- .dpDiv.is(".ui-datepicker-rtl");b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.dpDiv.is(".ui-datepicker-rtl"); ---> b <--- ._keyEvent=true;if(d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;b._keyEvent=true;if( ---> d <--- .datepicker._datepickerShowing){switch(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._datepickerShowing){switch( ---> a <--- .keyCode){case9:d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.keyCode){case9: ---> d <--- .datepicker._hideDatepicker();c=false

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.datepicker._hideDatepicker(); ---> c <--- =false;break;case13:c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=false;break;case13: ---> c <--- =d("td."+d.datepicker._dayOverClass

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
false;break;case13:c= ---> d <--- ("td."+d.datepicker._dayOverClass,b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
case13:c=d("td."+ ---> d <--- .datepicker._dayOverClass,b.dpDiv).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("td."+d.datepicker._dayOverClass, ---> b <--- .dpDiv).add(d("td."+

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_dayOverClass,b.dpDiv).add( ---> d <--- ("td."+d.datepicker._currentClass,b

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
dpDiv).add(d("td."+ ---> d <--- .datepicker._currentClass,b.dpDiv))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("td."+d.datepicker._currentClass, ---> b <--- .dpDiv));c[0]?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._currentClass,b.dpDiv)); ---> c <--- [0]?d.datepicker._selectDay(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
dpDiv));c[0]? ---> d <--- .datepicker._selectDay(a.target,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0]?d.datepicker._selectDay( ---> a <--- .target,b.selectedMonth,b.selectedYear

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._selectDay(a.target, ---> b <--- .selectedMonth,b.selectedYear,c[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.target,b.selectedMonth, ---> b <--- .selectedYear,c[0]):d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.selectedMonth,b.selectedYear, ---> c <--- [0]):d.datepicker._hideDatepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedYear,c[0]): ---> d <--- .datepicker._hideDatepicker();returnfalse;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
();returnfalse;case27: ---> d <--- .datepicker._hideDatepicker();break;case

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_hideDatepicker();break;case33: ---> d <--- .datepicker._adjustDate(a.target,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case33:d.datepicker._adjustDate( ---> a <--- .target,a.ctrlKey?-d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._adjustDate(a.target, ---> a <--- .ctrlKey?-d.datepicker._get(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.target,a.ctrlKey?- ---> d <--- .datepicker._get(b,"stepBigMonths"):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ctrlKey?-d.datepicker._get( ---> b <--- ,"stepBigMonths"):-d.datepicker._get

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"stepBigMonths"):- ---> d <--- .datepicker._get(b,"stepMonths"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
):-d.datepicker._get( ---> b <--- ,"stepMonths"),"M");break;case

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,"M");break;case34: ---> d <--- .datepicker._adjustDate(a.target,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case34:d.datepicker._adjustDate( ---> a <--- .target,a.ctrlKey?+d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._adjustDate(a.target, ---> a <--- .ctrlKey?+d.datepicker._get(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.target,a.ctrlKey?+ ---> d <--- .datepicker._get(b,"stepBigMonths"):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ctrlKey?+d.datepicker._get( ---> b <--- ,"stepBigMonths"):+d.datepicker._get

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"stepBigMonths"):+ ---> d <--- .datepicker._get(b,"stepMonths"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
):+d.datepicker._get( ---> b <--- ,"stepMonths"),"M");break;case

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case35:if( ---> a <--- .ctrlKey||a.metaKey){d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case35:if(a.ctrlKey|| ---> a <--- .metaKey){d.datepicker._clearDate(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey||a.metaKey){ ---> d <--- .datepicker._clearDate(a.target);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey){d.datepicker._clearDate( ---> a <--- .target);}c=a.ctrlKey

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._clearDate(a.target);} ---> c <--- =a.ctrlKey||a.metaKey;break

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.target);}c= ---> a <--- .ctrlKey||a.metaKey;break;case

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}c=a.ctrlKey|| ---> a <--- .metaKey;break;case36:if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey;break;case36:if( ---> a <--- .ctrlKey||a.metaKey){d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case36:if(a.ctrlKey|| ---> a <--- .metaKey){d.datepicker._gotoToday(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey||a.metaKey){ ---> d <--- .datepicker._gotoToday(a.target);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey){d.datepicker._gotoToday( ---> a <--- .target);}c=a.ctrlKey

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._gotoToday(a.target);} ---> c <--- =a.ctrlKey||a.metaKey;break

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.target);}c= ---> a <--- .ctrlKey||a.metaKey;break;case

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}c=a.ctrlKey|| ---> a <--- .metaKey;break;case37:if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey;break;case37:if( ---> a <--- .ctrlKey||a.metaKey){d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case37:if(a.ctrlKey|| ---> a <--- .metaKey){d.datepicker._adjustDate(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey||a.metaKey){ ---> d <--- .datepicker._adjustDate(a.target,e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey){d.datepicker._adjustDate( ---> a <--- .target,e?+1:-1

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._adjustDate(a.target, ---> e <--- ?+1:-1,"D");

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
1:-1,"D");} ---> c <--- =a.ctrlKey||a.metaKey;if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-1,"D");}c= ---> a <--- .ctrlKey||a.metaKey;if(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}c=a.ctrlKey|| ---> a <--- .metaKey;if(a.originalEvent.altKey

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ctrlKey||a.metaKey;if( ---> a <--- .originalEvent.altKey){d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.originalEvent.altKey){ ---> d <--- .datepicker._adjustDate(a.target,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
altKey){d.datepicker._adjustDate( ---> a <--- .target,a.ctrlKey?-d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._adjustDate(a.target, ---> a <--- .ctrlKey?-d.datepicker._get(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.target,a.ctrlKey?- ---> d <--- .datepicker._get(b,"stepBigMonths"):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ctrlKey?-d.datepicker._get( ---> b <--- ,"stepBigMonths"):-d.datepicker._get

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"stepBigMonths"):- ---> d <--- .datepicker._get(b,"stepMonths"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
):-d.datepicker._get( ---> b <--- ,"stepMonths"),"M");}break;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}break;case38:if( ---> a <--- .ctrlKey||a.metaKey){d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case38:if(a.ctrlKey|| ---> a <--- .metaKey){d.datepicker._adjustDate(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey||a.metaKey){ ---> d <--- .datepicker._adjustDate(a.target,-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey){d.datepicker._adjustDate( ---> a <--- .target,-7,"D");}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
target,-7,"D");} ---> c <--- =a.ctrlKey||a.metaKey;break

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-7,"D");}c= ---> a <--- .ctrlKey||a.metaKey;break;case

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}c=a.ctrlKey|| ---> a <--- .metaKey;break;case39:if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey;break;case39:if( ---> a <--- .ctrlKey||a.metaKey){d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case39:if(a.ctrlKey|| ---> a <--- .metaKey){d.datepicker._adjustDate(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey||a.metaKey){ ---> d <--- .datepicker._adjustDate(a.target,e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey){d.datepicker._adjustDate( ---> a <--- .target,e?-1:+1

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._adjustDate(a.target, ---> e <--- ?-1:+1,"D");

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
1:+1,"D");} ---> c <--- =a.ctrlKey||a.metaKey;if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+1,"D");}c= ---> a <--- .ctrlKey||a.metaKey;if(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}c=a.ctrlKey|| ---> a <--- .metaKey;if(a.originalEvent.altKey

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.ctrlKey||a.metaKey;if( ---> a <--- .originalEvent.altKey){d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a.originalEvent.altKey){ ---> d <--- .datepicker._adjustDate(a.target,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
altKey){d.datepicker._adjustDate( ---> a <--- .target,a.ctrlKey?+d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._adjustDate(a.target, ---> a <--- .ctrlKey?+d.datepicker._get(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.target,a.ctrlKey?+ ---> d <--- .datepicker._get(b,"stepBigMonths"):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ctrlKey?+d.datepicker._get( ---> b <--- ,"stepBigMonths"):+d.datepicker._get

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"stepBigMonths"):+ ---> d <--- .datepicker._get(b,"stepMonths"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
):+d.datepicker._get( ---> b <--- ,"stepMonths"),"M");}break;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}break;case40:if( ---> a <--- .ctrlKey||a.metaKey){d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
case40:if(a.ctrlKey|| ---> a <--- .metaKey){d.datepicker._adjustDate(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey||a.metaKey){ ---> d <--- .datepicker._adjustDate(a.target,+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
metaKey){d.datepicker._adjustDate( ---> a <--- .target,+7,"D");}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
target,+7,"D");} ---> c <--- =a.ctrlKey||a.metaKey;break

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+7,"D");}c= ---> a <--- .ctrlKey||a.metaKey;break;default

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}c=a.ctrlKey|| ---> a <--- .metaKey;break;default:c=false

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||a.metaKey;break;default: ---> c <--- =false;}}else{if(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;}}else{if( ---> a <--- .keyCode==36&&a.ctrlKey){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(a.keyCode==36&& ---> a <--- .ctrlKey){d.datepicker._showDatepicker(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
keyCode==36&&a.ctrlKey){ ---> d <--- .datepicker._showDatepicker(this);}else

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._showDatepicker(this);}else{ ---> c <--- =false;}}if(c){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{c=false;}}if( ---> c <--- ){a.preventDefault();a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
false;}}if(c){ ---> a <--- .preventDefault();a.stopPropagation()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c){a.preventDefault(); ---> a <--- .stopPropagation();}},_doKeyPress:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_doKeyPress:function(a){var  ---> b <--- =d.datepicker._getInst(a.target

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){var b= ---> d <--- .datepicker._getInst(a.target);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=d.datepicker._getInst( ---> a <--- .target);if(d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_getInst(a.target);if( ---> d <--- .datepicker._get(b,"constrainInput"))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(d.datepicker._get( ---> b <--- ,"constrainInput")){b=d.datepicker

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"constrainInput")){ ---> b <--- =d.datepicker._possibleChars(d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,"constrainInput")){b= ---> d <--- .datepicker._possibleChars(d.datepicker._get

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=d.datepicker._possibleChars( ---> d <--- .datepicker._get(b,"dateFormat"))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._possibleChars(d.datepicker._get( ---> b <--- ,"dateFormat"));var c=String.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(b,"dateFormat"));var  ---> c <--- =String.fromCharCode(a.charCode==G

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var c=String.fromCharCode( ---> a <--- .charCode==G?a.keyCode:a

[WARNING] The symbol G is declared but is apparently never used.
This code can probably be written in a more compact way.
=String.fromCharCode(a.charCode== ---> G <--- ?a.keyCode:a.charCode);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.fromCharCode(a.charCode==G? ---> a <--- .keyCode:a.charCode);returna

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.charCode==G?a.keyCode: ---> a <--- .charCode);returna.ctrlKey||c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.keyCode:a.charCode);return ---> a <--- .ctrlKey||c<" "||!b||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.charCode);returna.ctrlKey|| ---> c <--- <" "||!b||b.indexOf(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.ctrlKey||c<" "||! ---> b <--- ||b.indexOf(c)>-1

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
ctrlKey||c<" "||!b|| ---> b <--- .indexOf(c)>-1;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
" "||!b||b.indexOf( ---> c <--- )>-1;}},_doKeyUp:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_doKeyUp:function(a){ ---> a <--- =d.datepicker._getInst(a.target

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_doKeyUp:function(a){a= ---> d <--- .datepicker._getInst(a.target);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a=d.datepicker._getInst( ---> a <--- .target);if(a.input.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_getInst(a.target);if( ---> a <--- .input.val()!=a.lastVal

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.input.val()!= ---> a <--- .lastVal){try{if(d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.lastVal){try{if( ---> d <--- .datepicker.parseDate(d.datepicker._get

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(d.datepicker.parseDate( ---> d <--- .datepicker._get(a,"dateFormat"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.parseDate(d.datepicker._get( ---> a <--- ,"dateFormat"),a.input?a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._get(a,"dateFormat"), ---> a <--- .input?a.input.val()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"dateFormat"),a.input? ---> a <--- .input.val():null,d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.val():null, ---> d <--- .datepicker._getFormatConfig(a))){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:null,d.datepicker._getFormatConfig( ---> a <--- ))){d.datepicker._setDateFromField(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._getFormatConfig(a))){ ---> d <--- .datepicker._setDateFromField(a);d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)){d.datepicker._setDateFromField( ---> a <--- );d.datepicker._updateAlternate(a)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._setDateFromField(a); ---> d <--- .datepicker._updateAlternate(a);d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a);d.datepicker._updateAlternate( ---> a <--- );d.datepicker._updateDatepicker(a)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._updateAlternate(a); ---> d <--- .datepicker._updateDatepicker(a);}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a);d.datepicker._updateDatepicker( ---> a <--- );}}catch(b){d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_updateDatepicker(a);}}catch( ---> b <--- ){d.datepicker.log(b)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);}}catch(b){ ---> d <--- .datepicker.log(b);}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b){d.datepicker.log( ---> b <--- );}}returntrue;},_showDatepicker

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_showDatepicker:function(a){ ---> a <--- =a.target||a;if(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_showDatepicker:function(a){a= ---> a <--- .target||a;if(a.nodeName

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){a=a.target|| ---> a <--- ;if(a.nodeName.toLowerCase()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.target||a;if( ---> a <--- .nodeName.toLowerCase()!="input"){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
nodeName.toLowerCase()!="input"){ ---> a <--- =d("input",a.parentNode)[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
toLowerCase()!="input"){a= ---> d <--- ("input",a.parentNode)[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"input"){a=d("input", ---> a <--- .parentNode)[0];}if(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[0];}if(!( ---> d <--- .datepicker._isDisabledDatepicker(a)||d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(!(d.datepicker._isDisabledDatepicker( ---> a <--- )||d.datepicker._lastInput==a)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._isDisabledDatepicker(a)|| ---> d <--- .datepicker._lastInput==a)){var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a)||d.datepicker._lastInput== ---> a <--- )){var b=d.datepicker.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._lastInput==a)){var  ---> b <--- =d.datepicker._getInst(a);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_lastInput==a)){var b= ---> d <--- .datepicker._getInst(a);d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=d.datepicker._getInst( ---> a <--- );d.datepicker._curInst&&d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._getInst(a); ---> d <--- .datepicker._curInst&&d.datepicker._curInst

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a);d.datepicker._curInst&& ---> d <--- .datepicker._curInst!=b&&d.datepicker

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._curInst&&d.datepicker._curInst!= ---> b <--- &&d.datepicker._curInst.dpDiv.stop

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&d.datepicker._curInst!=b&& ---> d <--- .datepicker._curInst.dpDiv.stop(true

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.stop(true,true);var  ---> c <--- =d.datepicker._get(b,"beforeShow"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(true,true);var c= ---> d <--- .datepicker._get(b,"beforeShow");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var c=d.datepicker._get( ---> b <--- ,"beforeShow");E(b.settings,

[WARNING] The symbol E is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._get(b,"beforeShow"); ---> E <--- (b.settings,c?c.apply

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(b,"beforeShow");E( ---> b <--- .settings,c?c.apply(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"beforeShow");E(b.settings, ---> c <--- ?c.apply(a,[a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;E(b.settings,c? ---> c <--- .apply(a,[a,b]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.settings,c?c.apply( ---> a <--- ,[a,b]):{}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c?c.apply(a,[ ---> a <--- ,b]):{});b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.apply(a,[a, ---> b <--- ]):{});b.lastVal

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b]):{}); ---> b <--- .lastVal=null;d.datepicker._lastInput

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
});b.lastVal=null; ---> d <--- .datepicker._lastInput=a;d.datepicker

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=null;d.datepicker._lastInput= ---> a <--- ;d.datepicker._setDateFromField(b);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.datepicker._lastInput=a; ---> d <--- .datepicker._setDateFromField(b);if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a;d.datepicker._setDateFromField( ---> b <--- );if(d.datepicker._inDialog)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._setDateFromField(b);if( ---> d <--- .datepicker._inDialog){a.value=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d.datepicker._inDialog){ ---> a <--- .value="";}if(!d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.value="";}if(! ---> d <--- .datepicker._pos){d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(!d.datepicker._pos){ ---> d <--- .datepicker._pos=d.datepicker._findPos

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_pos){d.datepicker._pos= ---> d <--- .datepicker._findPos(a);d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._pos=d.datepicker._findPos( ---> a <--- );d.datepicker._pos[1]

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._findPos(a); ---> d <--- .datepicker._pos[1]+=a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._pos[1]+= ---> a <--- .offsetHeight;}var e=false;d

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
1]+=a.offsetHeight;}var  ---> e <--- =false;d(a).parents(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.offsetHeight;}var e=false; ---> d <--- (a).parents().each(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var e=false;d( ---> a <--- ).parents().each(function(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
().each(function(){ ---> e <--- |=d(this).css("position")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(function(){e|= ---> d <--- (this).css("position")=="fixed"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
css("position")=="fixed";return! ---> e <--- ;});if(e&&d.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
return!e;});if( ---> e <--- &&d.browser.opera){d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e;});if(e&& ---> d <--- .browser.opera){d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e&&d.browser.opera){ ---> d <--- .datepicker._pos[0]-=document.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
0]-=document.documentElement.scrollLeft; ---> d <--- .datepicker._pos[1]-=document.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]-=document.documentElement.scrollTop;} ---> c <--- ={left:d.datepicker._pos[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollTop;}c={left: ---> d <--- .datepicker._pos[0],top:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._pos[0],top: ---> d <--- .datepicker._pos[1]};d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._pos[1]}; ---> d <--- .datepicker._pos=null;b.dpDiv

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.datepicker._pos=null; ---> b <--- .dpDiv.css({position:"absolute",

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:"block",top:"-1000px"}); ---> d <--- .datepicker._updateDatepicker(b);c=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
});d.datepicker._updateDatepicker( ---> b <--- );c=d.datepicker._checkOffset(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._updateDatepicker(b); ---> c <--- =d.datepicker._checkOffset(b,c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._updateDatepicker(b);c= ---> d <--- .datepicker._checkOffset(b,c,e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;c=d.datepicker._checkOffset( ---> b <--- ,c,e);b.dpDiv.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.datepicker._checkOffset(b, ---> c <--- ,e);b.dpDiv.css(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._checkOffset(b,c, ---> e <--- );b.dpDiv.css({position

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_checkOffset(b,c,e); ---> b <--- .dpDiv.css({position:d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b.dpDiv.css({position: ---> d <--- .datepicker._inDialog&&d.blockUI?"static"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{position:d.datepicker._inDialog&& ---> d <--- .blockUI?"static":e?"fixed":"absolute"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
._inDialog&&d.blockUI?"static": ---> e <--- ?"fixed":"absolute",display:"none",left

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:"absolute",display:"none",left: ---> c <--- .left+"px",top:c.top

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.left+"px",top: ---> c <--- .top+"px"});if(!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
top+"px"});if(! ---> b <--- .inline){c=d.datepicker.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!b.inline){ ---> c <--- =d.datepicker._get(b,"showAnim"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(!b.inline){c= ---> d <--- .datepicker._get(b,"showAnim");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{c=d.datepicker._get( ---> b <--- ,"showAnim");var f=d.datepicker

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"showAnim");var  ---> f <--- =d.datepicker._get(b,"duration"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(b,"showAnim");var f= ---> d <--- .datepicker._get(b,"duration"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=d.datepicker._get( ---> b <--- ,"duration"),h=function(){

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._get(b,"duration"), ---> h <--- =function(){d.datepicker._datepickerShowing

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"duration"),h=function(){ ---> d <--- .datepicker._datepickerShowing=true;var i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._datepickerShowing=true;var  ---> i <--- =d.datepicker._getBorders(b.dpDiv

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._datepickerShowing=true;var i= ---> d <--- .datepicker._getBorders(b.dpDiv);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var i=d.datepicker._getBorders( ---> b <--- .dpDiv);b.dpDiv.find(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._getBorders(b.dpDiv); ---> b <--- .dpDiv.find("iframe.ui-datepicker-cover").css(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"iframe.ui-datepicker-cover").css({left:- ---> i <--- [0],top:-i[1

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
-i[0],top:- ---> i <--- [1],width:b.dpDiv.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:-i[1],width: ---> b <--- .dpDiv.outerWidth(),height:b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.dpDiv.outerWidth(),height: ---> b <--- .dpDiv.outerHeight()});}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerHeight()});}; ---> b <--- .dpDiv.zIndex(d(a).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;};b.dpDiv.zIndex( ---> d <--- (a).zIndex()+1)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.dpDiv.zIndex(d( ---> a <--- ).zIndex()+1);d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).zIndex()+1); ---> d <--- .effects&&d.effects[c]?

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1);d.effects&& ---> d <--- .effects[c]?b.dpDiv.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.effects&&d.effects[ ---> c <--- ]?b.dpDiv.show(c,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
effects&&d.effects[c]? ---> b <--- .dpDiv.show(c,d.datepicker

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c]?b.dpDiv.show( ---> c <--- ,d.datepicker._get(b,"showOptions"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
?b.dpDiv.show(c, ---> d <--- .datepicker._get(b,"showOptions"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,d.datepicker._get( ---> b <--- ,"showOptions"),f,h):b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._get(b,"showOptions"), ---> f <--- ,h):b.dpDiv[c||

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(b,"showOptions"),f, ---> h <--- ):b.dpDiv[c||"show"]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,"showOptions"),f,h): ---> b <--- .dpDiv[c||"show"](c?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f,h):b.dpDiv[ ---> c <--- ||"show"](c?f:null,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.dpDiv[c||"show"]( ---> c <--- ?f:null,h);if(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
dpDiv[c||"show"](c? ---> f <--- :null,h);if(!c

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"show"](c?f:null, ---> h <--- );if(!c||!f)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:null,h);if(! ---> c <--- ||!f){h();}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
h);if(!c||! ---> f <--- ){h();}b.input

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!c||!f){ ---> h <--- ();}b.input.is(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
!f){h();} ---> b <--- .input.is(":visible")&&!b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.is(":visible")&&! ---> b <--- .input.is(":disabled")&&b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.input.is(":disabled")&& ---> b <--- .input.focus();d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b.input.focus(); ---> d <--- .datepicker._curInst=b;}}}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();d.datepicker._curInst= ---> b <--- ;}}},_updateDatepicker:function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_updateDatepicker:function(a){var  ---> b <--- =this,c=d.datepicker._getBorders

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){var b=this, ---> c <--- =d.datepicker._getBorders(a.dpDiv

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this,c= ---> d <--- .datepicker._getBorders(a.dpDiv);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=d.datepicker._getBorders( ---> a <--- .dpDiv);a.dpDiv.empty(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._getBorders(a.dpDiv); ---> a <--- .dpDiv.empty().append(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
().append(this._generateHTML( ---> a <--- )).find("iframe.ui-datepicker-cover").css(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"iframe.ui-datepicker-cover").css({left:- ---> c <--- [0],top:-c[1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-c[0],top:- ---> c <--- [1],width:a.dpDiv.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:-c[1],width: ---> a <--- .dpDiv.outerWidth(),height:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.dpDiv.outerWidth(),height: ---> a <--- .dpDiv.outerHeight()}).end

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.bind("mouseout",function(){ ---> d <--- (this).removeClass("ui-state-hover");this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.indexOf("ui-datepicker-prev")!=-1&& ---> d <--- (this).removeClass("ui-datepicker-prev-hover");this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.indexOf("ui-datepicker-next")!=-1&& ---> d <--- (this).removeClass("ui-datepicker-next-hover");}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"mouseover",function(){if(! ---> b <--- ._isDisabledDatepicker(a.inline?a.dpDiv

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(!b._isDisabledDatepicker( ---> a <--- .inline?a.dpDiv.parent()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!b._isDisabledDatepicker(a.inline? ---> a <--- .dpDiv.parent()[0]:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
dpDiv.parent()[0]: ---> a <--- .input[0])){d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a.input[0])){ ---> d <--- (this).parents(".ui-datepicker-calendar").find

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("a").removeClass("ui-state-hover"); ---> d <--- (this).addClass("ui-state-hover");this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.indexOf("ui-datepicker-prev")!=-1&& ---> d <--- (this).addClass("ui-datepicker-prev-hover");this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.indexOf("ui-datepicker-next")!=-1&& ---> d <--- (this).addClass("ui-datepicker-next-hover");}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
trigger("mouseover").end(); ---> c <--- =this._getNumberOfMonths(a);var e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c=this._getNumberOfMonths( ---> a <--- );var e=c[1];

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._getNumberOfMonths(a);var  ---> e <--- =c[1];e>1?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._getNumberOfMonths(a);var e= ---> c <--- [1];e>1?a.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;var e=c[1]; ---> e <--- >1?a.dpDiv.addClass("ui-datepicker-multi-"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c[1];e>1? ---> a <--- .dpDiv.addClass("ui-datepicker-multi-"+e).

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
?a.dpDiv.addClass("ui-datepicker-multi-"+ ---> e <--- ).css("width",17*e+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e).css("width",17* ---> e <--- +"em"):a.dpDiv.removeClass(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"width",17*e+"em"): ---> a <--- .dpDiv.removeClass("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-datepicker-multi-2 ui-datepicker-multi-3 ui-datepicker-multi-4").width(""); ---> a <--- .dpDiv[(c[0]!=1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
("");a.dpDiv[( ---> c <--- [0]!=1||c[1]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[(c[0]!=1|| ---> c <--- [1]!=1?"add":"remove")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"remove")+"Class"]("ui-datepicker-multi"); ---> a <--- .dpDiv[(this._get(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.dpDiv[(this._get( ---> a <--- ,"isRTL")?"add":"remove")+"Class"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"remove")+"Class"]("ui-datepicker-rtl"); ---> a <--- ==d.datepicker._curInst&&d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+"Class"]("ui-datepicker-rtl");a== ---> d <--- .datepicker._curInst&&d.datepicker._datepickerShowing

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;a==d.datepicker._curInst&& ---> d <--- .datepicker._datepickerShowing&&a.input&&a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._curInst&&d.datepicker._datepickerShowing&& ---> a <--- .input&&a.input.is(":visible"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker._datepickerShowing&&a.input&& ---> a <--- .input.is(":visible")&&!a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.is(":visible")&&! ---> a <--- .input.is(":disabled")&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.input.is(":disabled")&& ---> a <--- .input.focus();},_getBorders

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_getBorders:function(a){var  ---> b <--- =function(c){return{thin:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
medium:2,thick:3}[ ---> c <--- ]||c;};return[parseFloat(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,thick:3}[c]|| ---> c <--- ;};return[parseFloat(b(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||c;};return[parseFloat( ---> b <--- (a.css("border-left-width"))),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;};return[parseFloat(b( ---> a <--- .css("border-left-width"))),parseFloat(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
css("border-left-width"))),parseFloat( ---> b <--- (a.css("border-top-width")))]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"border-left-width"))),parseFloat(b( ---> a <--- .css("border-top-width")))];}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b,c){var  ---> e <--- =a.dpDiv.outerWidth(),f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,c){var e= ---> a <--- .dpDiv.outerWidth(),f=a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.dpDiv.outerWidth(), ---> f <--- =a.dpDiv.outerHeight(),h

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.dpDiv.outerWidth(),f= ---> a <--- .dpDiv.outerHeight(),h=a

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.dpDiv.outerHeight(), ---> h <--- =a.input?a.input.outerWidth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.dpDiv.outerHeight(),h= ---> a <--- .input?a.input.outerWidth()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(),h=a.input? ---> a <--- .input.outerWidth():0,i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.outerWidth():0, ---> i <--- =a.input?a.input.outerHeight

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerWidth():0,i= ---> a <--- .input?a.input.outerHeight()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,i=a.input? ---> a <--- .input.outerHeight():0,g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.outerHeight():0, ---> g <--- =document.documentElement.clientWidth+d(document

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,g=document.documentElement.clientWidth+ ---> d <--- (document).scrollLeft(),k=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollLeft(), ---> k <--- =document.documentElement.clientHeight+d(document

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,k=document.documentElement.clientHeight+ ---> d <--- (document).scrollTop();b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(document).scrollTop(); ---> b <--- .left-=this._get(a,"isRTL"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.left-=this._get( ---> a <--- ,"isRTL")?e-h:0;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"isRTL")? ---> e <--- -h:0;b.left-=c

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"isRTL")?e- ---> h <--- :0;b.left-=c&&b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"isRTL")?e-h:0; ---> b <--- .left-=c&&b.left==a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-h:0;b.left-= ---> c <--- &&b.left==a.input.offset

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:0;b.left-=c&& ---> b <--- .left==a.input.offset()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.left-=c&&b.left== ---> a <--- .input.offset().left?d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.offset().left? ---> d <--- (document).scrollLeft():0;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
document).scrollLeft():0; ---> b <--- .top-=c&&b.top==a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
():0;b.top-= ---> c <--- &&b.top==a.input.offset

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:0;b.top-=c&& ---> b <--- .top==a.input.offset()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.top-=c&&b.top== ---> a <--- .input.offset().top+i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.offset().top+ ---> i <--- ?d(document).scrollTop():

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.offset().top+i? ---> d <--- (document).scrollTop():0;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
document).scrollTop():0; ---> b <--- .left-=Math.min(b.left

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.left-=Math.min( ---> b <--- .left,b.left+e>g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-=Math.min(b.left, ---> b <--- .left+e>g&&g>e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.left,b.left+ ---> e <--- >g&&g>e?Math.abs

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.left,b.left+e> ---> g <--- &&g>e?Math.abs(b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.left+e>g&& ---> g <--- >e?Math.abs(b.left

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.left+e>g&&g> ---> e <--- ?Math.abs(b.left+e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&g>e?Math.abs( ---> b <--- .left+e-g):0)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
?Math.abs(b.left+ ---> e <--- -g):0);b.top

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(b.left+e- ---> g <--- ):0);b.top-=Math

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+e-g):0); ---> b <--- .top-=Math.min(b.top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.top-=Math.min( ---> b <--- .top,b.top+f>k

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-=Math.min(b.top, ---> b <--- .top+f>k&&k>f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.top,b.top+ ---> f <--- >k&&k>f?Math.abs

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
.top,b.top+f> ---> k <--- &&k>f?Math.abs(f

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.top+f>k&& ---> k <--- >f?Math.abs(f+i

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.top+f>k&&k> ---> f <--- ?Math.abs(f+i):

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
&&k>f?Math.abs( ---> f <--- +i):0);returnb;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
>f?Math.abs(f+ ---> i <--- ):0);returnb;},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
f+i):0);return ---> b <--- ;},_findPos:function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){for(var  ---> b <--- =this._get(this._getInst(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._get(this._getInst( ---> a <--- ),"isRTL");a&&(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._getInst(a),"isRTL"); ---> a <--- &&(a.type=="hidden"||a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a),"isRTL");a&&( ---> a <--- .type=="hidden"||a.nodeType!=1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a&&(a.type=="hidden"|| ---> a <--- .nodeType!=1);){a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.nodeType!=1);){ ---> a <--- =a[b?"previousSibling":"nextSibling"];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
nodeType!=1);){a= ---> a <--- [b?"previousSibling":"nextSibling"];}a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
1);){a=a[ ---> b <--- ?"previousSibling":"nextSibling"];}a=d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[b?"previousSibling":"nextSibling"];} ---> a <--- =d(a).offset();

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
?"previousSibling":"nextSibling"];}a= ---> d <--- (a).offset();return[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:"nextSibling"];}a=d( ---> a <--- ).offset();return[a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a).offset();return[ ---> a <--- .left,a.top];},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();return[a.left, ---> a <--- .top];},_hideDatepicker:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_hideDatepicker:function(a){var  ---> b <--- =this._curInst;if(!(!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._curInst;if(!(! ---> b <--- ||a&&b!=d.data(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_curInst;if(!(!b|| ---> a <--- &&b!=d.data(a,"datepicker"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!(!b||a&& ---> b <--- !=d.data(a,"datepicker"))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!(!b||a&&b!= ---> d <--- .data(a,"datepicker"))){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||a&&b!=d.data( ---> a <--- ,"datepicker"))){if(this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(this._datepickerShowing){ ---> a <--- =this._get(b,"showAnim");

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_datepickerShowing){a=this._get( ---> b <--- ,"showAnim");var c=this._get

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"showAnim");var  ---> c <--- =this._get(b,"duration"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);var c=this._get( ---> b <--- ,"duration"),e=function(){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(b,"duration"), ---> e <--- =function(){d.datepicker._tidyDialog

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"duration"),e=function(){ ---> d <--- .datepicker._tidyDialog(b);this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(){d.datepicker._tidyDialog( ---> b <--- );this._curInst=null;};

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._curInst=null;}; ---> d <--- .effects&&d.effects[a]?

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=null;};d.effects&& ---> d <--- .effects[a]?b.dpDiv.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.effects&&d.effects[ ---> a <--- ]?b.dpDiv.hide(a,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
effects&&d.effects[a]? ---> b <--- .dpDiv.hide(a,d.datepicker

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a]?b.dpDiv.hide( ---> a <--- ,d.datepicker._get(b,"showOptions"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
?b.dpDiv.hide(a, ---> d <--- .datepicker._get(b,"showOptions"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,d.datepicker._get( ---> b <--- ,"showOptions"),c,e):b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._get(b,"showOptions"), ---> c <--- ,e):b.dpDiv[a==

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(b,"showOptions"),c, ---> e <--- ):b.dpDiv[a=="slideDown"?

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,"showOptions"),c,e): ---> b <--- .dpDiv[a=="slideDown"?"slideUp":a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c,e):b.dpDiv[ ---> a <--- =="slideDown"?"slideUp":a=="fadeIn"?"fadeOut"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.dpDiv[a=="slideDown"?"slideUp": ---> a <--- =="fadeIn"?"fadeOut":"hide"](a?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=="fadeIn"?"fadeOut":"hide"]( ---> a <--- ?c:null,e);a||

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"fadeIn"?"fadeOut":"hide"](a? ---> c <--- :null,e);a||e(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"hide"](a?c:null, ---> e <--- );a||e();if(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a?c:null,e); ---> a <--- ||e();if(a=this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c:null,e);a|| ---> e <--- ();if(a=this._get

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a||e();if( ---> a <--- =this._get(b,"onClose"))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(a=this._get( ---> b <--- ,"onClose")){a.apply(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(b,"onClose")){ ---> a <--- .apply(b.input?b.input

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,"onClose")){a.apply( ---> b <--- .input?b.input[0]:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.apply(b.input? ---> b <--- .input[0]:null,[b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.input[0]:null,[ ---> b <--- .input?b.input.val()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
]:null,[b.input? ---> b <--- .input.val():"",b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.val():"", ---> b <--- ]);}this._datepickerShowing=false;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:"-100px"});if( ---> d <--- .blockUI){d.unblockUI();

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(d.blockUI){ ---> d <--- .unblockUI();d("body").

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
blockUI){d.unblockUI(); ---> d <--- ("body").append(this.dpDiv)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_tidyDialog:function(a){ ---> a <--- .dpDiv.removeClass(this._dialogClass).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_checkExternalClick:function(a){if( ---> d <--- .datepicker._curInst){a=d(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(d.datepicker._curInst){ ---> a <--- =d(a.target);a[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.datepicker._curInst){a= ---> d <--- (a.target);a[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._curInst){a=d( ---> a <--- .target);a[0].id

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=d(a.target); ---> a <--- [0].id!=d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);a[0].id!= ---> d <--- .datepicker._mainDivId&&a.parents("#"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.id!=d.datepicker._mainDivId&& ---> a <--- .parents("#"+d.datepicker._mainDivId

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
._mainDivId&&a.parents("#"+ ---> d <--- .datepicker._mainDivId).length==0&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._mainDivId).length==0&&! ---> a <--- .hasClass(d.datepicker.markerClassName)&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
length==0&&!a.hasClass( ---> d <--- .datepicker.markerClassName)&&!a.hasClass

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.datepicker.markerClassName)&&! ---> a <--- .hasClass(d.datepicker._triggerClass)&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.markerClassName)&&!a.hasClass( ---> d <--- .datepicker._triggerClass)&&d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
hasClass(d.datepicker._triggerClass)&& ---> d <--- .datepicker._datepickerShowing&&!(d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&d.datepicker._datepickerShowing&&!( ---> d <--- .datepicker._inDialog&&d.blockUI)&&

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
&&!(d.datepicker._inDialog&& ---> d <--- .blockUI)&&d.datepicker._hideDatepicker(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._inDialog&&d.blockUI)&& ---> d <--- .datepicker._hideDatepicker();}},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b,c){ ---> a <--- =d(a);var e=this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,c){a= ---> d <--- (a);var e=this._getInst

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,c){a=d( ---> a <--- );var e=this._getInst(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{a=d(a);var  ---> e <--- =this._getInst(a[0])

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var e=this._getInst( ---> a <--- [0]);if(!this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(!this._isDisabledDatepicker( ---> a <--- [0])){this._adjustInstDate(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0])){this._adjustInstDate( ---> e <--- ,b+(c=="M"?this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)){this._adjustInstDate(e, ---> b <--- +(c=="M"?this._get(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._adjustInstDate(e,b+( ---> c <--- =="M"?this._get(e,"showCurrentAtPos"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(c=="M"?this._get( ---> e <--- ,"showCurrentAtPos"):0),c);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(e,"showCurrentAtPos"):0), ---> c <--- );this._updateDatepicker(e);}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
),c);this._updateDatepicker( ---> e <--- );}},_gotoToday:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_gotoToday:function(a){ ---> a <--- =d(a);var b=this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_gotoToday:function(a){a= ---> d <--- (a);var b=this._getInst

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){a=d( ---> a <--- );var b=this._getInst(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{a=d(a);var  ---> b <--- =this._getInst(a[0])

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var b=this._getInst( ---> a <--- [0]);if(this._get

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
]);if(this._get( ---> b <--- ,"gotoCurrent")&&b.currentDay){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(b,"gotoCurrent")&& ---> b <--- .currentDay){b.selectedDay=b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,"gotoCurrent")&&b.currentDay){ ---> b <--- .selectedDay=b.currentDay;b.drawMonth

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.currentDay){b.selectedDay= ---> b <--- .currentDay;b.drawMonth=b.selectedMonth

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{b.selectedDay=b.currentDay; ---> b <--- .drawMonth=b.selectedMonth=b.currentMonth

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.currentDay;b.drawMonth= ---> b <--- .selectedMonth=b.currentMonth;b.drawYear

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.drawMonth=b.selectedMonth= ---> b <--- .currentMonth;b.drawYear=b.selectedYear

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.selectedMonth=b.currentMonth; ---> b <--- .drawYear=b.selectedYear=b.currentYear

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.currentMonth;b.drawYear= ---> b <--- .selectedYear=b.currentYear;}else{

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.drawYear=b.selectedYear= ---> b <--- .currentYear;}else{var c=new 

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.currentYear;}else{var  ---> c <--- =new Date;b.selectedDay=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{var c=new Date; ---> b <--- .selectedDay=c.getDate();b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=new Date;b.selectedDay= ---> c <--- .getDate();b.drawMonth=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedDay=c.getDate(); ---> b <--- .drawMonth=b.selectedMonth=c.getMonth

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate();b.drawMonth= ---> b <--- .selectedMonth=c.getMonth();b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.drawMonth=b.selectedMonth= ---> c <--- .getMonth();b.drawYear=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedMonth=c.getMonth(); ---> b <--- .drawYear=b.selectedYear=c.getFullYear

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth();b.drawYear= ---> b <--- .selectedYear=c.getFullYear();}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.drawYear=b.selectedYear= ---> c <--- .getFullYear();}this._notifyChange(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
getFullYear();}this._notifyChange( ---> b <--- );this._adjustDate(a);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_notifyChange(b);this._adjustDate( ---> a <--- );},_selectMonthYear:function(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b,c){ ---> a <--- =d(a);var e=this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,c){a= ---> d <--- (a);var e=this._getInst

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,c){a=d( ---> a <--- );var e=this._getInst(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{a=d(a);var  ---> e <--- =this._getInst(a[0])

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var e=this._getInst( ---> a <--- [0]);e._selectingMonthYear=false

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
._getInst(a[0]); ---> e <--- ._selectingMonthYear=false;e["selected"+(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]);e._selectingMonthYear=false; ---> e <--- ["selected"+(c=="M"?"Month":

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_selectingMonthYear=false;e["selected"+( ---> c <--- =="M"?"Month":"Year")]=e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=="M"?"Month":"Year")]= ---> e <--- ["draw"+(c=="M"?"Month":

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"Year")]=e["draw"+( ---> c <--- =="M"?"Month":"Year")]=parseInt

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?"Month":"Year")]=parseInt( ---> b <--- .options[b.selectedIndex].value,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)]=parseInt(b.options[ ---> b <--- .selectedIndex].value,10);this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
value,10);this._notifyChange( ---> e <--- );this._adjustDate(a);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_notifyChange(e);this._adjustDate( ---> a <--- );},_clickMonthYear:function(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_clickMonthYear:function(a){var  ---> b <--- =this._getInst(d(a)[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this._getInst( ---> d <--- (a)[0]);b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=this._getInst(d( ---> a <--- )[0]);b.input&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(a)[0]); ---> b <--- .input&&b._selectingMonthYear&&setTimeout(function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]);b.input&& ---> b <--- ._selectingMonthYear&&setTimeout(function(){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._selectingMonthYear&&setTimeout(function(){ ---> b <--- .input.focus();},0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
focus();},0); ---> b <--- ._selectingMonthYear=!b._selectingMonthYear;},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,0);b._selectingMonthYear=! ---> b <--- ._selectingMonthYear;},_selectDay:function(a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,c,e){var  ---> f <--- =d(a);if(!(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,c,e){var f= ---> d <--- (a);if(!(d(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){var f=d( ---> a <--- );if(!(d(e)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d(a);if(!( ---> d <--- (e).hasClass(this._unselectableClass)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a);if(!(d( ---> e <--- ).hasClass(this._unselectableClass)||this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this._unselectableClass)||this._isDisabledDatepicker( ---> f <--- [0]))){f=this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(f[0]))){ ---> f <--- =this._getInst(f[0])

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
)){f=this._getInst( ---> f <--- [0]);f.selectedDay=f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._getInst(f[0]); ---> f <--- .selectedDay=f.currentDay=d("a"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]);f.selectedDay= ---> f <--- .currentDay=d("a",e).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;f.selectedDay=f.currentDay= ---> d <--- ("a",e).html();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=f.currentDay=d("a", ---> e <--- ).html();f.selectedMonth=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"a",e).html(); ---> f <--- .selectedMonth=f.currentMonth=b;f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.html();f.selectedMonth= ---> f <--- .currentMonth=b;f.selectedYear=f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;f.selectedMonth=f.currentMonth= ---> b <--- ;f.selectedYear=f.currentYear=c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedMonth=f.currentMonth=b; ---> f <--- .selectedYear=f.currentYear=c;this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentMonth=b;f.selectedYear= ---> f <--- .currentYear=c;this._selectDate(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;f.selectedYear=f.currentYear= ---> c <--- ;this._selectDate(a,this._formatDate

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentYear=c;this._selectDate( ---> a <--- ,this._formatDate(f,f.currentDay

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._selectDate(a,this._formatDate( ---> f <--- ,f.currentDay,f.currentMonth,f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,this._formatDate(f, ---> f <--- .currentDay,f.currentMonth,f.currentYear

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
._formatDate(f,f.currentDay, ---> f <--- .currentMonth,f.currentYear));}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,f.currentDay,f.currentMonth, ---> f <--- .currentYear));}},_clearDate:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_clearDate:function(a){ ---> a <--- =d(a);this._getInst(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_clearDate:function(a){a= ---> d <--- (a);this._getInst(a[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){a=d( ---> a <--- );this._getInst(a[0]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d(a);this._getInst( ---> a <--- [0]);this._selectDate(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]);this._selectDate( ---> a <--- ,"");},_selectDate:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_selectDate:function(a,b){ ---> a <--- =this._getInst(d(a)[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b){a=this._getInst( ---> d <--- (a)[0]);b=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a=this._getInst(d( ---> a <--- )[0]);b=b!=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d(a)[0]); ---> b <--- =b!=null?b:this._formatDate

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a)[0]);b= ---> b <--- !=null?b:this._formatDate(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
]);b=b!=null? ---> b <--- :this._formatDate(a);a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!=null?b:this._formatDate( ---> a <--- );a.input&&a.input.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b:this._formatDate(a); ---> a <--- .input&&a.input.val(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_formatDate(a);a.input&& ---> a <--- .input.val(b);this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.input&&a.input.val( ---> b <--- );this._updateAlternate(a);var 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
val(b);this._updateAlternate( ---> a <--- );var c=this._get(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._updateAlternate(a);var  ---> c <--- =this._get(a,"onSelect");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var c=this._get( ---> a <--- ,"onSelect");if(c){c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"onSelect");if( ---> c <--- ){c.apply(a.input?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,"onSelect");if(c){ ---> c <--- .apply(a.input?a.input

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c){c.apply( ---> a <--- .input?a.input[0]:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{c.apply(a.input? ---> a <--- .input[0]:null,[b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.input[0]:null,[ ---> b <--- ,a]);}else{a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]:null,[b, ---> a <--- ]);}else{a.input&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,a]);}else{ ---> a <--- .input&&a.input.trigger("change"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{a.input&& ---> a <--- .input.trigger("change");}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.trigger("change");}if( ---> a <--- .inline){this._updateDatepicker(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.inline){this._updateDatepicker( ---> a <--- );}else{this._hideDatepicker()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._hideDatepicker();this._lastInput= ---> a <--- .input[0];typeofa.input

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.input[0];typeof ---> a <--- .input[0]!="object"&&a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.input[0]!="object"&& ---> a <--- .input.focus();this._lastInput

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_updateAlternate:function(a){var  ---> b <--- =this._get(a,"altField");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this._get( ---> a <--- ,"altField");if(b){var 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"altField");if( ---> b <--- ){var c=this._get(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"altField");if(b){var  ---> c <--- =this._get(a,"altFormat")||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this._get( ---> a <--- ,"altFormat")||this._get(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"altFormat")||this._get( ---> a <--- ,"dateFormat"),e=this._getDate(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"dateFormat"), ---> e <--- =this._getDate(a),f=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"dateFormat"),e=this._getDate( ---> a <--- ),f=this.formatDate(c,

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e=this._getDate(a), ---> f <--- =this.formatDate(c,e,this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a),f=this.formatDate( ---> c <--- ,e,this._getFormatConfig(a))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=this.formatDate(c, ---> e <--- ,this._getFormatConfig(a));d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,e,this._getFormatConfig( ---> a <--- ));d(b).each(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,this._getFormatConfig(a)); ---> d <--- (b).each(function(){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
._getFormatConfig(a));d( ---> b <--- ).each(function(){d(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b).each(function(){ ---> d <--- (this).val(f);}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){d(this).val( ---> f <--- );});}},noWeekends:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},noWeekends:function(a){ ---> a <--- =a.getDay();return[a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
noWeekends:function(a){a= ---> a <--- .getDay();return[a>0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.getDay();return[ ---> a <--- >0&&a<6,""];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();return[a>0&& ---> a <--- <6,""];},iso8601Week:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},iso8601Week:function(a){ ---> a <--- =new Date(a.getTime())

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){a=new Date( ---> a <--- .getTime());a.setDate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Date(a.getTime()); ---> a <--- .setDate(a.getDate()+4

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime());a.setDate( ---> a <--- .getDate()+4-(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.getDate()+4-( ---> a <--- .getDay()||7));var 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
getDay()||7));var  ---> b <--- =a.getTime();a.setMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)||7));var b= ---> a <--- .getTime();a.setMonth(0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var b=a.getTime(); ---> a <--- .setMonth(0);a.setDate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.setMonth(0); ---> a <--- .setDate(1);returnMath.floor

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.floor(Math.round(( ---> b <--- -a)/86400000)/7)+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
floor(Math.round((b- ---> a <--- )/86400000)/7)+1;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,c){if( ---> a <--- ==null||b==null){throw"Invalid arguments"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c){if(a==null|| ---> b <--- ==null){throw"Invalid arguments";}b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b==null){throw"Invalid arguments";} ---> b <--- =typeofb=="object"?b.toString(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){throw"Invalid arguments";}b=typeof ---> b <--- =="object"?b.toString():b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}b=typeofb=="object"? ---> b <--- .toString():b+"";if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="object"?b.toString(): ---> b <--- +"";if(b==""){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
():b+"";if( ---> b <--- ==""){returnnull;}for(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnnull;}for(var  ---> e <--- =(c?c.shortYearCutoff:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
null;}for(var e=( ---> c <--- ?c.shortYearCutoff:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}for(var e=(c? ---> c <--- .shortYearCutoff:null)||this._defaults.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.shortYearCutoff, ---> f <--- =(c?c.dayNamesShort:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._defaults.shortYearCutoff,f=( ---> c <--- ?c.dayNamesShort:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults.shortYearCutoff,f=(c? ---> c <--- .dayNamesShort:null)||this._defaults.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.dayNamesShort, ---> h <--- =(c?c.dayNames:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._defaults.dayNamesShort,h=( ---> c <--- ?c.dayNames:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults.dayNamesShort,h=(c? ---> c <--- .dayNames:null)||this._defaults.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.dayNames, ---> i <--- =(c?c.monthNamesShort:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._defaults.dayNames,i=( ---> c <--- ?c.monthNamesShort:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults.dayNames,i=(c? ---> c <--- .monthNamesShort:null)||this._defaults.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.monthNamesShort, ---> g <--- =(c?c.monthNames:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._defaults.monthNamesShort,g=( ---> c <--- ?c.monthNames:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults.monthNamesShort,g=(c? ---> c <--- .monthNames:null)||this._defaults.

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.monthNames, ---> k <--- =c=-1,l=-1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||this._defaults.monthNames,k= ---> c <--- =-1,l=-1,u

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
monthNames,k=c=-1, ---> l <--- =-1,u=-1,j

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
=-1,l=-1, ---> u <--- =-1,j=false,o=

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=-1,u=-1, ---> j <--- =false,o=function(p){

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
u=-1,j=false, ---> o <--- =function(p){(p=z

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
,o=function(p){( ---> p <--- =z+1<a.length&&a

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(p){(p= ---> z <--- +1<a.length&&a.charAt

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){(p=z+1< ---> a <--- .length&&a.charAt(z+1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=z+1<a.length&& ---> a <--- .charAt(z+1)==p)

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
<a.length&&a.charAt( ---> z <--- +1)==p)&&z++;

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
a.charAt(z+1)== ---> p <--- )&&z++;returnp;},

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
(z+1)==p)&& ---> z <--- ++;returnp;},m=function

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
)==p)&&z++;return ---> p <--- ;},m=function(p){

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
&&z++;returnp;}, ---> m <--- =function(p){o(p)

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
},m=function(p){ ---> o <--- (p);p=new RegExp("^\\d{1,"

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
m=function(p){o( ---> p <--- );p=new RegExp("^\\d{1,"+(

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
(p){o(p); ---> p <--- =new RegExp("^\\d{1,"+(p=="@"

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
;p=new RegExp("^\\d{1,"+( ---> p <--- =="@"?14:p=="!"?20

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
"^\\d{1,"+(p=="@"?14: ---> p <--- =="!"?20:p=="y"?4

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
?14:p=="!"?20: ---> p <--- =="y"?4:p=="o"?3

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
?20:p=="y"?4: ---> p <--- =="o"?3:2)+"}")

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
?3:2)+"}"); ---> p <--- =b.substring(s).match(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:2)+"}");p= ---> b <--- .substring(s).match(p)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
"}");p=b.substring( ---> s <--- ).match(p);if(!

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
b.substring(s).match( ---> p <--- );if(!p){throw"Missing number at position "

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
.match(p);if(! ---> p <--- ){throw"Missing number at position "+s;}s+=

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!p){throw"Missing number at position "+ ---> s <--- ;}s+=p[0].length

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
p){throw"Missing number at position "+s;} ---> s <--- +=p[0].length;returnparseInt

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
{throw"Missing number at position "+s;}s+= ---> p <--- [0].length;returnparseInt(p

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].length;returnparseInt( ---> p <--- [0],10);},n

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
[0],10);}, ---> n <--- =function(p,w,H){

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
function(p,w,H){ ---> p <--- =o(p)?H:w;

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
p,w,H){p= ---> o <--- (p)?H:w;for(

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
w,H){p=o( ---> p <--- )?H:w;for(w=

[WARNING] The symbol H is declared but is apparently never used.
This code can probably be written in a more compact way.
){p=o(p)? ---> H <--- :w;for(w=0;w

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
p=o(p)?H: ---> w <--- ;for(w=0;w<p

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
p)?H:w;for( ---> w <--- =0;w<p.length;w

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
:w;for(w=0; ---> w <--- <p.length;w++){if

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(w=0;w< ---> p <--- .length;w++){if(b

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;w<p.length; ---> w <--- ++){if(b.substr(s

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;w++){if( ---> b <--- .substr(s,p[w].

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(b.substr( ---> s <--- ,p[w].length).toLowerCase

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(b.substr(s, ---> p <--- [w].length).toLowerCase()

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
(b.substr(s,p[ ---> w <--- ].length).toLowerCase()==p

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
].length).toLowerCase()== ---> p <--- [w].toLowerCase()){s

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
length).toLowerCase()==p[ ---> w <--- ].toLowerCase()){s+=p

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
[w].toLowerCase()){ ---> s <--- +=p[w].length;returnw

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
].toLowerCase()){s+= ---> p <--- [w].length;returnw+1

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
toLowerCase()){s+=p[ ---> w <--- ].length;returnw+1;}

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
+=p[w].length;return ---> w <--- +1;}}throw"Unknown name at position "+s;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
w+1;}}throw"Unknown name at position "+ ---> s <--- ;},r=function(){if

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
}}throw"Unknown name at position "+s;}, ---> r <--- =function(){if(b.charAt

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,r=function(){if( ---> b <--- .charAt(s)!=a.charAt(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
(){if(b.charAt( ---> s <--- )!=a.charAt(z)){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b.charAt(s)!= ---> a <--- .charAt(z)){throw"Unexpected literal at position "+

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(s)!=a.charAt( ---> z <--- )){throw"Unexpected literal at position "+s;}s

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(z)){throw"Unexpected literal at position "+ ---> s <--- ;}s++;},s=0

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
)){throw"Unexpected literal at position "+s;} ---> s <--- ++;},s=0,z=

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
+s;}s++;}, ---> s <--- =0,z=0;z<a

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
s++;},s=0, ---> z <--- =0;z<a.length;z

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
,s=0,z=0; ---> z <--- <a.length;z++){if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=0,z=0;z< ---> a <--- .length;z++){if(j

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;z<a.length; ---> z <--- ++){if(j){if(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;z++){if( ---> j <--- ){if(a.charAt(z)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(j){if( ---> a <--- .charAt(z)=="'"&&!o

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
j){if(a.charAt( ---> z <--- )=="'"&&!o("'"))

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(z)=="'"&&! ---> o <--- ("'")){j=false;}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"'"&&!o("'")){ ---> j <--- =false;}else{r();

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
){j=false;}else{ ---> r <--- ();}}else{switch(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();}}else{switch( ---> a <--- .charAt(z)){case"d":

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{switch(a.charAt( ---> z <--- )){case"d":l=m(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(z)){case"d": ---> l <--- =m("d");break;case"D"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
z)){case"d":l= ---> m <--- ("d");break;case"D":n

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
("d");break;case"D": ---> n <--- ("D",f,h);break;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
break;case"D":n("D", ---> f <--- ,h);break;case"o":u

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
case"D":n("D",f, ---> h <--- );break;case"o":u=m

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
,h);break;case"o": ---> u <--- =m("o");break;case"m"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"o":u= ---> m <--- ("o");break;case"m":k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
("o");break;case"m": ---> k <--- =m("m");break;case"M"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"m":k= ---> m <--- ("m");break;case"M":k

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
("m");break;case"M": ---> k <--- =n("M",i,g);

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"M":k= ---> n <--- ("M",i,g);break;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
case"M":k=n("M", ---> i <--- ,g);break;case"y":c

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:k=n("M",i, ---> g <--- );break;case"y":c=m

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,g);break;case"y": ---> c <--- =m("y");break;case"@"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"y":c= ---> m <--- ("y");break;case"@":var 

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
"y");break;case"@":var  ---> v <--- =new Date(m("@"));

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
case"@":var v=new Date( ---> m <--- ("@"));c=v.getFullYear

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
new Date(m("@")); ---> c <--- =v.getFullYear();k=v

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
(m("@"));c= ---> v <--- .getFullYear();k=v.getMonth

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
;c=v.getFullYear(); ---> k <--- =v.getMonth()+1;l

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
=v.getFullYear();k= ---> v <--- .getMonth()+1;l=v

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
=v.getMonth()+1; ---> l <--- =v.getDate();break;case

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()+1;l= ---> v <--- .getDate();break;case"!":

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
getDate();break;case"!": ---> v <--- =new Date((m("!")-

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
case"!":v=new Date(( ---> m <--- ("!")-this._ticksTo1970)/10000

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
-this._ticksTo1970)/10000); ---> c <--- =v.getFullYear();k=v

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
._ticksTo1970)/10000);c= ---> v <--- .getFullYear();k=v.getMonth

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
;c=v.getFullYear(); ---> k <--- =v.getMonth()+1;l

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
=v.getFullYear();k= ---> v <--- .getMonth()+1;l=v

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
=v.getMonth()+1; ---> l <--- =v.getDate();break;case

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()+1;l= ---> v <--- .getDate();break;case"'":

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"'":if( ---> o <--- ("'")){r();}

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
:if(o("'")){ ---> r <--- ();}else{j=true;

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
){r();}else{ ---> j <--- =true;}break;default:r(

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
j=true;}break;default: ---> r <--- ();}}}if(c==

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
r();}}}if( ---> c <--- ==-1){c=(new Date

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(c==-1){ ---> c <--- =(new Date).getFullYear();

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
getFullYear();}else{if( ---> c <--- <100){c+=(new Date)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(c<100){ ---> c <--- +=(new Date).getFullYear()-

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).getFullYear()%100+( ---> c <--- <=e?0:-100);}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
getFullYear()%100+(c<= ---> e <--- ?0:-100);}}if

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
:-100);}}if( ---> u <--- >-1){k=1;l

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(u>-1){ ---> k <--- =1;l=u;do{e

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
>-1){k=1; ---> l <--- =u;do{e=this._getDaysInMonth

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
1){k=1;l= ---> u <--- ;do{e=this._getDaysInMonth(c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;l=u;do{ ---> e <--- =this._getDaysInMonth(c,k-1

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;do{e=this._getDaysInMonth( ---> c <--- ,k-1);if(l<=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{e=this._getDaysInMonth(c, ---> k <--- -1);if(l<=e)

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
c,k-1);if( ---> l <--- <=e){break;}k++;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
k-1);if(l<= ---> e <--- ){break;}k++;l-=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(l<=e){break;} ---> k <--- ++;l-=e;}while(1

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
e){break;}k++; ---> l <--- -=e;}while(1);}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{break;}k++;l-= ---> e <--- ;}while(1);}v=

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
e;}while(1);} ---> v <--- =this._daylightSavingAdjust(new Date(c,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
v=this._daylightSavingAdjust(new Date( ---> c <--- ,k-1,l));if

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(c, ---> k <--- -1,l));if(v

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
new Date(c,k-1, ---> l <--- ));if(v.getFullYear()

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
-1,l));if( ---> v <--- .getFullYear()!=c||v.getMonth

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(v.getFullYear()!= ---> c <--- ||v.getMonth()+1!=k

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
(v.getFullYear()!=c|| ---> v <--- .getMonth()+1!=k||v

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
||v.getMonth()+1!= ---> k <--- ||v.getDate()!=l){

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()+1!=k|| ---> v <--- .getDate()!=l){throw"Invalid date"

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
!=k||v.getDate()!= ---> l <--- ){throw"Invalid date";}returnv;}

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
!=l){throw"Invalid date";}return ---> v <--- ;},ATOM:"yy-mm-dd",COOKIE:"D, dd M yy"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,c){if(! ---> b <--- ){return"";}var e=(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
!b){return"";}var  ---> e <--- =(c?c.dayNamesShort:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{return"";}var e=( ---> c <--- ?c.dayNamesShort:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"";}var e=(c? ---> c <--- .dayNamesShort:null)||this._defaults.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.dayNamesShort, ---> f <--- =(c?c.dayNames:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._defaults.dayNamesShort,f=( ---> c <--- ?c.dayNames:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults.dayNamesShort,f=(c? ---> c <--- .dayNames:null)||this._defaults.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.dayNames, ---> h <--- =(c?c.monthNamesShort:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._defaults.dayNames,h=( ---> c <--- ?c.monthNamesShort:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults.dayNames,h=(c? ---> c <--- .monthNamesShort:null)||this._defaults.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
null)||this._defaults.monthNamesShort; ---> c <--- =(c?c.monthNames:null)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._defaults.monthNamesShort;c=( ---> c <--- ?c.monthNames:null)||this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_defaults.monthNamesShort;c=(c? ---> c <--- .monthNames:null)||this._defaults.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
)||this._defaults.monthNames;var  ---> i <--- =function(o){(o=j

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
var i=function(o){( ---> o <--- =j+1<a.length&&a

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(o){(o= ---> j <--- +1<a.length&&a.charAt

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){(o=j+1< ---> a <--- .length&&a.charAt(j+1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=j+1<a.length&& ---> a <--- .charAt(j+1)==o)

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
<a.length&&a.charAt( ---> j <--- +1)==o)&&j++;

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
a.charAt(j+1)== ---> o <--- )&&j++;returno;},

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
(j+1)==o)&& ---> j <--- ++;returno;},g=function

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
)==o)&&j++;return ---> o <--- ;},g=function(o,m

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
&&j++;returno;}, ---> g <--- =function(o,m,n){

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
function(o,m,n){ ---> m <--- =""+m;if(i(o

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
m,n){m=""+ ---> m <--- ;if(i(o)){for

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{m=""+m;if( ---> i <--- (o)){for(;m.

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
=""+m;if(i( ---> o <--- )){for(;m.length<

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
i(o)){for(; ---> m <--- .length<n;){m="0"

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(;m.length< ---> n <--- ;){m="0"+m;}

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
;m.length<n;){ ---> m <--- ="0"+m;}}returnm;

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
<n;){m="0"+ ---> m <--- ;}}returnm;},k=

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
m="0"+m;}}return ---> m <--- ;},k=function(o,m

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
m;}}returnm;}, ---> k <--- =function(o,m,n,r

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,m,n,r){return ---> i <--- (o)?r[m]:n

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
,n,r){returni( ---> o <--- )?r[m]:n[m

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
r){returni(o)? ---> r <--- [m]:n[m];}

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
{returni(o)?r[ ---> m <--- ]:n[m];},l

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
(o)?r[m]: ---> n <--- [m];},l="",

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
)?r[m]:n[ ---> m <--- ];},l="",u=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
]:n[m];}, ---> l <--- ="",u=false;if(b

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
m];},l="", ---> u <--- =false;if(b){for(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
="",u=false;if( ---> b <--- ){for(var j=0;j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(b){for(var  ---> j <--- =0;j<a.length;j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var j=0; ---> j <--- <a.length;j++){if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var j=0;j< ---> a <--- .length;j++){if(u

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;j<a.length; ---> j <--- ++){if(u){if(

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;j++){if( ---> u <--- ){if(a.charAt(j)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(u){if( ---> a <--- .charAt(j)=="'"&&!i

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
u){if(a.charAt( ---> j <--- )=="'"&&!i("'"))

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(j)=="'"&&! ---> i <--- ("'")){u=false;}

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
"'"&&!i("'")){ ---> u <--- =false;}else{l+=a.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
){u=false;}else{ ---> l <--- +=a.charAt(j);}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
u=false;}else{l+= ---> a <--- .charAt(j);}}else{

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{l+=a.charAt( ---> j <--- );}}else{switch(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
j);}}else{switch( ---> a <--- .charAt(j)){case"d":

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{switch(a.charAt( ---> j <--- )){case"d":l+=g(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(j)){case"d": ---> l <--- +=g("d",b.getDate()

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
j)){case"d":l+= ---> g <--- ("d",b.getDate(),2

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
case"d":l+=g("d", ---> b <--- .getDate(),2);break;

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,2);break;case"D": ---> l <--- +=k("D",b.getDay()

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"D":l+= ---> k <--- ("D",b.getDay(),e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
case"D":l+=k("D", ---> b <--- .getDay(),e,f);

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
("D",b.getDay(), ---> e <--- ,f);break;case"o":l

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.getDay(),e, ---> f <--- );break;case"o":l+=g

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,f);break;case"o": ---> l <--- +=g("o",(b.getTime(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"o":l+= ---> g <--- ("o",(b.getTime()-

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"o":l+=g("o",( ---> b <--- .getTime()-(new Date(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.getTime()-(new Date( ---> b <--- .getFullYear(),0,0))

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,3);break;case"m": ---> l <--- +=g("m",b.getMonth()

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"m":l+= ---> g <--- ("m",b.getMonth()+1

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
case"m":l+=g("m", ---> b <--- .getMonth()+1,2);

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,2);break;case"M": ---> l <--- +=k("M",b.getMonth()

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"M":l+= ---> k <--- ("M",b.getMonth(),h

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
case"M":l+=k("M", ---> b <--- .getMonth(),h,c);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
("M",b.getMonth(), ---> h <--- ,c);break;case"y":l

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.getMonth(),h, ---> c <--- );break;case"y":l+=i

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,c);break;case"y": ---> l <--- +=i("y")?b.getFullYear(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"y":l+= ---> i <--- ("y")?b.getFullYear():

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"y":l+=i("y")? ---> b <--- .getFullYear():(b.getYear(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)?b.getFullYear():( ---> b <--- .getYear()%100<10?"0"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
100<10?"0":"")+ ---> b <--- .getYear()%100;break;case

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
)%100;break;case"@": ---> l <--- +=b.getTime();break;case

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
100;break;case"@":l+= ---> b <--- .getTime();break;case"!":

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime();break;case"!": ---> l <--- +=b.getTime()*10000+this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"!":l+= ---> b <--- .getTime()*10000+this._ticksTo1970

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_ticksTo1970;break;case"'":if( ---> i <--- ("'")){l+="'";}

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
:if(i("'")){ ---> l <--- +="'";}else{u=true;

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
){l+="'";}else{ ---> u <--- =true;}break;default:l+=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
u=true;}break;default: ---> l <--- +=a.charAt(j);}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
true;}break;default:l+= ---> a <--- .charAt(j);}}}}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;default:l+=a.charAt( ---> j <--- );}}}}returnl;}

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
(j);}}}}return ---> l <--- ;},_possibleChars:function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){for(var  ---> b <--- ="",c=false,e=function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var b="", ---> c <--- =false,e=function(h){

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
var b="",c=false, ---> e <--- =function(h){(h=f

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=function(h){( ---> h <--- =f+1<a.length&&a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(h){(h= ---> f <--- +1<a.length&&a.charAt

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){(h=f+1< ---> a <--- .length&&a.charAt(f+1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=f+1<a.length&& ---> a <--- .charAt(f+1)==h)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
<a.length&&a.charAt( ---> f <--- +1)==h)&&f++;

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
a.charAt(f+1)== ---> h <--- )&&f++;returnh;},

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(f+1)==h)&& ---> f <--- ++;returnh;},f=0

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
)==h)&&f++;return ---> h <--- ;},f=0;f<a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f++;returnh;}, ---> f <--- =0;f<a.length;f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
returnh;},f=0; ---> f <--- <a.length;f++){if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;},f=0;f< ---> a <--- .length;f++){if(c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;f<a.length; ---> f <--- ++){if(c){if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;f++){if( ---> c <--- ){if(a.charAt(f)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(c){if( ---> a <--- .charAt(f)=="'"&&!e

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c){if(a.charAt( ---> f <--- )=="'"&&!e("'"))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(f)=="'"&&! ---> e <--- ("'")){c=false;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"'"&&!e("'")){ ---> c <--- =false;}else{b+=a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){c=false;}else{ ---> b <--- +=a.charAt(f);}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c=false;}else{b+= ---> a <--- .charAt(f);}}else{

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{b+=a.charAt( ---> f <--- );}}else{switch(a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f);}}else{switch( ---> a <--- .charAt(f)){case"d":

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{switch(a.charAt( ---> f <--- )){case"d":case"m":case

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
case"m":case"y":case"@": ---> b <--- +="0123456789";break;case"D":case"M"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:returnnull;case"'":if( ---> e <--- ("'")){b+="'";}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:if(e("'")){ ---> b <--- +="'";}else{c=true;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){b+="'";}else{ ---> c <--- =true;}break;default:b+=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c=true;}break;default: ---> b <--- +=a.charAt(f);}}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
true;}break;default:b+= ---> a <--- .charAt(f);}}}return

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;default:b+=a.charAt( ---> f <--- );}}}returnb;},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(f);}}}return ---> b <--- ;},_get:function(a,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){return ---> a <--- .settings[b]!==G?a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){returna.settings[ ---> b <--- ]!==G?a.settings[b]

[WARNING] The symbol G is declared but is apparently never used.
This code can probably be written in a more compact way.
{returna.settings[b]!== ---> G <--- ?a.settings[b]:this.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.settings[b]!==G? ---> a <--- .settings[b]:this._defaults[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b]!==G?a.settings[ ---> b <--- ]:this._defaults[b];}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
settings[b]:this._defaults[ ---> b <--- ];},_setDateFromField:function(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,b){if( ---> a <--- .input.val()!=a.lastVal

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.input.val()!= ---> a <--- .lastVal){var c=this._get

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
()!=a.lastVal){var  ---> c <--- =this._get(a,"dateFormat"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this._get( ---> a <--- ,"dateFormat"),e=a.lastVal=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"dateFormat"), ---> e <--- =a.lastVal=a.input?a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"dateFormat"),e= ---> a <--- .lastVal=a.input?a.input

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"dateFormat"),e=a.lastVal= ---> a <--- .input?a.input.val()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.lastVal=a.input? ---> a <--- .input.val():null,f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.input.val():null, ---> f <--- ,h;f=h=this._getDefaultDate

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.val():null,f, ---> h <--- ;f=h=this._getDefaultDate(a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
():null,f,h; ---> f <--- =h=this._getDefaultDate(a);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:null,f,h;f= ---> h <--- =this._getDefaultDate(a);var i

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;f=h=this._getDefaultDate( ---> a <--- );var i=this._getFormatConfig(a

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._getDefaultDate(a);var  ---> i <--- =this._getFormatConfig(a);try{

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var i=this._getFormatConfig( ---> a <--- );try{f=this.parseDate(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getFormatConfig(a);try{ ---> f <--- =this.parseDate(c,e,i

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;try{f=this.parseDate( ---> c <--- ,e,i)||h;}catch

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{f=this.parseDate(c, ---> e <--- ,i)||h;}catch(g

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.parseDate(c,e, ---> i <--- )||h;}catch(g){

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
parseDate(c,e,i)|| ---> h <--- ;}catch(g){this.log

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,i)||h;}catch( ---> g <--- ){this.log(g);e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
catch(g){this.log( ---> g <--- );e=b?"":e;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.log(g); ---> e <--- =b?"":e;}a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.log(g);e= ---> b <--- ?"":e;}a.selectedDay=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
g);e=b?"": ---> e <--- ;}a.selectedDay=f.getDate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e=b?"":e;} ---> a <--- .selectedDay=f.getDate();a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"":e;}a.selectedDay= ---> f <--- .getDate();a.drawMonth=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedDay=f.getDate(); ---> a <--- .drawMonth=a.selectedMonth=f.getMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate();a.drawMonth= ---> a <--- .selectedMonth=f.getMonth();a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.drawMonth=a.selectedMonth= ---> f <--- .getMonth();a.drawYear=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedMonth=f.getMonth(); ---> a <--- .drawYear=a.selectedYear=f.getFullYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth();a.drawYear= ---> a <--- .selectedYear=f.getFullYear();a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.drawYear=a.selectedYear= ---> f <--- .getFullYear();a.currentDay=e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedYear=f.getFullYear(); ---> a <--- .currentDay=e?f.getDate()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.getFullYear();a.currentDay= ---> e <--- ?f.getDate():0;a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
();a.currentDay=e? ---> f <--- .getDate():0;a.currentMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?f.getDate():0; ---> a <--- .currentMonth=e?f.getMonth()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
():0;a.currentMonth= ---> e <--- ?f.getMonth():0;a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:0;a.currentMonth=e? ---> f <--- .getMonth():0;a.currentYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?f.getMonth():0; ---> a <--- .currentYear=e?f.getFullYear()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
():0;a.currentYear= ---> e <--- ?f.getFullYear():0;this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:0;a.currentYear=e? ---> f <--- .getFullYear():0;this._adjustInstDate

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
():0;this._adjustInstDate( ---> a <--- );}},_getDefaultDate:function(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a){returnthis._restrictMinMax( ---> a <--- ,this._determineDate(a,this._get

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._restrictMinMax(a,this._determineDate( ---> a <--- ,this._get(a,"defaultDate"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._determineDate(a,this._get( ---> a <--- ,"defaultDate"),new Date));}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b,c){var  ---> e <--- =function(h){var i=new 

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
var e=function(h){var  ---> i <--- =new Date;i.setDate(i.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
h){var i=new Date; ---> i <--- .setDate(i.getDate()+h

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i=new Date;i.setDate( ---> i <--- .getDate()+h);returni

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.setDate(i.getDate()+ ---> h <--- );returni;},f=function

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate()+h);return ---> i <--- ;},f=function(h){

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
+h);returni;}, ---> f <--- =function(h){try{returnd

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(h){try{return ---> d <--- .datepicker.parseDate(d.datepicker._get

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
try{returnd.datepicker.parseDate( ---> d <--- .datepicker._get(a,"dateFormat"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.parseDate(d.datepicker._get( ---> a <--- ,"dateFormat"),h,d.datepicker.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
datepicker._get(a,"dateFormat"), ---> h <--- ,d.datepicker._getFormatConfig(a))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"dateFormat"),h, ---> d <--- .datepicker._getFormatConfig(a));}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,h,d.datepicker._getFormatConfig( ---> a <--- ));}catch(i){}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_getFormatConfig(a));}catch( ---> i <--- ){}var g=(h.toLowerCase

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;}catch(i){}var  ---> g <--- =(h.toLowerCase().match(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(i){}var g=( ---> h <--- .toLowerCase().match(/^c/)?

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
toLowerCase().match(/^c/)? ---> d <--- .datepicker._getDate(a):null)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/^c/)?d.datepicker._getDate( ---> a <--- ):null)||new Date,k=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
a):null)||new Date, ---> k <--- =g.getFullYear(),l=g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:null)||new Date,k= ---> g <--- .getFullYear(),l=g.getMonth

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,k=g.getFullYear(), ---> l <--- =g.getMonth();g=g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=g.getFullYear(),l= ---> g <--- .getMonth();g=g.getDate

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,l=g.getMonth(); ---> g <--- =g.getDate();for(var 

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=g.getMonth();g= ---> g <--- .getDate();for(var u=

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
g.getDate();for(var  ---> u <--- =/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,j=u.exec(h

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
);for(var u=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g, ---> j <--- =u.exec(h);j;

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var u=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,j= ---> u <--- .exec(h);j;){

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=/([+-]?[0-9]+)\s*(d|D|w|W|m|M|y|Y)?/g,j=u.exec( ---> h <--- );j;){switch(j[

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
j=u.exec(h); ---> j <--- ;){switch(j[2]||

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
h);j;){switch( ---> j <--- [2]||"d"){case"d":

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"d"){case"d":case"D": ---> g <--- +=parseInt(j[1],10)

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"d":case"D":g+=parseInt( ---> j <--- [1],10);break;case

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"w":case"W": ---> g <--- +=parseInt(j[1],10)

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"w":case"W":g+=parseInt( ---> j <--- [1],10)*7;break

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"m":case"M": ---> l <--- +=parseInt(j[1],10)

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"m":case"M":l+=parseInt( ---> j <--- [1],10);g=Math

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(j[1],10); ---> g <--- =Math.min(g,d.datepicker

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
10);g=Math.min( ---> g <--- ,d.datepicker._getDaysInMonth(k,l

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=Math.min(g, ---> d <--- .datepicker._getDaysInMonth(k,l))

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(g,d.datepicker._getDaysInMonth( ---> k <--- ,l));break;case"y":

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,d.datepicker._getDaysInMonth(k, ---> l <--- ));break;case"y":case"Y"

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"y":case"Y": ---> k <--- +=parseInt(j[1],10)

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"y":case"Y":k+=parseInt( ---> j <--- [1],10);g=Math

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(j[1],10); ---> g <--- =Math.min(g,d.datepicker

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
10);g=Math.min( ---> g <--- ,d.datepicker._getDaysInMonth(k,l

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=Math.min(g, ---> d <--- .datepicker._getDaysInMonth(k,l))

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(g,d.datepicker._getDaysInMonth( ---> k <--- ,l));break;}j=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,d.datepicker._getDaysInMonth(k, ---> l <--- ));break;}j=u.

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
k,l));break;} ---> j <--- =u.exec(h);}return

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
l));break;}j= ---> u <--- .exec(h);}returnnew Date

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}j=u.exec( ---> h <--- );}returnnew Date(k,l

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
(h);}returnnew Date( ---> k <--- ,l,g);};if(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
);}returnnew Date(k, ---> l <--- ,g);};if(b=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}returnnew Date(k,l, ---> g <--- );};if(b=(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
l,g);};if( ---> b <--- =(b=b==null?c:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);};if(b=( ---> b <--- =b==null?c:typeofb==

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
};if(b=(b= ---> b <--- ==null?c:typeofb=="string"?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b=(b=b==null? ---> c <--- :typeofb=="string"?f(b)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=b==null?c:typeof ---> b <--- =="string"?f(b):typeofb

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
null?c:typeofb=="string"? ---> f <--- (b):typeofb=="number"?isNaN

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c:typeofb=="string"?f( ---> b <--- ):typeofb=="number"?isNaN(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="string"?f(b):typeof ---> b <--- =="number"?isNaN(b)?c:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
):typeofb=="number"?isNaN( ---> b <--- )?c:e(b):b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b=="number"?isNaN(b)? ---> c <--- :e(b):b)&&b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"number"?isNaN(b)?c: ---> e <--- (b):b)&&b.toString

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
isNaN(b)?c:e( ---> b <--- ):b)&&b.toString()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)?c:e(b): ---> b <--- )&&b.toString()=="Invalid Date"?

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:e(b):b)&& ---> b <--- .toString()=="Invalid Date"?c:b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b.toString()=="Invalid Date"? ---> c <--- :b){b.setHours(0)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.toString()=="Invalid Date"?c: ---> b <--- ){b.setHours(0);b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="Invalid Date"?c:b){ ---> b <--- .setHours(0);b.setMinutes(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){b.setHours(0); ---> b <--- .setMinutes(0);b.setSeconds(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);b.setMinutes(0); ---> b <--- .setSeconds(0);b.setMilliseconds(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);b.setSeconds(0); ---> b <--- .setMilliseconds(0);}returnthis.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0);}returnthis._daylightSavingAdjust( ---> b <--- );},_daylightSavingAdjust:function(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a){if(! ---> a <--- ){returnnull;}a.setHours(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(!a){returnnull;} ---> a <--- .setHours(a.getHours()>12

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnnull;}a.setHours( ---> a <--- .getHours()>12?a.getHours

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.getHours()>12? ---> a <--- .getHours()+2:0);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
()+2:0);return ---> a <--- ;},_setDate:function(a,b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b,c){var  ---> e <--- =!b,f=a.selectedMonth,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b,c){var e=! ---> b <--- ,f=a.selectedMonth,h=a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c){var e=!b, ---> f <--- =a.selectedMonth,h=a.selectedYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{var e=!b,f= ---> a <--- .selectedMonth,h=a.selectedYear;b

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
!b,f=a.selectedMonth, ---> h <--- =a.selectedYear;b=this._restrictMinMax

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=a.selectedMonth,h= ---> a <--- .selectedYear;b=this._restrictMinMax(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedMonth,h=a.selectedYear; ---> b <--- =this._restrictMinMax(a,this._determineDate

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedYear;b=this._restrictMinMax( ---> a <--- ,this._determineDate(a,b,new 

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._restrictMinMax(a,this._determineDate( ---> a <--- ,b,new Date));a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,this._determineDate(a, ---> b <--- ,new Date));a.selectedDay=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,new Date)); ---> a <--- .selectedDay=a.currentDay=b.getDate

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
new Date));a.selectedDay= ---> a <--- .currentDay=b.getDate();a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.selectedDay=a.currentDay= ---> b <--- .getDate();a.drawMonth=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentDay=b.getDate(); ---> a <--- .drawMonth=a.selectedMonth=a.currentMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate();a.drawMonth= ---> a <--- .selectedMonth=a.currentMonth=b.getMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.drawMonth=a.selectedMonth= ---> a <--- .currentMonth=b.getMonth();a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.selectedMonth=a.currentMonth= ---> b <--- .getMonth();a.drawYear=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentMonth=b.getMonth(); ---> a <--- .drawYear=a.selectedYear=a.currentYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth();a.drawYear= ---> a <--- .selectedYear=a.currentYear=b.getFullYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.drawYear=a.selectedYear= ---> a <--- .currentYear=b.getFullYear();if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.selectedYear=a.currentYear= ---> b <--- .getFullYear();if((f!=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
b.getFullYear();if(( ---> f <--- !=a.selectedMonth||h!=a.selectedYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
getFullYear();if((f!= ---> a <--- .selectedMonth||h!=a.selectedYear)&&

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if((f!=a.selectedMonth|| ---> h <--- !=a.selectedYear)&&!c){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(f!=a.selectedMonth||h!= ---> a <--- .selectedYear)&&!c){this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||h!=a.selectedYear)&&! ---> c <--- ){this._notifyChange(a);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
&&!c){this._notifyChange( ---> a <--- );}this._adjustInstDate(a);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a);}this._adjustInstDate( ---> a <--- );if(a.input){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._adjustInstDate(a);if( ---> a <--- .input){a.input.val(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(a.input){ ---> a <--- .input.val(e?"":this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
input){a.input.val( ---> e <--- ?"":this._formatDate(a))

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(e?"":this._formatDate( ---> a <--- ));}},_getDate:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_getDate:function(a){return! ---> a <--- .currentYear||a.input&&a.input

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){return!a.currentYear|| ---> a <--- .input&&a.input.val()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!a.currentYear||a.input&& ---> a <--- .input.val()==""?null

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
null:this._daylightSavingAdjust(new Date( ---> a <--- .currentYear,a.currentMonth,a.currentDay

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_daylightSavingAdjust(new Date(a.currentYear, ---> a <--- .currentMonth,a.currentDay));}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.currentYear,a.currentMonth, ---> a <--- .currentDay));},_generateHTML:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_generateHTML:function(a){var  ---> b <--- =new Date;b=this._daylightSavingAdjust(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a){var b=new Date; ---> b <--- =this._daylightSavingAdjust(new Date(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=this._daylightSavingAdjust(new Date( ---> b <--- .getFullYear(),b.getMonth()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
new Date(b.getFullYear(), ---> b <--- .getMonth(),b.getDate()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(),b.getMonth(), ---> b <--- .getDate()));var c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.getDate()));var  ---> c <--- =this._get(a,"isRTL"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var c=this._get( ---> a <--- ,"isRTL"),e=this._get(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"isRTL"), ---> e <--- =this._get(a,"showButtonPanel"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"isRTL"),e=this._get( ---> a <--- ,"showButtonPanel"),f=this._get(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"showButtonPanel"), ---> f <--- =this._get(a,"hideIfNoPrevNext"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"showButtonPanel"),f=this._get( ---> a <--- ,"hideIfNoPrevNext"),h=this._get(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"hideIfNoPrevNext"), ---> h <--- =this._get(a,"navigationAsDateFormat"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"hideIfNoPrevNext"),h=this._get( ---> a <--- ,"navigationAsDateFormat"),i=this._getNumberOfMonths(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"navigationAsDateFormat"), ---> i <--- =this._getNumberOfMonths(a),g=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"navigationAsDateFormat"),i=this._getNumberOfMonths( ---> a <--- ),g=this._get(a,

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
i=this._getNumberOfMonths(a), ---> g <--- =this._get(a,"showCurrentAtPos"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a),g=this._get( ---> a <--- ,"showCurrentAtPos"),k=this._get(

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"showCurrentAtPos"), ---> k <--- =this._get(a,"stepMonths"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"showCurrentAtPos"),k=this._get( ---> a <--- ,"stepMonths"),l=i[0]

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"stepMonths"), ---> l <--- =i[0]!=1||i[

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"stepMonths"),l= ---> i <--- [0]!=1||i[1]

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
l=i[0]!=1|| ---> i <--- [1]!=1,u=this.

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
1||i[1]!=1, ---> u <--- =this._daylightSavingAdjust(!a.currentDay?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1,u=this._daylightSavingAdjust(! ---> a <--- .currentDay?new Date(9999,9,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,9,9):new Date( ---> a <--- .currentYear,a.currentMonth,a.currentDay

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
):new Date(a.currentYear, ---> a <--- .currentMonth,a.currentDay)),j

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.currentYear,a.currentMonth, ---> a <--- .currentDay)),j=this._getMinMaxDate

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.currentMonth,a.currentDay)), ---> j <--- =this._getMinMaxDate(a,"min"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)),j=this._getMinMaxDate( ---> a <--- ,"min"),o=this._getMinMaxDate(

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getMinMaxDate(a,"min"), ---> o <--- =this._getMinMaxDate(a,"max");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"min"),o=this._getMinMaxDate( ---> a <--- ,"max");g=a.drawMonth-

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getMinMaxDate(a,"max"); ---> g <--- =a.drawMonth-g;var m=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_getMinMaxDate(a,"max");g= ---> a <--- .drawMonth-g;var m=a.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"max");g=a.drawMonth- ---> g <--- ;var m=a.drawYear;if(

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
g=a.drawMonth-g;var  ---> m <--- =a.drawYear;if(g<0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.drawMonth-g;var m= ---> a <--- .drawYear;if(g<0){

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
var m=a.drawYear;if( ---> g <--- <0){g+=12;m--

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
drawYear;if(g<0){ ---> g <--- +=12;m--;}if(o

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
g<0){g+=12; ---> m <--- --;}if(o){var n

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
+=12;m--;}if( ---> o <--- ){var n=this._daylightSavingAdjust(new 

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
--;}if(o){var  ---> n <--- =this._daylightSavingAdjust(new Date(o.

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
n=this._daylightSavingAdjust(new Date( ---> o <--- .getFullYear(),o.getMonth()

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
new Date(o.getFullYear(), ---> o <--- .getMonth()-i[0]*

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(),o.getMonth()- ---> i <--- [0]*i[1]+1

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
getMonth()-i[0]* ---> i <--- [1]+1,o.getDate(

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
]*i[1]+1, ---> o <--- .getDate()));for(n

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate()));for( ---> n <--- =j&&n<j?j:n

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
()));for(n= ---> j <--- &&n<j?j:n;this

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
));for(n=j&& ---> n <--- <j?j:n;this._daylightSavingAdjust

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(n=j&&n< ---> j <--- ?j:n;this._daylightSavingAdjust(new 

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
(n=j&&n<j? ---> j <--- :n;this._daylightSavingAdjust(new Date(

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
=j&&n<j?j: ---> n <--- ;this._daylightSavingAdjust(new Date(m,

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
n;this._daylightSavingAdjust(new Date( ---> m <--- ,g,1))>n;)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(m, ---> g <--- ,1))>n;){g

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
(m,g,1))> ---> n <--- ;){g--;if(g<

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,1))>n;){ ---> g <--- --;if(g<0){g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
n;){g--;if( ---> g <--- <0){g=11;m--

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
--;if(g<0){ ---> g <--- =11;m--;}}}a

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
g<0){g=11; ---> m <--- --;}}}a.drawMonth=g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=11;m--;}}} ---> a <--- .drawMonth=g;a.drawYear=m

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
--;}}}a.drawMonth= ---> g <--- ;a.drawYear=m;n=this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}a.drawMonth=g; ---> a <--- .drawYear=m;n=this._get

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
.drawMonth=g;a.drawYear= ---> m <--- ;n=this._get(a,"prevText"

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
=g;a.drawYear=m; ---> n <--- =this._get(a,"prevText");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=m;n=this._get( ---> a <--- ,"prevText");n=!h?n

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"prevText"); ---> n <--- =!h?n:this.formatDate(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,"prevText");n=! ---> h <--- ?n:this.formatDate(n,this

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
,"prevText");n=!h? ---> n <--- :this.formatDate(n,this._daylightSavingAdjust

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
!h?n:this.formatDate( ---> n <--- ,this._daylightSavingAdjust(new Date(m,

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
n,this._daylightSavingAdjust(new Date( ---> m <--- ,g-k,1)),this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(m, ---> g <--- -k,1)),this._getFormatConfig

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
_daylightSavingAdjust(new Date(m,g- ---> k <--- ,1)),this._getFormatConfig(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,1)),this._getFormatConfig( ---> a <--- ));n=this._canAdjustMonth(a

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
,this._getFormatConfig(a)); ---> n <--- =this._canAdjustMonth(a,-1,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
));n=this._canAdjustMonth( ---> a <--- ,-1,m,g)?'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_'

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
this._canAdjustMonth(a,-1, ---> m <--- ,g)?'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
_canAdjustMonth(a,-1,m, ---> g <--- )?'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+a.

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
1,m,g)?'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_'+ ---> y <--- +".datepicker._adjustDate('#"+a.id+"', -"+k

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g)?'<a class="ui-datepicker-prev ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+ ---> a <--- .id+"', -"+k+", 'M');\" title=\""+n

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
+".datepicker._adjustDate('#"+a.id+"', -"+ ---> k <--- +", 'M');\" title=\""+n+'"><span class="ui-icon ui-icon-circle-triangle-'+(c?

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
.id+"', -"+k+", 'M');\" title=\""+ ---> n <--- +'"><span class="ui-icon ui-icon-circle-triangle-'+(c?"e":"w")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
k+", 'M');\" title=\""+n+'"><span class="ui-icon ui-icon-circle-triangle-'+( ---> c <--- ?"e":"w")+'">'+n+

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
c?"e":"w")+'">'+ ---> n <--- +"</span></a>":f?"":'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+n

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"w")+'">'+n+"</span></a>": ---> f <--- ?"":'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+n+'"><span class="ui-icon ui-icon-circle-triangle-'+(

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
+"</span></a>":f?"":'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+ ---> n <--- +'"><span class="ui-icon ui-icon-circle-triangle-'+(c?"e":"w")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"":'<a class="ui-datepicker-prev ui-corner-all ui-state-disabled" title="'+n+'"><span class="ui-icon ui-icon-circle-triangle-'+( ---> c <--- ?"e":"w")+'">'+n+

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
c?"e":"w")+'">'+ ---> n <--- +"</span></a>";var r=this._get(

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
)+'">'+n+"</span></a>";var  ---> r <--- =this._get(a,"nextText");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"</span></a>";var r=this._get( ---> a <--- ,"nextText");r=!h?r

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"nextText"); ---> r <--- =!h?r:this.formatDate(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,"nextText");r=! ---> h <--- ?r:this.formatDate(r,this

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
,"nextText");r=!h? ---> r <--- :this.formatDate(r,this._daylightSavingAdjust

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
!h?r:this.formatDate( ---> r <--- ,this._daylightSavingAdjust(new Date(m,

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
r,this._daylightSavingAdjust(new Date( ---> m <--- ,g+k,1)),this

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(m, ---> g <--- +k,1)),this._getFormatConfig

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
_daylightSavingAdjust(new Date(m,g+ ---> k <--- ,1)),this._getFormatConfig(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,1)),this._getFormatConfig( ---> a <--- ));f=this._canAdjustMonth(a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,this._getFormatConfig(a)); ---> f <--- =this._canAdjustMonth(a,+1,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
));f=this._canAdjustMonth( ---> a <--- ,+1,m,g)?'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_'

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
this._canAdjustMonth(a,+1, ---> m <--- ,g)?'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
_canAdjustMonth(a,+1,m, ---> g <--- )?'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+a.

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
1,m,g)?'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_'+ ---> y <--- +".datepicker._adjustDate('#"+a.id+"', +"+k

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g)?'<a class="ui-datepicker-next ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._adjustDate('#"+ ---> a <--- .id+"', +"+k+", 'M');\" title=\""+r

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
+".datepicker._adjustDate('#"+a.id+"', +"+ ---> k <--- +", 'M');\" title=\""+r+'"><span class="ui-icon ui-icon-circle-triangle-'+(c?

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
.id+"', +"+k+", 'M');\" title=\""+ ---> r <--- +'"><span class="ui-icon ui-icon-circle-triangle-'+(c?"w":"e")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
k+", 'M');\" title=\""+r+'"><span class="ui-icon ui-icon-circle-triangle-'+( ---> c <--- ?"w":"e")+'">'+r+

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
c?"w":"e")+'">'+ ---> r <--- +"</span></a>":f?"":'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+r

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"e")+'">'+r+"</span></a>": ---> f <--- ?"":'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+r+'"><span class="ui-icon ui-icon-circle-triangle-'+(

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
+"</span></a>":f?"":'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+ ---> r <--- +'"><span class="ui-icon ui-icon-circle-triangle-'+(c?"w":"e")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"":'<a class="ui-datepicker-next ui-corner-all ui-state-disabled" title="'+r+'"><span class="ui-icon ui-icon-circle-triangle-'+( ---> c <--- ?"w":"e")+'">'+r+

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
c?"w":"e")+'">'+ ---> r <--- +"</span></a>";k=this._get(a

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"e")+'">'+r+"</span></a>"; ---> k <--- =this._get(a,"currentText");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+"</span></a>";k=this._get( ---> a <--- ,"currentText");r=this._get(

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"currentText"); ---> r <--- =this._get(a,"gotoCurrent")&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"currentText");r=this._get( ---> a <--- ,"gotoCurrent")&&a.currentDay?u:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"gotoCurrent")&& ---> a <--- .currentDay?u:b;k=!

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"gotoCurrent")&&a.currentDay? ---> u <--- :b;k=!h?k:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"gotoCurrent")&&a.currentDay?u: ---> b <--- ;k=!h?k:this.

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
&&a.currentDay?u:b; ---> k <--- =!h?k:this.formatDate(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
currentDay?u:b;k=! ---> h <--- ?k:this.formatDate(k,r

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
u:b;k=!h? ---> k <--- :this.formatDate(k,r,this

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
!h?k:this.formatDate( ---> k <--- ,r,this._getFormatConfig(a))

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
?k:this.formatDate(k, ---> r <--- ,this._getFormatConfig(a));h

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(k,r,this._getFormatConfig( ---> a <--- ));h=!a.inline?

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,this._getFormatConfig(a)); ---> h <--- =!a.inline?'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_'+y+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_getFormatConfig(a));h=! ---> a <--- .inline?'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_'+y+'.datepicker._hideDatepicker();">'+this

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
h=!a.inline?'<button type="button" class="ui-datepicker-close ui-state-default ui-priority-primary ui-corner-all" onclick="DP_jQuery_'+ ---> y <--- +'.datepicker._hideDatepicker();">'+this._get(a,"closeText"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+y+'.datepicker._hideDatepicker();">'+this._get( ---> a <--- ,"closeText")+"</button>":"";e=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"closeText")+"</button>":""; ---> e <--- =e?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(c?h:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"closeText")+"</button>":"";e= ---> e <--- ?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(c?h:"")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"";e=e?'<div class="ui-datepicker-buttonpane ui-widget-content">'+( ---> c <--- ?h:"")+(this._isInRange

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
e=e?'<div class="ui-datepicker-buttonpane ui-widget-content">'+(c? ---> h <--- :"")+(this._isInRange(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:"")+(this._isInRange( ---> a <--- ,r)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._gotoToday('#"+

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(this._isInRange(a, ---> r <--- )?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._gotoToday('#"+a.

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
_isInRange(a,r)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_'+ ---> y <--- +".datepicker._gotoToday('#"+a.id+"');\">"+k

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
r)?'<button type="button" class="ui-datepicker-current ui-state-default ui-priority-secondary ui-corner-all" onclick="DP_jQuery_'+y+".datepicker._gotoToday('#"+ ---> a <--- .id+"');\">"+k+"</button>":""

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
+".datepicker._gotoToday('#"+a.id+"');\">"+ ---> k <--- +"</button>":"")+(c?""

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+k+"</button>":"")+( ---> c <--- ?"":h)+"</div>":"";

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:"")+(c?"": ---> h <--- )+"</div>":"";h=parseInt(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"":h)+"</div>":""; ---> h <--- =parseInt(this._get(a,"firstDay"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;h=parseInt(this._get( ---> a <--- ,"firstDay"),10);h=isNaN

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,"firstDay"),10); ---> h <--- =isNaN(h)?0:h;

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
),10);h=isNaN( ---> h <--- )?0:h;k=this.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
h=isNaN(h)?0: ---> h <--- ;k=this._get(a,"showWeek"

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
isNaN(h)?0:h; ---> k <--- =this._get(a,"showWeek");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:h;k=this._get( ---> a <--- ,"showWeek");r=this._get(

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"showWeek"); ---> r <--- =this._get(a,"dayNames");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"showWeek");r=this._get( ---> a <--- ,"dayNames");this._get(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"dayNames");this._get( ---> a <--- ,"dayNamesShort");var s=this._get

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(a,"dayNamesShort");var  ---> s <--- =this._get(a,"dayNamesMin"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);var s=this._get( ---> a <--- ,"dayNamesMin"),z=this._get(

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"dayNamesMin"), ---> z <--- =this._get(a,"monthNames"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"dayNamesMin"),z=this._get( ---> a <--- ,"monthNames"),v=this._get(

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"monthNames"), ---> v <--- =this._get(a,"monthNamesShort"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"monthNames"),v=this._get( ---> a <--- ,"monthNamesShort"),p=this._get(

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"monthNamesShort"), ---> p <--- =this._get(a,"beforeShowDay"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"monthNamesShort"),p=this._get( ---> a <--- ,"beforeShowDay"),w=this._get(

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"beforeShowDay"), ---> w <--- =this._get(a,"showOtherMonths"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"beforeShowDay"),w=this._get( ---> a <--- ,"showOtherMonths"),H=this._get(

[WARNING] The symbol H is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"showOtherMonths"), ---> H <--- =this._get(a,"selectOtherMonths");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"showOtherMonths"),H=this._get( ---> a <--- ,"selectOtherMonths");this._get(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"selectOtherMonths");this._get( ---> a <--- ,"calculateWeek");for(var M=this

[WARNING] The symbol M is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,"calculateWeek");for(var  ---> M <--- =this._getDefaultDate(a),I=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var M=this._getDefaultDate( ---> a <--- ),I="",C=0;

[WARNING] The symbol I is declared but is apparently never used.
This code can probably be written in a more compact way.
M=this._getDefaultDate(a), ---> I <--- ="",C=0;C<i

[WARNING] The symbol C is declared but is apparently never used.
This code can probably be written in a more compact way.
_getDefaultDate(a),I="", ---> C <--- =0;C<i[0];

[WARNING] The symbol C is declared but is apparently never used.
This code can probably be written in a more compact way.
,I="",C=0; ---> C <--- <i[0];C++){

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
="",C=0;C< ---> i <--- [0];C++){for(

[WARNING] The symbol C is declared but is apparently never used.
This code can probably be written in a more compact way.
0;C<i[0]; ---> C <--- ++){for(var N="",

[WARNING] The symbol N is declared but is apparently never used.
This code can probably be written in a more compact way.
];C++){for(var  ---> N <--- ="",D=0;D<i

[WARNING] The symbol D is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var N="", ---> D <--- =0;D<i[1];

[WARNING] The symbol D is declared but is apparently never used.
This code can probably be written in a more compact way.
var N="",D=0; ---> D <--- <i[1];D++){

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
="",D=0;D< ---> i <--- [1];D++){var J

[WARNING] The symbol D is declared but is apparently never used.
This code can probably be written in a more compact way.
0;D<i[1]; ---> D <--- ++){var J=this._daylightSavingAdjust(

[WARNING] The symbol J is declared but is apparently never used.
This code can probably be written in a more compact way.
[1];D++){var  ---> J <--- =this._daylightSavingAdjust(new Date(m,

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
J=this._daylightSavingAdjust(new Date( ---> m <--- ,g,a.selectedDay)),t

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(m, ---> g <--- ,a.selectedDay)),t=" ui-corner-all"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_daylightSavingAdjust(new Date(m,g, ---> a <--- .selectedDay)),t=" ui-corner-all",x

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
,g,a.selectedDay)), ---> t <--- =" ui-corner-all",x="";if(l

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedDay)),t=" ui-corner-all", ---> x <--- ="";if(l){x+=

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
=" ui-corner-all",x="";if( ---> l <--- ){x+='<div class="ui-datepicker-group';if(i[

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
x="";if(l){ ---> x <--- +='<div class="ui-datepicker-group';if(i[1]>

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
l){x+='<div class="ui-datepicker-group';if( ---> i <--- [1]>1){switch(D

[WARNING] The symbol D is declared but is apparently never used.
This code can probably be written in a more compact way.
[1]>1){switch( ---> D <--- ){case0:x+=" ui-datepicker-group-first";t

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
{switch(D){case0: ---> x <--- +=" ui-datepicker-group-first";t=" ui-corner-"+(c?

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){case0:x+=" ui-datepicker-group-first"; ---> t <--- =" ui-corner-"+(c?"right":"left")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
x+=" ui-datepicker-group-first";t=" ui-corner-"+( ---> c <--- ?"right":"left");break;casei

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
?"right":"left");break;case ---> i <--- [1]-1:x+=" ui-datepicker-group-last";

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
;casei[1]-1: ---> x <--- +=" ui-datepicker-group-last";t=" ui-corner-"+(c?

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
1]-1:x+=" ui-datepicker-group-last"; ---> t <--- =" ui-corner-"+(c?"left":"right")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
x+=" ui-datepicker-group-last";t=" ui-corner-"+( ---> c <--- ?"left":"right");break;default:

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
"left":"right");break;default: ---> x <--- +=" ui-datepicker-group-middle";t="";break;}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;default:x+=" ui-datepicker-group-middle"; ---> t <--- ="";break;}}x+='">'

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
;t="";break;}} ---> x <--- +='">';}x+='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+t+

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}}x+='">';} ---> x <--- +='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+t+'">'+(/all|left/.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
x+='">';}x+='<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix'+ ---> t <--- +'">'+(/all|left/.test(t)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
t+'">'+(/all|left/.test( ---> t <--- )&&C==0?c?f:

[WARNING] The symbol C is declared but is apparently never used.
This code can probably be written in a more compact way.
+(/all|left/.test(t)&& ---> C <--- ==0?c?f:n:""

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
test(t)&&C==0? ---> c <--- ?f:n:"")+(/all|right/

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
t)&&C==0?c? ---> f <--- :n:"")+(/all|right/.test

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
&&C==0?c?f: ---> n <--- :"")+(/all|right/.test(t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
:"")+(/all|right/.test( ---> t <--- )&&C==0?c?n:

[WARNING] The symbol C is declared but is apparently never used.
This code can probably be written in a more compact way.
+(/all|right/.test(t)&& ---> C <--- ==0?c?n:f:""

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
test(t)&&C==0? ---> c <--- ?n:f:"")+this.

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
t)&&C==0?c? ---> n <--- :f:"")+this._generateMonthYearHeader(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
&&C==0?c?n: ---> f <--- :"")+this._generateMonthYearHeader(a,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f:"")+this._generateMonthYearHeader( ---> a <--- ,g,m,j,o,C

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"")+this._generateMonthYearHeader(a, ---> g <--- ,m,j,o,C>0

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
+this._generateMonthYearHeader(a,g, ---> m <--- ,j,o,C>0||D

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
._generateMonthYearHeader(a,g,m, ---> j <--- ,o,C>0||D>0

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,g,m,j, ---> o <--- ,C>0||D>0,z

[WARNING] The symbol C is declared but is apparently never used.
This code can probably be written in a more compact way.
,g,m,j,o, ---> C <--- >0||D>0,z,v

[WARNING] The symbol D is declared but is apparently never used.
This code can probably be written in a more compact way.
,j,o,C>0|| ---> D <--- >0,z,v)+'</div><table class="ui-datepicker-calendar"><thead><tr>';

[WARNING] The symbol z is declared but is apparently never used.
This code can probably be written in a more compact way.
,C>0||D>0, ---> z <--- ,v)+'</div><table class="ui-datepicker-calendar"><thead><tr>';var A=k

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
>0||D>0,z, ---> v <--- )+'</div><table class="ui-datepicker-calendar"><thead><tr>';var A=k?'<th class="ui-datepicker-week-col">'

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
,z,v)+'</div><table class="ui-datepicker-calendar"><thead><tr>';var  ---> A <--- =k?'<th class="ui-datepicker-week-col">'+this._get(a

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
,v)+'</div><table class="ui-datepicker-calendar"><thead><tr>';var A= ---> k <--- ?'<th class="ui-datepicker-week-col">'+this._get(a,"weekHeader"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=k?'<th class="ui-datepicker-week-col">'+this._get( ---> a <--- ,"weekHeader")+"</th>":"";for(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
"weekHeader")+"</th>":"";for( ---> t <--- =0;t<7;t++)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
:"";for(t=0; ---> t <--- <7;t++){var q=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(t=0;t<7; ---> t <--- ++){var q=(t+h

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
t<7;t++){var  ---> q <--- =(t+h)%7;A

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
;t++){var q=( ---> t <--- +h)%7;A+="<th"+

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
++){var q=(t+ ---> h <--- )%7;A+="<th"+((

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
=(t+h)%7; ---> A <--- +="<th"+((t+h+6

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
%7;A+="<th"+(( ---> t <--- +h+6)%7>=5?

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;A+="<th"+((t+ ---> h <--- +6)%7>=5?' class="ui-datepicker-week-end"':

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
5?' class="ui-datepicker-week-end"':"")+'><span title="'+ ---> r <--- [q]+'">'+s[q]

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
' class="ui-datepicker-week-end"':"")+'><span title="'+r[ ---> q <--- ]+'">'+s[q]+"</span></th>"

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
'><span title="'+r[q]+'">'+ ---> s <--- [q]+"</span></th>";}x+=A

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
r[q]+'">'+s[ ---> q <--- ]+"</span></th>";}x+=A+"</tr></thead><tbody>"

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
+s[q]+"</span></th>";} ---> x <--- +=A+"</tr></thead><tbody>";A=this._getDaysInMonth

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
[q]+"</span></th>";}x+= ---> A <--- +"</tr></thead><tbody>";A=this._getDaysInMonth(m

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
"</span></th>";}x+=A+"</tr></thead><tbody>"; ---> A <--- =this._getDaysInMonth(m,g);

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
+"</tr></thead><tbody>";A=this._getDaysInMonth( ---> m <--- ,g);if(m==a.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;A=this._getDaysInMonth(m, ---> g <--- );if(m==a.selectedYear&&

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
_getDaysInMonth(m,g);if( ---> m <--- ==a.selectedYear&&g==a.selectedMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
m,g);if(m== ---> a <--- .selectedYear&&g==a.selectedMonth){

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(m==a.selectedYear&& ---> g <--- ==a.selectedMonth){a.selectedDay=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(m==a.selectedYear&&g== ---> a <--- .selectedMonth){a.selectedDay=Math.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
selectedYear&&g==a.selectedMonth){ ---> a <--- .selectedDay=Math.min(a.selectedDay

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.selectedDay=Math.min( ---> a <--- .selectedDay,A);}t=(

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
=Math.min(a.selectedDay, ---> A <--- );}t=(this._getFirstDayOfMonth(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.selectedDay,A);} ---> t <--- =(this._getFirstDayOfMonth(m,g)

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
;}t=(this._getFirstDayOfMonth( ---> m <--- ,g)-h+7)%7

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
t=(this._getFirstDayOfMonth(m, ---> g <--- )-h+7)%7;A

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getFirstDayOfMonth(m,g)- ---> h <--- +7)%7;A=l?

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
)-h+7)%7; ---> A <--- =l?6:Math.ceil((

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
h+7)%7;A= ---> l <--- ?6:Math.ceil((t+

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
l?6:Math.ceil(( ---> t <--- +A)/7);q=this

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
6:Math.ceil((t+ ---> A <--- )/7);q=this._daylightSavingAdjust

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
(t+A)/7); ---> q <--- =this._daylightSavingAdjust(new Date(m,

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
q=this._daylightSavingAdjust(new Date( ---> m <--- ,g,1-t));for

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(m, ---> g <--- ,1-t));for(var 

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
new Date(m,g,1- ---> t <--- ));for(var O=0;

[WARNING] The symbol O is declared but is apparently never used.
This code can probably be written in a more compact way.
1-t));for(var  ---> O <--- =0;O<A;O++)

[WARNING] The symbol O is declared but is apparently never used.
This code can probably be written in a more compact way.
);for(var O=0; ---> O <--- <A;O++){x+="<tr>"

[WARNING] The symbol A is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var O=0;O< ---> A <--- ;O++){x+="<tr>";var 

[WARNING] The symbol O is declared but is apparently never used.
This code can probably be written in a more compact way.
var O=0;O<A; ---> O <--- ++){x+="<tr>";var P=

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
;O<A;O++){ ---> x <--- +="<tr>";var P=!k?""

[WARNING] The symbol P is declared but is apparently never used.
This code can probably be written in a more compact way.
O++){x+="<tr>";var  ---> P <--- =!k?"":'<td class="ui-datepicker-week-col">'+this.

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{x+="<tr>";var P=! ---> k <--- ?"":'<td class="ui-datepicker-week-col">'+this._get(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?"":'<td class="ui-datepicker-week-col">'+this._get( ---> a <--- ,"calculateWeek")(q)+"</td>";for

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"calculateWeek")( ---> q <--- )+"</td>";for(t=0;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
)(q)+"</td>";for( ---> t <--- =0;t<7;t++)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
+"</td>";for(t=0; ---> t <--- <7;t++){var F=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(t=0;t<7; ---> t <--- ++){var F=p?p.

[WARNING] The symbol F is declared but is apparently never used.
This code can probably be written in a more compact way.
t<7;t++){var  ---> F <--- =p?p.apply(a.input

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
7;t++){var F= ---> p <--- ?p.apply(a.input?a

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
t++){var F=p? ---> p <--- .apply(a.input?a.input

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var F=p?p.apply( ---> a <--- .input?a.input[0]:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?p.apply(a.input? ---> a <--- .input[0]:null,[q

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
.input[0]:null,[ ---> q <--- ]):[true,""],B

[WARNING] The symbol B is declared but is apparently never used.
This code can probably be written in a more compact way.
]):[true,""], ---> B <--- =q.getMonth()!=g,K

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
:[true,""],B= ---> q <--- .getMonth()!=g,K=B

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,B=q.getMonth()!= ---> g <--- ,K=B&&!H||!F

[WARNING] The symbol K is declared but is apparently never used.
This code can probably be written in a more compact way.
=q.getMonth()!=g, ---> K <--- =B&&!H||!F[0

[WARNING] The symbol B is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()!=g,K= ---> B <--- &&!H||!F[0]||

[WARNING] The symbol H is declared but is apparently never used.
This code can probably be written in a more compact way.
)!=g,K=B&&! ---> H <--- ||!F[0]||j&&q

[WARNING] The symbol F is declared but is apparently never used.
This code can probably be written in a more compact way.
,K=B&&!H||! ---> F <--- [0]||j&&q<j||

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
!H||!F[0]|| ---> j <--- &&q<j||o&&q>o

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
||!F[0]||j&& ---> q <--- <j||o&&q>o;P

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
F[0]||j&&q< ---> j <--- ||o&&q>o;P+='<td class="'

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
0]||j&&q<j|| ---> o <--- &&q>o;P+='<td class="'+(

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
||j&&q<j||o&& ---> q <--- >o;P+='<td class="'+((t

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
&&q<j||o&&q> ---> o <--- ;P+='<td class="'+((t+h

[WARNING] The symbol P is declared but is apparently never used.
This code can probably be written in a more compact way.
<j||o&&q>o; ---> P <--- +='<td class="'+((t+h+6

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
>o;P+='<td class="'+(( ---> t <--- +h+6)%7>=5?

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;P+='<td class="'+((t+ ---> h <--- +6)%7>=5?" ui-datepicker-week-end":

[WARNING] The symbol B is declared but is apparently never used.
This code can probably be written in a more compact way.
>=5?" ui-datepicker-week-end":"")+( ---> B <--- ?" ui-datepicker-other-month":"")+(q.getTime

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
(B?" ui-datepicker-other-month":"")+( ---> q <--- .getTime()==J.getTime()

[WARNING] The symbol J is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(q.getTime()== ---> J <--- .getTime()&&g==a.selectedMonth

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
()==J.getTime()&& ---> g <--- ==a.selectedMonth&&a._keyEvent||M

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
==J.getTime()&&g== ---> a <--- .selectedMonth&&a._keyEvent||M.getTime

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
()&&g==a.selectedMonth&& ---> a <--- ._keyEvent||M.getTime()==q

[WARNING] The symbol M is declared but is apparently never used.
This code can probably be written in a more compact way.
==a.selectedMonth&&a._keyEvent|| ---> M <--- .getTime()==q.getTime()

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
._keyEvent||M.getTime()== ---> q <--- .getTime()&&M.getTime()

[WARNING] The symbol M is declared but is apparently never used.
This code can probably be written in a more compact way.
()==q.getTime()&& ---> M <--- .getTime()==J.getTime()

[WARNING] The symbol J is declared but is apparently never used.
This code can probably be written in a more compact way.
()&&M.getTime()== ---> J <--- .getTime()?" "+this._dayOverClass

[WARNING] The symbol K is declared but is apparently never used.
This code can probably be written in a more compact way.
+this._dayOverClass:"")+( ---> K <--- ?" "+this._unselectableClass+" ui-state-disabled":""

[WARNING] The symbol B is declared but is apparently never used.
This code can probably be written in a more compact way.
._unselectableClass+" ui-state-disabled":"")+( ---> B <--- &&!w?"":" "+F[

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
" ui-state-disabled":"")+(B&&! ---> w <--- ?"":" "+F[1]+

[WARNING] The symbol F is declared but is apparently never used.
This code can probably be written in a more compact way.
B&&!w?"":" "+ ---> F <--- [1]+(q.getTime()

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
:" "+F[1]+( ---> q <--- .getTime()==u.getTime()

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
]+(q.getTime()== ---> u <--- .getTime()?" "+this._currentClass

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
+this._currentClass:"")+( ---> q <--- .getTime()==b.getTime()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(q.getTime()== ---> b <--- .getTime()?" ui-datepicker-today":""))

[WARNING] The symbol B is declared but is apparently never used.
This code can probably be written in a more compact way.
""))+'"'+((! ---> B <--- ||w)&&F[2]?' title="'

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
)+'"'+((!B|| ---> w <--- )&&F[2]?' title="'+F

[WARNING] The symbol F is declared but is apparently never used.
This code can probably be written in a more compact way.
+((!B||w)&& ---> F <--- [2]?' title="'+F[2]

[WARNING] The symbol F is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&F[2]?' title="'+ ---> F <--- [2]+'"':"")+(

[WARNING] The symbol K is declared but is apparently never used.
This code can probably be written in a more compact way.
2]+'"':"")+( ---> K <--- ?"":' onclick="DP_jQuery_'+y+".datepicker._selectDay('#"+a

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(K?"":' onclick="DP_jQuery_'+ ---> y <--- +".datepicker._selectDay('#"+a.id+"',"+q

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?"":' onclick="DP_jQuery_'+y+".datepicker._selectDay('#"+ ---> a <--- .id+"',"+q.getMonth()

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
+".datepicker._selectDay('#"+a.id+"',"+ ---> q <--- .getMonth()+","+q.getFullYear

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
+q.getMonth()+","+ ---> q <--- .getFullYear()+', this);return false;"')+">"+

[WARNING] The symbol B is declared but is apparently never used.
This code can probably be written in a more compact way.
()+', this);return false;"')+">"+( ---> B <--- &&!w?"&#xa0;":K?'<span class="ui-state-default">'+

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
', this);return false;"')+">"+(B&&! ---> w <--- ?"&#xa0;":K?'<span class="ui-state-default">'+q.getDate

[WARNING] The symbol K is declared but is apparently never used.
This code can probably be written in a more compact way.
+(B&&!w?"&#xa0;": ---> K <--- ?'<span class="ui-state-default">'+q.getDate()+"</span>"

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
!w?"&#xa0;":K?'<span class="ui-state-default">'+ ---> q <--- .getDate()+"</span>":'<a class="ui-state-default'+(

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
getDate()+"</span>":'<a class="ui-state-default'+( ---> q <--- .getTime()==b.getTime()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
'<a class="ui-state-default'+(q.getTime()== ---> b <--- .getTime()?" ui-state-highlight":"")+

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
()?" ui-state-highlight":"")+( ---> q <--- .getTime()==J.getTime()

[WARNING] The symbol J is declared but is apparently never used.
This code can probably be written in a more compact way.
)+(q.getTime()== ---> J <--- .getTime()?" ui-state-active":"")+

[WARNING] The symbol B is declared but is apparently never used.
This code can probably be written in a more compact way.
()?" ui-state-active":"")+( ---> B <--- ?" ui-priority-secondary":"")+'" href="#">'+q.

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
B?" ui-priority-secondary":"")+'" href="#">'+ ---> q <--- .getDate()+"</a>")+"</td>";

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
getDate()+"</a>")+"</td>"; ---> q <--- .setDate(q.getDate()+1

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
"</a>")+"</td>";q.setDate( ---> q <--- .getDate()+1);q=

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
q.getDate()+1); ---> q <--- =this._daylightSavingAdjust(q);}x

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
1);q=this._daylightSavingAdjust( ---> q <--- );}x+=P+"</tr>";}

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
=this._daylightSavingAdjust(q);} ---> x <--- +=P+"</tr>";}g++;if

[WARNING] The symbol P is declared but is apparently never used.
This code can probably be written in a more compact way.
._daylightSavingAdjust(q);}x+= ---> P <--- +"</tr>";}g++;if(g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;}x+=P+"</tr>";} ---> g <--- ++;if(g>11){g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+"</tr>";}g++;if( ---> g <--- >11){g=0;m++

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
++;if(g>11){ ---> g <--- =0;m++;}x+="</tbody></table>"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
g>11){g=0; ---> m <--- ++;}x+="</tbody></table>"+(l?

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
{g=0;m++;} ---> x <--- +="</tbody></table>"+(l?"</div>"+(i

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
m++;}x+="</tbody></table>"+( ---> l <--- ?"</div>"+(i[0]>0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+="</tbody></table>"+(l?"</div>"+( ---> i <--- [0]>0&&D==i[

[WARNING] The symbol D is declared but is apparently never used.
This code can probably be written in a more compact way.
+(i[0]>0&& ---> D <--- ==i[1]-1?'<div class="ui-datepicker-row-break"></div>':

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i[0]>0&&D== ---> i <--- [1]-1?'<div class="ui-datepicker-row-break"></div>':"")

[WARNING] The symbol N is declared but is apparently never used.
This code can probably be written in a more compact way.
?'<div class="ui-datepicker-row-break"></div>':""):""); ---> N <--- +=x;}I+=N;}I

[WARNING] The symbol x is declared but is apparently never used.
This code can probably be written in a more compact way.
:""):"");N+= ---> x <--- ;}I+=N;}I+=e

[WARNING] The symbol I is declared but is apparently never used.
This code can probably be written in a more compact way.
:"");N+=x;} ---> I <--- +=N;}I+=e+(d

[WARNING] The symbol N is declared but is apparently never used.
This code can probably be written in a more compact way.
);N+=x;}I+= ---> N <--- ;}I+=e+(d.browser

[WARNING] The symbol I is declared but is apparently never used.
This code can probably be written in a more compact way.
+=x;}I+=N;} ---> I <--- +=e+(d.browser.msie&&

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}I+=N;}I+= ---> e <--- +(d.browser.msie&&parseInt(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+=N;}I+=e+( ---> d <--- .browser.msie&&parseInt(d.browser

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(d.browser.msie&&parseInt( ---> d <--- .browser.version,10)<7&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.version,10)<7&&! ---> a <--- .inline?'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>':"");a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.inline?'<iframe src="javascript:false;" class="ui-datepicker-cover" frameborder="0"></iframe>':""); ---> a <--- ._keyEvent=false;returnI;},

[WARNING] The symbol I is declared but is apparently never used.
This code can probably be written in a more compact way.
);a._keyEvent=false;return ---> I <--- ;},_generateMonthYearHeader:function(a,b

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
,h,i,g){var  ---> k <--- =this._get(a,"changeMonth"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var k=this._get( ---> a <--- ,"changeMonth"),l=this._get(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"changeMonth"), ---> l <--- =this._get(a,"changeYear"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"changeMonth"),l=this._get( ---> a <--- ,"changeYear"),u=this._get(

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"changeYear"), ---> u <--- =this._get(a,"showMonthAfterYear"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"changeYear"),u=this._get( ---> a <--- ,"showMonthAfterYear"),j='<div class="ui-datepicker-title">',o=

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"showMonthAfterYear"), ---> j <--- ='<div class="ui-datepicker-title">',o="";if(h

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"showMonthAfterYear"),j='<div class="ui-datepicker-title">', ---> o <--- ="";if(h||!k)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
='<div class="ui-datepicker-title">',o="";if( ---> h <--- ||!k){o+='<span class="ui-datepicker-month">'+i

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
o="";if(h||! ---> k <--- ){o+='<span class="ui-datepicker-month">'+i[b]

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(h||!k){ ---> o <--- +='<span class="ui-datepicker-month">'+i[b]+"</span>";

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
||!k){o+='<span class="ui-datepicker-month">'+ ---> i <--- [b]+"</span>";}else{i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
k){o+='<span class="ui-datepicker-month">'+i[ ---> b <--- ]+"</span>";}else{i=e

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
[b]+"</span>";}else{ ---> i <--- =e&&e.getFullYear()==c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]+"</span>";}else{i= ---> e <--- &&e.getFullYear()==c;var 

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"</span>";}else{i=e&& ---> e <--- .getFullYear()==c;var m=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=e&&e.getFullYear()== ---> c <--- ;var m=f&&f.getFullYear(

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
e.getFullYear()==c;var  ---> m <--- =f&&f.getFullYear()==c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
getFullYear()==c;var m= ---> f <--- &&f.getFullYear()==c;o

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
)==c;var m=f&& ---> f <--- .getFullYear()==c;o+='<select class="ui-datepicker-month" onchange="DP_jQuery_'

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=f&&f.getFullYear()== ---> c <--- ;o+='<select class="ui-datepicker-month" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"+a

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
&&f.getFullYear()==c; ---> o <--- +='<select class="ui-datepicker-month" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"+a.id

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
()==c;o+='<select class="ui-datepicker-month" onchange="DP_jQuery_'+ ---> y <--- +".datepicker._selectMonthYear('#"+a.id+"', this, 'M');\" onclick=\"DP_jQuery_"+y

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;o+='<select class="ui-datepicker-month" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"+ ---> a <--- .id+"', this, 'M');\" onclick=\"DP_jQuery_"+y+".datepicker._clickMonthYear('#"+a

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
+".datepicker._selectMonthYear('#"+a.id+"', this, 'M');\" onclick=\"DP_jQuery_"+ ---> y <--- +".datepicker._clickMonthYear('#"+a.id+"');\">";for

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.id+"', this, 'M');\" onclick=\"DP_jQuery_"+y+".datepicker._clickMonthYear('#"+ ---> a <--- .id+"');\">";for(var n=

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
a.id+"');\">";for(var  ---> n <--- =0;n<12;n++)

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
"');\">";for(var n=0; ---> n <--- <12;n++){if((

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
var n=0;n<12; ---> n <--- ++){if((!i||n

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;n++){if((! ---> i <--- ||n>=e.getMonth())&&

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if((!i|| ---> n <--- >=e.getMonth())&&(!

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{if((!i||n>= ---> e <--- .getMonth())&&(!m||

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
e.getMonth())&&(! ---> m <--- ||n<=f.getMonth()))

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
getMonth())&&(!m|| ---> n <--- <=f.getMonth())){o

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
))&&(!m||n<= ---> f <--- .getMonth())){o+='<option value="'

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
<=f.getMonth())){ ---> o <--- +='<option value="'+n+'"'+(n==

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
())){o+='<option value="'+ ---> n <--- +'"'+(n==b?' selected="selected"':

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
o+='<option value="'+n+'"'+( ---> n <--- ==b?' selected="selected"':"")+">"+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
'<option value="'+n+'"'+(n== ---> b <--- ?' selected="selected"':"")+">"+g[

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b?' selected="selected"':"")+">"+ ---> g <--- [n]+"</option>";}}o+=

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
' selected="selected"':"")+">"+g[ ---> n <--- ]+"</option>";}}o+="</select>";

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
g[n]+"</option>";}} ---> o <--- +="</select>";}u||(j+=o

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
"</option>";}}o+="</select>";} ---> u <--- ||(j+=o+(h||!

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
}o+="</select>";}u||( ---> j <--- +=o+(h||!(k&&

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
+="</select>";}u||(j+= ---> o <--- +(h||!(k&&l)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}u||(j+=o+( ---> h <--- ||!(k&&l)?"&#xa0;":

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
j+=o+(h||!( ---> k <--- &&l)?"&#xa0;":""));

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
o+(h||!(k&& ---> l <--- )?"&#xa0;":""));if(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
?"&#xa0;":""));if( ---> h <--- ||!l){j+='<span class="ui-datepicker-year">'+c

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
""));if(h||! ---> l <--- ){j+='<span class="ui-datepicker-year">'+c+"</span>";

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(h||!l){ ---> j <--- +='<span class="ui-datepicker-year">'+c+"</span>";}else{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||!l){j+='<span class="ui-datepicker-year">'+ ---> c <--- +"</span>";}else{g=this.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
'<span class="ui-datepicker-year">'+c+"</span>";}else{ ---> g <--- =this._get(a,"yearRange").

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{g=this._get( ---> a <--- ,"yearRange").split(":");var 

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
"yearRange").split(":");var  ---> r <--- =(new Date).getFullYear();

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(new Date).getFullYear(); ---> i <--- =function(s){s=s.

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
);i=function(s){ ---> s <--- =s.match(/c[+-].*/)?c+

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
i=function(s){s= ---> s <--- .match(/c[+-].*/)?c+parseInt(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
s=s.match(/c[+-].*/)? ---> c <--- +parseInt(s.substring(1),

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
match(/c[+-].*/)?c+parseInt( ---> s <--- .substring(1),10):s

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.substring(1),10): ---> s <--- .match(/[+-].*/)?r+parseInt(

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
):s.match(/[+-].*/)? ---> r <--- +parseInt(s,10):parseInt(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
match(/[+-].*/)?r+parseInt( ---> s <--- ,10):parseInt(s,10)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
parseInt(s,10):parseInt( ---> s <--- ,10);returnisNaN(s)?

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
(s,10);returnisNaN( ---> s <--- )?r:s;};b=

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
10);returnisNaN(s)? ---> r <--- :s;};b=i(g

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
;returnisNaN(s)?r: ---> s <--- ;};b=i(g[0

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
s)?r:s;}; ---> b <--- =i(g[0]);g

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
?r:s;};b= ---> i <--- (g[0]);g=Math

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:s;};b=i( ---> g <--- [0]);g=Math.max

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=i(g[0]); ---> g <--- =Math.max(b,i(g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
]);g=Math.max( ---> b <--- ,i(g[1]||"")

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=Math.max(b, ---> i <--- (g[1]||""));

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=Math.max(b,i( ---> g <--- [1]||""));b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
g[1]||"")); ---> b <--- =e?Math.max(b,e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
1]||""));b= ---> e <--- ?Math.max(b,e.getFullYear

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b=e?Math.max( ---> b <--- ,e.getFullYear()):b;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=e?Math.max(b, ---> e <--- .getFullYear()):b;g=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b,e.getFullYear()): ---> b <--- ;g=f?Math.min(g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e.getFullYear()):b; ---> g <--- =f?Math.min(g,f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
getFullYear()):b;g= ---> f <--- ?Math.min(g,f.getFullYear

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;g=f?Math.min( ---> g <--- ,f.getFullYear()):g;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=f?Math.min(g, ---> f <--- .getFullYear()):g;for(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g,f.getFullYear()): ---> g <--- ;for(j+='<select class="ui-datepicker-year" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
getFullYear()):g;for( ---> j <--- +='<select class="ui-datepicker-year" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"+a.id

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
:g;for(j+='<select class="ui-datepicker-year" onchange="DP_jQuery_'+ ---> y <--- +".datepicker._selectMonthYear('#"+a.id+"', this, 'Y');\" onclick=\"DP_jQuery_"+y

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(j+='<select class="ui-datepicker-year" onchange="DP_jQuery_'+y+".datepicker._selectMonthYear('#"+ ---> a <--- .id+"', this, 'Y');\" onclick=\"DP_jQuery_"+y+".datepicker._clickMonthYear('#"+a

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
+".datepicker._selectMonthYear('#"+a.id+"', this, 'Y');\" onclick=\"DP_jQuery_"+ ---> y <--- +".datepicker._clickMonthYear('#"+a.id+"');\">";b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.id+"', this, 'Y');\" onclick=\"DP_jQuery_"+y+".datepicker._clickMonthYear('#"+ ---> a <--- .id+"');\">";b<=g;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+".datepicker._clickMonthYear('#"+a.id+"');\">"; ---> b <--- <=g;b++){j+='<option value="'

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
+a.id+"');\">";b<= ---> g <--- ;b++){j+='<option value="'+b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.id+"');\">";b<=g; ---> b <--- ++){j+='<option value="'+b+'"'

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;b<=g;b++){ ---> j <--- +='<option value="'+b+'"'+(b==

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b++){j+='<option value="'+ ---> b <--- +'"'+(b==c?' selected="selected"':

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
j+='<option value="'+b+'"'+( ---> b <--- ==c?' selected="selected"':"")+">"+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
'<option value="'+b+'"'+(b== ---> c <--- ?' selected="selected"':"")+">"+b+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c?' selected="selected"':"")+">"+ ---> b <--- +"</option>";}j+="</select>";}j

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
)+">"+b+"</option>";} ---> j <--- +="</select>";}j+=this._get(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
+"</option>";}j+="</select>";} ---> j <--- +=this._get(a,"yearSuffix");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"</select>";}j+=this._get( ---> a <--- ,"yearSuffix");if(u){j

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"yearSuffix");if( ---> u <--- ){j+=(h||!(k

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
,"yearSuffix");if(u){ ---> j <--- +=(h||!(k&&l)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(u){j+=( ---> h <--- ||!(k&&l)?"&#xa0;":

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
){j+=(h||!( ---> k <--- &&l)?"&#xa0;":"")+o

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
j+=(h||!(k&& ---> l <--- )?"&#xa0;":"")+o;}

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
&&l)?"&#xa0;":"")+ ---> o <--- ;}j+="</div>";returnj;}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
?"&#xa0;":"")+o;} ---> j <--- +="</div>";returnj;},_adjustInstDate:

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
+o;}j+="</div>";return ---> j <--- ;},_adjustInstDate:function(a,b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,b,c){var  ---> e <--- =a.drawYear+(c=="Y"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,c){var e= ---> a <--- .drawYear+(c=="Y"?b:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{var e=a.drawYear+( ---> c <--- =="Y"?b:0),f=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.drawYear+(c=="Y"? ---> b <--- :0),f=a.drawMonth+

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="Y"?b:0), ---> f <--- =a.drawMonth+(c=="M"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"Y"?b:0),f= ---> a <--- .drawMonth+(c=="M"?b:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
),f=a.drawMonth+( ---> c <--- =="M"?b:0);b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.drawMonth+(c=="M"? ---> b <--- :0);b=Math.min(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="M"?b:0); ---> b <--- =Math.min(a.selectedDay,this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0);b=Math.min( ---> a <--- .selectedDay,this._getDaysInMonth(e,f

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.selectedDay,this._getDaysInMonth( ---> e <--- ,f))+(c=="D"?

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedDay,this._getDaysInMonth(e, ---> f <--- ))+(c=="D"?b:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_getDaysInMonth(e,f))+( ---> c <--- =="D"?b:0);e=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
f))+(c=="D"? ---> b <--- :0);e=this._restrictMinMax(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="D"?b:0); ---> e <--- =this._restrictMinMax(a,this._daylightSavingAdjust

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0);e=this._restrictMinMax( ---> a <--- ,this._daylightSavingAdjust(new Date(e,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a,this._daylightSavingAdjust(new Date( ---> e <--- ,f,b)));a.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(e, ---> f <--- ,b)));a.selectedDay=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_daylightSavingAdjust(new Date(e,f, ---> b <--- )));a.selectedDay=e.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e,f,b))); ---> a <--- .selectedDay=e.getDate();a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b)));a.selectedDay= ---> e <--- .getDate();a.drawMonth=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedDay=e.getDate(); ---> a <--- .drawMonth=a.selectedMonth=e.getMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate();a.drawMonth= ---> a <--- .selectedMonth=e.getMonth();a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.drawMonth=a.selectedMonth= ---> e <--- .getMonth();a.drawYear=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedMonth=e.getMonth(); ---> a <--- .drawYear=a.selectedYear=e.getFullYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth();a.drawYear= ---> a <--- .selectedYear=e.getFullYear();if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.drawYear=a.selectedYear= ---> e <--- .getFullYear();if(c=="M"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.getFullYear();if( ---> c <--- =="M"||c=="Y"){this.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
();if(c=="M"|| ---> c <--- =="Y"){this._notifyChange(a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="Y"){this._notifyChange( ---> a <--- );}},_restrictMinMax:function(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =this._getMinMaxDate(a,"min");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this._getMinMaxDate( ---> a <--- ,"min");a=this._getMinMaxDate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getMinMaxDate(a,"min"); ---> a <--- =this._getMinMaxDate(a,"max");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"min");a=this._getMinMaxDate( ---> a <--- ,"max");b=c&&b<

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getMinMaxDate(a,"max"); ---> b <--- =c&&b<c?c:b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
_getMinMaxDate(a,"max");b= ---> c <--- &&b<c?c:b;return

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,"max");b=c&& ---> b <--- <c?c:b;returnb=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"max");b=c&&b< ---> c <--- ?c:b;returnb=a&&

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b=c&&b<c? ---> c <--- :b;returnb=a&&b>

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=c&&b<c?c: ---> b <--- ;returnb=a&&b>a?

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b<c?c:b;return ---> b <--- =a&&b>a?a:b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c?c:b;returnb= ---> a <--- &&b>a?a:b;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c:b;returnb=a&& ---> b <--- >a?a:b;},_notifyChange

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b;returnb=a&&b> ---> a <--- ?a:b;},_notifyChange:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb=a&&b>a? ---> a <--- :b;},_notifyChange:function(a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a&&b>a?a: ---> b <--- ;},_notifyChange:function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_notifyChange:function(a){var  ---> b <--- =this._get(a,"onChangeMonthYear");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this._get( ---> a <--- ,"onChangeMonthYear");if(b){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_get(a,"onChangeMonthYear");if( ---> b <--- ){b.apply(a.input?

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,"onChangeMonthYear");if(b){ ---> b <--- .apply(a.input?a.input

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
if(b){b.apply( ---> a <--- .input?a.input[0]:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b.apply(a.input? ---> a <--- .input[0]:null,[a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.input[0]:null,[ ---> a <--- .selectedYear,a.selectedMonth+1,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]:null,[a.selectedYear, ---> a <--- .selectedMonth+1,a]);}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedYear,a.selectedMonth+1, ---> a <--- ]);}},_getNumberOfMonths:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_getNumberOfMonths:function(a){ ---> a <--- =this._get(a,"numberOfMonths");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){a=this._get( ---> a <--- ,"numberOfMonths");returna==null?[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._get(a,"numberOfMonths");return ---> a <--- ==null?[1,1]:typeof

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
null?[1,1]:typeof ---> a <--- =="number"?[1,a]:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:typeofa=="number"?[1, ---> a <--- ]:a;},_getMinMaxDate:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=="number"?[1,a]: ---> a <--- ;},_getMinMaxDate:function(a,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){returnthis._determineDate( ---> a <--- ,this._get(a,b+"Date"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
._determineDate(a,this._get( ---> a <--- ,b+"Date"),null);}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,this._get(a, ---> b <--- +"Date"),null);},_getDaysInMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){return32-(new Date( ---> a <--- ,b,32)).getDate()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
return32-(new Date(a, ---> b <--- ,32)).getDate();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b){return(new Date( ---> a <--- ,b,1)).getDay()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){return(new Date(a, ---> b <--- ,1)).getDay();}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,c,e){var  ---> f <--- =this._getNumberOfMonths(a);c=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var f=this._getNumberOfMonths( ---> a <--- );c=this._daylightSavingAdjust(new Date

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f=this._getNumberOfMonths(a); ---> c <--- =this._daylightSavingAdjust(new Date(c,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=this._daylightSavingAdjust(new Date( ---> c <--- ,e+(b<0?b:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(c, ---> e <--- +(b<0?b:f[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(new Date(c,e+( ---> b <--- <0?b:f[0]*

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c,e+(b<0? ---> b <--- :f[0]*f[1]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e+(b<0?b: ---> f <--- [0]*f[1]),

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0?b:f[0]* ---> f <--- [1]),1));b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[1]),1)); ---> b <--- <0&&c.setDate(this._getDaysInMonth

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,1));b<0&& ---> c <--- .setDate(this._getDaysInMonth(c.getFullYear

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.setDate(this._getDaysInMonth( ---> c <--- .getFullYear(),c.getMonth()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
._getDaysInMonth(c.getFullYear(), ---> c <--- .getMonth()));returnthis.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)));returnthis._isInRange( ---> a <--- ,c);},_isInRange:function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);returnthis._isInRange(a, ---> c <--- );},_isInRange:function(a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(a,b){var  ---> c <--- =this._getMinMaxDate(a,"min");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var c=this._getMinMaxDate( ---> a <--- ,"min");a=this._getMinMaxDate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this._getMinMaxDate(a,"min"); ---> a <--- =this._getMinMaxDate(a,"max");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"min");a=this._getMinMaxDate( ---> a <--- ,"max");return(!c||b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,"max");return(! ---> c <--- ||b.getTime()>=c.getTime

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,"max");return(!c|| ---> b <--- .getTime()>=c.getTime()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
!c||b.getTime()>= ---> c <--- .getTime())&&(!a||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.getTime())&&(! ---> a <--- ||b.getTime()<=a.getTime

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime())&&(!a|| ---> b <--- .getTime()<=a.getTime()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!a||b.getTime()<= ---> a <--- .getTime());},_getFormatConfig:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,_getFormatConfig:function(a){var  ---> b <--- =this._get(a,"shortYearCutoff");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b=this._get( ---> a <--- ,"shortYearCutoff");b=typeofb!="string"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"shortYearCutoff"); ---> b <--- =typeofb!="string"?b:(new 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a,"shortYearCutoff");b=typeof ---> b <--- !="string"?b:(new Date).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);b=typeofb!="string"? ---> b <--- :(new Date).getFullYear()%

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.getFullYear()%100+parseInt( ---> b <--- ,10);return{shortYearCutoff:b,

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b,10);return{shortYearCutoff: ---> b <--- ,dayNamesShort:this._get(a,"dayNamesShort"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:b,dayNamesShort:this._get( ---> a <--- ,"dayNamesShort"),dayNames:this._get(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"dayNamesShort"),dayNames:this._get( ---> a <--- ,"dayNames"),monthNamesShort:this._get(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"dayNames"),monthNamesShort:this._get( ---> a <--- ,"monthNamesShort"),monthNames:this._get(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"monthNamesShort"),monthNames:this._get( ---> a <--- ,"monthNames")};},_formatDate:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,c,e){if(! ---> b <--- ){a.currentDay=a.selectedDay;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e){if(!b){ ---> a <--- .currentDay=a.selectedDay;a.currentMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(!b){a.currentDay= ---> a <--- .selectedDay;a.currentMonth=a.selectedMonth

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.currentDay=a.selectedDay; ---> a <--- .currentMonth=a.selectedMonth;a.currentYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.selectedDay;a.currentMonth= ---> a <--- .selectedMonth;a.currentYear=a.selectedYear

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.currentMonth=a.selectedMonth; ---> a <--- .currentYear=a.selectedYear;}b=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.selectedMonth;a.currentYear= ---> a <--- .selectedYear;}b=b?typeofb

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.currentYear=a.selectedYear;} ---> b <--- =b?typeofb=="object"?b:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
currentYear=a.selectedYear;}b= ---> b <--- ?typeofb=="object"?b:this.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.selectedYear;}b=b?typeof ---> b <--- =="object"?b:this._daylightSavingAdjust(new 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=b?typeofb=="object"? ---> b <--- :this._daylightSavingAdjust(new Date(e,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b:this._daylightSavingAdjust(new Date( ---> e <--- ,c,b)):this._daylightSavingAdjust

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this._daylightSavingAdjust(new Date(e, ---> c <--- ,b)):this._daylightSavingAdjust(new 

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
_daylightSavingAdjust(new Date(e,c, ---> b <--- )):this._daylightSavingAdjust(new Date(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
):this._daylightSavingAdjust(new Date( ---> a <--- .currentYear,a.currentMonth,a.currentDay

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
_daylightSavingAdjust(new Date(a.currentYear, ---> a <--- .currentMonth,a.currentDay));return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a.currentYear,a.currentMonth, ---> a <--- .currentDay));returnthis.formatDate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.formatDate(this._get( ---> a <--- ,"dateFormat"),b,this._getFormatConfig(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this._get(a,"dateFormat"), ---> b <--- ,this._getFormatConfig(a));}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"dateFormat"),b,this._getFormatConfig( ---> a <--- ));}});d.fn

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a));}}); ---> d <--- .fn.datepicker=function(a){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(a){if(! ---> d <--- .datepicker.initialized){d(document)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(!d.datepicker.initialized){ ---> d <--- (document).mousedown(d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){d(document).mousedown( ---> d <--- .datepicker._checkExternalClick).find("body")

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
).find("body").append( ---> d <--- .datepicker.dpDiv);d.datepicker.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
append(d.datepicker.dpDiv); ---> d <--- .datepicker.initialized=true;}var b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker.initialized=true;}var  ---> b <--- =Array.prototype.slice.call(arguments

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(arguments,1);if(typeof ---> a <--- =="string"&&(a=="isDisabled"||a==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(typeofa=="string"&&( ---> a <--- =="isDisabled"||a=="getDate"||a=="widget"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=="string"&&(a=="isDisabled"|| ---> a <--- =="getDate"||a=="widget")){return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a=="isDisabled"||a=="getDate"|| ---> a <--- =="widget")){returnd.datepicker[

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"getDate"||a=="widget")){return ---> d <--- .datepicker["_"+a+"Datepicker"].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd.datepicker["_"+ ---> a <--- +"Datepicker"].apply(d.datepicker,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"_"+a+"Datepicker"].apply( ---> d <--- .datepicker,[this[0]].

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[this[0]].concat( ---> b <--- ));}if(a=="option"&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
concat(b));}if( ---> a <--- =="option"&&arguments.length==2&&typeof

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
arguments[1]=="string"){return ---> d <--- .datepicker["_"+a+"Datepicker"].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd.datepicker["_"+ ---> a <--- +"Datepicker"].apply(d.datepicker,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"_"+a+"Datepicker"].apply( ---> d <--- .datepicker,[this[0]].

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[this[0]].concat( ---> b <--- ));}returnthis.each(function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(){typeof ---> a <--- =="string"?d.datepicker["_"+a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
function(){typeofa=="string"? ---> d <--- .datepicker["_"+a+"Datepicker"].

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=="string"?d.datepicker["_"+ ---> a <--- +"Datepicker"].apply(d.datepicker,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"_"+a+"Datepicker"].apply( ---> d <--- .datepicker,[this].concat(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.datepicker,[this].concat( ---> b <--- )):d.datepicker._attachDatepicker(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this].concat(b)): ---> d <--- .datepicker._attachDatepicker(this,a);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.datepicker._attachDatepicker(this, ---> a <--- );});};d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,a);});}; ---> d <--- .datepicker=new L;d.datepicker.

[WARNING] The symbol L is declared but is apparently never used.
This code can probably be written in a more compact way.
);};d.datepicker=new  ---> L <--- ;d.datepicker.initialized=false;d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
};d.datepicker=new L; ---> d <--- .datepicker.initialized=false;d.datepicker

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.datepicker.initialized=false; ---> d <--- .datepicker.uuid=(new Date).

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(new Date).getTime(); ---> d <--- .datepicker.version="1.8.5";window["DP_jQuery_"

[WARNING] The symbol y is declared but is apparently never used.
This code can probably be written in a more compact way.
.version="1.8.5";window["DP_jQuery_"+ ---> y <--- ]=d;})(jQuery);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"1.8.5";window["DP_jQuery_"+y]= ---> d <--- ;})(jQuery);(function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;(function(b,c){ ---> b <--- .widget("ui.progressbar",{options:{value

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
()});this.valueDiv= ---> b <--- ("<div class='ui-progressbar-value ui-widget-header ui-corner-left'></div>").appendTo(this.element)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.valueDiv.remove(); ---> b <--- .Widget.prototype.destroy.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
value:function(a){if( ---> a <--- ===c){returnthis._value()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a){if(a=== ---> c <--- ){returnthis._value();}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}this._setOption("value", ---> a <--- );returnthis;},_setOption:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(a,d){if( ---> a <--- ==="value"){this.options.value=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"value"){this.options.value= ---> d <--- ;this._refreshValue();this._trigger

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;this._trigger("change");} ---> b <--- .Widget.prototype._setOption.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_value:function(){var  ---> a <--- =this.options.value;if(typeof

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.options.value;if(typeof ---> a <--- !=="number"){a=0;}return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(typeofa!=="number"){ ---> a <--- =0;}returnMath.min(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,Math.max(this.min, ---> a <--- ));},_refreshValue:function()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},_refreshValue:function(){var  ---> a <--- =this.value();this.valueDiv

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.valueDiv.toggleClass("ui-corner-right", ---> a <--- ===this.max).width(a+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a===this.max).width( ---> a <--- +"%");this.element.attr(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.element.attr("aria-valuenow", ---> a <--- );}});b.extend(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"aria-valuenow",a);}}); ---> b <--- .extend(b.ui.progressbar,{

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});b.extend( ---> b <--- .ui.progressbar,{version:"1.8.5"}

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
||function(f,j){function ---> l <--- (c){var a;if(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){functionl(c){var  ---> a <--- ;if(c&&c.constructor==Array

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(c){var a;if( ---> c <--- &&c.constructor==Array&&c.length

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a;if(c&& ---> c <--- .constructor==Array&&c.length==3

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(c&&c.constructor==Array&& ---> c <--- .length==3){returnc;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.length==3){return ---> c <--- ;}if(a=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
3){returnc;}if( ---> a <--- =/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec(c)){return

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(a=/rgb\(\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*,\s*([0-9]{1,3})\s*\)/.exec( ---> c <--- )){return[parseInt(a[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)){return[parseInt( ---> a <--- [1],10),parseInt(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[1],10),parseInt( ---> a <--- [2],10),parseInt(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[2],10),parseInt( ---> a <--- [3],10)];}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
],10)];}if( ---> a <--- =/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec(c)){return

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(a=/rgb\(\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*,\s*([0-9]+(?:\.[0-9]+)?)\%\s*\)/.exec( ---> c <--- )){return[parseFloat(a[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)){return[parseFloat( ---> a <--- [1])*2.55,parseFloat(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[1])*2.55,parseFloat( ---> a <--- [2])*2.55,parseFloat(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[2])*2.55,parseFloat( ---> a <--- [3])*2.55];}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
])*2.55];}if( ---> a <--- =/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec(c)){return

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(a=/#([a-fA-F0-9]{2})([a-fA-F0-9]{2})([a-fA-F0-9]{2})/.exec( ---> c <--- )){return[parseInt(a[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)){return[parseInt( ---> a <--- [1],16),parseInt(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[1],16),parseInt( ---> a <--- [2],16),parseInt(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[2],16),parseInt( ---> a <--- [3],16)];}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
],16)];}if( ---> a <--- =/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec(c)){return

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(a=/#([a-fA-F0-9])([a-fA-F0-9])([a-fA-F0-9])/.exec( ---> c <--- )){return[parseInt(a[1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(c)){return[parseInt( ---> a <--- [1]+a[1],16

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
return[parseInt(a[1]+ ---> a <--- [1],16),parseInt(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[1],16),parseInt( ---> a <--- [2]+a[2],16

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
),parseInt(a[2]+ ---> a <--- [2],16),parseInt(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[2],16),parseInt( ---> a <--- [3]+a[3],16

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
),parseInt(a[3]+ ---> a <--- [3],16)];}if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
];}if(/rgba\(0, 0, 0, 0\)/.exec( ---> c <--- )){returnm.transparent;}return

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
/rgba\(0, 0, 0, 0\)/.exec(c)){return ---> m <--- .transparent;}returnm[f.trim

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnm.transparent;}return ---> m <--- [f.trim(c).toLowerCase(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
returnm.transparent;}returnm[ ---> f <--- .trim(c).toLowerCase()]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnm[f.trim( ---> c <--- ).toLowerCase()];}functionr

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
).toLowerCase()];}function ---> r <--- (c,a){var b;do

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
functionr(c,a){var  ---> b <--- ;do{b=f.curCSS(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a){var b;do{ ---> b <--- =f.curCSS(c,a);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){var b;do{b= ---> f <--- .curCSS(c,a);if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;do{b=f.curCSS( ---> c <--- ,a);if(b!=""&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=f.curCSS(c, ---> a <--- );if(b!=""&&b!=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
curCSS(c,a);if( ---> b <--- !=""&&b!="transparent"||f.nodeName

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a);if(b!=""&& ---> b <--- !="transparent"||f.nodeName(c,"body"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(b!=""&&b!="transparent"|| ---> f <--- .nodeName(c,"body")){break

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
&&b!="transparent"||f.nodeName( ---> c <--- ,"body")){break;}a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c,"body")){break;} ---> a <--- ="backgroundColor";}while(c=c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}a="backgroundColor";}while( ---> c <--- =c.parentNode);returnl(b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a="backgroundColor";}while(c= ---> c <--- .parentNode);returnl(b);

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
(c=c.parentNode);return ---> l <--- (b);}functionn(){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.parentNode);returnl( ---> b <--- );}functionn(){var c

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
;returnl(b);}function ---> n <--- (){var c=document.defaultView?

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);}functionn(){var  ---> c <--- =document.defaultView?document.defaultView.getComputedStyle

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,null):this.currentStyle, ---> a <--- ={},b,d;if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.currentStyle,a={}, ---> b <--- ,d;if(c&&c.length

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
currentStyle,a={},b, ---> d <--- ;if(c&&c.length&&c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{},b,d;if( ---> c <--- &&c.length&&c[0]&&

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d;if(c&& ---> c <--- .length&&c[0]&&c[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(c&&c.length&& ---> c <--- [0]&&c[c[0]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.length&&c[0]&& ---> c <--- [c[0]]){for(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
length&&c[0]&&c[ ---> c <--- [0]]){for(var e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]]){for(var  ---> e <--- =c.length;e--;){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]]){for(var e= ---> c <--- .length;e--;){b=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var e=c.length; ---> e <--- --;){b=c[e]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.length;e--;){ ---> b <--- =c[e];if(typeofc

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
length;e--;){b= ---> c <--- [e];if(typeofc[b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e--;){b=c[ ---> e <--- ];if(typeofc[b]==

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=c[e];if(typeof ---> c <--- [b]=="string"){d=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[e];if(typeofc[ ---> b <--- ]=="string"){d=b.replace

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofc[b]=="string"){ ---> d <--- =b.replace(/\-(\w)/g,function(g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[b]=="string"){d= ---> b <--- .replace(/\-(\w)/g,function(g,h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(g,h){return ---> h <--- .toUpperCase();});a[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h.toUpperCase();}); ---> a <--- [d]=c[b];}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
toUpperCase();});a[ ---> d <--- ]=c[b];}}}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;});a[d]= ---> c <--- [b];}}}else{for

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);a[d]=c[ ---> b <--- ];}}}else{for(b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
];}}}else{for( ---> b <---  in c){if(typeofc[b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}else{for(b in  ---> c <--- ){if(typeofc[b]===

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(b in c){if(typeof ---> c <--- [b]==="string"){a[b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
 in c){if(typeofc[ ---> b <--- ]==="string"){a[b]=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofc[b]==="string"){ ---> a <--- [b]=c[b];}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[b]==="string"){a[ ---> b <--- ]=c[b];}}}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
==="string"){a[b]= ---> c <--- [b];}}}returna;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){a[b]=c[ ---> b <--- ];}}}returna;}function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c[b];}}}return ---> a <--- ;}functiono(c){var a

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}}returna;}function ---> o <--- (c){var a,b;for

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}functiono(c){var  ---> a <--- ,b;for(a in c){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
functiono(c){var a, ---> b <--- ;for(a in c){b=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a,b;for( ---> a <---  in c){b=c[a]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
var a,b;for(a in  ---> c <--- ){b=c[a];if

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b;for(a in c){ ---> b <--- =c[a];if(b==

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
for(a in c){b= ---> c <--- [a];if(b==null||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a in c){b=c[ ---> a <--- ];if(b==null||f.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=c[a];if( ---> b <--- ==null||f.isFunction(b)||

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
a];if(b==null|| ---> f <--- .isFunction(b)||a in s||

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b==null||f.isFunction( ---> b <--- )||a in s||/scrollbar/.test(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
null||f.isFunction(b)|| ---> a <---  in s||/scrollbar/.test(a)||

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
f.isFunction(b)||a in  ---> s <--- ||/scrollbar/.test(a)||!/color/i

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||a in s||/scrollbar/.test( ---> a <--- )||!/color/i.test(a)&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a)||!/color/i.test( ---> a <--- )&&isNaN(parseFloat(b)))

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
test(a)&&isNaN(parseFloat( ---> b <--- ))){delete c[a];

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(parseFloat(b))){delete  ---> c <--- [a];}}returnc;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(b))){delete c[ ---> a <--- ];}}returnc;}functiont

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
delete c[a];}}return ---> c <--- ;}functiont(c,a){

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
];}}returnc;}function ---> t <--- (c,a){var b={

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
functiont(c,a){var  ---> b <--- ={_:0},d;for

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
var b={_:0}, ---> d <--- ;for(d in a){if(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
_:0},d;for( ---> d <---  in a){if(c[d]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0},d;for(d in  ---> a <--- ){if(c[d]!=a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
for(d in a){if( ---> c <--- [d]!=a[d]){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d in a){if(c[ ---> d <--- ]!=a[d]){b[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(c[d]!= ---> a <--- [d]){b[d]=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
if(c[d]!=a[ ---> d <--- ]){b[d]=a[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d]!=a[d]){ ---> b <--- [d]=a[d];}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
!=a[d]){b[ ---> d <--- ]=a[d];}}return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d]){b[d]= ---> a <--- [d];}}returnb;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){b[d]=a[ ---> d <--- ];}}returnb;}functionk

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=a[d];}}return ---> b <--- ;}functionk(c,a,b

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
];}}returnb;}function ---> k <--- (c,a,b,d){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d){if(typeof ---> c <--- =="object"){d=a;b=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(typeofc=="object"){ ---> d <--- =a;b=null;a=c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofc=="object"){d= ---> a <--- ;b=null;a=c;c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="object"){d=a; ---> b <--- =null;a=c;c=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{d=a;b=null; ---> a <--- =c;c=a.effect;}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=a;b=null;a= ---> c <--- ;c=a.effect;}if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;b=null;a=c; ---> c <--- =a.effect;}if(f.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=null;a=c;c= ---> a <--- .effect;}if(f.isFunction(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c=a.effect;}if( ---> f <--- .isFunction(a)){d=a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effect;}if(f.isFunction( ---> a <--- )){d=a;b=null

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.isFunction(a)){ ---> d <--- =a;b=null;a={

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.isFunction(a)){d= ---> a <--- ;b=null;a={};

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a)){d=a; ---> b <--- =null;a={};}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{d=a;b=null; ---> a <--- ={};}if(typeofa==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a={};}if(typeof ---> a <--- =="number"||f.fx.speeds[a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(typeofa=="number"|| ---> f <--- .fx.speeds[a]){d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=="number"||f.fx.speeds[ ---> a <--- ]){d=b;b=a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.fx.speeds[a]){ ---> d <--- =b;b=a;a={

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.speeds[a]){d= ---> b <--- ;b=a;a={};

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[a]){d=b; ---> b <--- =a;a={};}if

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]){d=b;b= ---> a <--- ;a={};}if(f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{d=b;b=a; ---> a <--- ={};}if(f.isFunction

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;a={};}if( ---> f <--- .isFunction(b)){d=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
};}if(f.isFunction( ---> b <--- )){d=b;b=null

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.isFunction(b)){ ---> d <--- =b;b=null;}a=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.isFunction(b)){d= ---> b <--- ;b=null;}a=a||

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b)){d=b; ---> b <--- =null;}a=a||{}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d=b;b=null;} ---> a <--- =a||{};b=b||

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b;b=null;}a= ---> a <--- ||{};b=b||a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;}a=a||{}; ---> b <--- =b||a.duration;b=f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a=a||{};b= ---> b <--- ||a.duration;b=f.fx

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a||{};b=b|| ---> a <--- .duration;b=f.fx.off

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;b=b||a.duration; ---> b <--- =f.fx.off?0:typeof

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=b||a.duration;b= ---> f <--- .fx.off?0:typeofb==

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
f.fx.off?0:typeof ---> b <--- =="number"?b:f.fx.speeds

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
off?0:typeofb=="number"? ---> b <--- :f.fx.speeds[b]||

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0:typeofb=="number"?b: ---> f <--- .fx.speeds[b]||f.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?b:f.fx.speeds[ ---> b <--- ]||f.fx.speeds._default;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f.fx.speeds[b]|| ---> f <--- .fx.speeds._default;d=d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
||f.fx.speeds._default; ---> d <--- =d||a.complete;return[c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.fx.speeds._default;d= ---> d <--- ||a.complete;return[c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.speeds._default;d=d|| ---> a <--- .complete;return[c,a,b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=d||a.complete;return[ ---> c <--- ,a,b,d];}f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||a.complete;return[c, ---> a <--- ,b,d];}f.effects

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.complete;return[c,a, ---> b <--- ,d];}f.effects={

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;return[c,a,b, ---> d <--- ];}f.effects={};

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,a,b,d];} ---> f <--- .effects={};f.each(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;}f.effects={}; ---> f <--- .each(["backgroundColor","borderBottomColor","borderLeftColor",

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
],function(c,a){ ---> f <--- .fx.step[a]=function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a){f.fx.step[ ---> a <--- ]=function(b){if(!

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(b){if(! ---> b <--- .colorInit){b.start=r(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(!b.colorInit){ ---> b <--- .start=r(b.elem,a

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
b.colorInit){b.start= ---> r <--- (b.elem,a);b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
colorInit){b.start=r( ---> b <--- .elem,a);b.end=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.start=r(b.elem, ---> a <--- );b.end=l(b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
r(b.elem,a); ---> b <--- .end=l(b.end);

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
elem,a);b.end= ---> l <--- (b.end);b.colorInit=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a);b.end=l( ---> b <--- .end);b.colorInit=true;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
end=l(b.end); ---> b <--- .colorInit=true;}b.elem.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);b.colorInit=true;} ---> b <--- .elem.style[a]="rgb("+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
true;}b.elem.style[ ---> a <--- ]="rgb("+Math.max(Math.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.max(Math.min(parseInt( ---> b <--- .pos*(b.end[0]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
min(parseInt(b.pos*( ---> b <--- .end[0]-b.start[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*(b.end[0]- ---> b <--- .start[0])+b.start

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-b.start[0])+ ---> b <--- .start[0],10),255

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.max(Math.min(parseInt( ---> b <--- .pos*(b.end[1]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
min(parseInt(b.pos*( ---> b <--- .end[1]-b.start[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*(b.end[1]- ---> b <--- .start[1])+b.start

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-b.start[1])+ ---> b <--- .start[1],10),255

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.max(Math.min(parseInt( ---> b <--- .pos*(b.end[2]

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
min(parseInt(b.pos*( ---> b <--- .end[2]-b.start[

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*(b.end[2]- ---> b <--- .start[2])+b.start

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-b.start[2])+ ---> b <--- .start[2],10),255

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
+")";};});var  ---> m <--- ={aqua:[0,255,255

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
[255,255,255]}, ---> p <--- =["add","remove","toggle"],s

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
=["add","remove","toggle"], ---> s <--- ={border:1,borderBottom:1,

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
margin:1,padding:1}; ---> f <--- .effects.animateClass=function(c,a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,d){if( ---> f <--- .isFunction(b)){d=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d){if(f.isFunction( ---> b <--- )){d=b;b=null

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(f.isFunction(b)){ ---> d <--- =b;b=null;}returnthis

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.isFunction(b)){d= ---> b <--- ;b=null;}returnthis.each

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b)){d=b; ---> b <--- =null;}returnthis.each(function

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(){var  ---> e <--- =f(this),g=e.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
each(function(){var e= ---> f <--- (this),g=e.attr(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{var e=f(this), ---> g <--- =e.attr("style")||" ",

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e=f(this),g= ---> e <--- .attr("style")||" ",h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
e.attr("style")||" ", ---> h <--- =o(n.call(this))

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
attr("style")||" ",h= ---> o <--- (n.call(this)),q

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
"style")||" ",h=o( ---> n <--- .call(this)),q,u

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
(n.call(this)), ---> q <--- ,u=e.attr("className");

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
.call(this)),q, ---> u <--- =e.attr("className");f.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(this)),q,u= ---> e <--- .attr("className");f.each(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
u=e.attr("className"); ---> f <--- .each(p,function(v,i

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
attr("className");f.each( ---> p <--- ,function(v,i){c[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
p,function(v,i){ ---> c <--- [i]&&e[i+"Class"]

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(v,i){c[ ---> i <--- ]&&e[i+"Class"](c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,i){c[i]&& ---> e <--- [i+"Class"](c[i]

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
){c[i]&&e[ ---> i <--- +"Class"](c[i]);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]&&e[i+"Class"]( ---> c <--- [i]);});q=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
e[i+"Class"](c[ ---> i <--- ]);});q=o(

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
c[i]);}); ---> q <--- =o(n.call(this))

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
i]);});q= ---> o <--- (n.call(this));e

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
);});q=o( ---> n <--- .call(this));e.attr

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(n.call(this)); ---> e <--- .attr("className",u);e.

[WARNING] The symbol u is declared but is apparently never used.
This code can probably be written in a more compact way.
));e.attr("className", ---> u <--- );e.animate(t(h,

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e.attr("className",u); ---> e <--- .animate(t(h,q),

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
"className",u);e.animate( ---> t <--- (h,q),a,b,

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
u);e.animate(t( ---> h <--- ,q),a,b,function(

[WARNING] The symbol q is declared but is apparently never used.
This code can probably be written in a more compact way.
;e.animate(t(h, ---> q <--- ),a,b,function(){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
animate(t(h,q), ---> a <--- ,b,function(){f.each

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
t(h,q),a, ---> b <--- ,function(){f.each(p

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,a,b,function(){ ---> f <--- .each(p,function(v,i

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){f.each( ---> p <--- ,function(v,i){c[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
p,function(v,i){ ---> c <--- [i]&&e[i+"Class"]

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
function(v,i){c[ ---> i <--- ]&&e[i+"Class"](c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,i){c[i]&& ---> e <--- [i+"Class"](c[i]

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
){c[i]&&e[ ---> i <--- +"Class"](c[i]);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]&&e[i+"Class"]( ---> c <--- [i]);});if(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
e[i+"Class"](c[ ---> i <--- ]);});if(typeofe

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]);});if(typeof ---> e <--- .attr("style")=="object"){e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("style")=="object"){ ---> e <--- .attr("style").cssText="";

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
attr("style").cssText=""; ---> e <--- .attr("style").cssText=g;

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e.attr("style").cssText= ---> g <--- ;}else{e.attr("style",

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
).cssText=g;}else{ ---> e <--- .attr("style",g);}d

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{e.attr("style", ---> g <--- );}d&&d.apply(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.attr("style",g);} ---> d <--- &&d.apply(this,arguments);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
("style",g);}d&& ---> d <--- .apply(this,arguments);})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;});});}; ---> f <--- .fn.extend({_addClass:f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
f.fn.extend({_addClass: ---> f <--- .fn.addClass,addClass:function(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,a,b,d){return ---> a <--- ?f.effects.animateClass.apply(this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d){returna? ---> f <--- .effects.animateClass.apply(this,[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.apply(this,[{add: ---> c <--- },a,b,d]):

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,[{add:c}, ---> a <--- ,b,d]):this._addClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[{add:c},a, ---> b <--- ,d]):this._addClass(c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
add:c},a,b, ---> d <--- ]):this._addClass(c);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,d]):this._addClass( ---> c <--- );},_removeClass:f.fn.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
_addClass(c);},_removeClass: ---> f <--- .fn.removeClass,removeClass:function(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,a,b,d){return ---> a <--- ?f.effects.animateClass.apply(this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d){returna? ---> f <--- .effects.animateClass.apply(this,[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.apply(this,[{remove: ---> c <--- },a,b,d]):

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,[{remove:c}, ---> a <--- ,b,d]):this._removeClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[{remove:c},a, ---> b <--- ,d]):this._removeClass(c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
remove:c},a,b, ---> d <--- ]):this._removeClass(c);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,d]):this._removeClass( ---> c <--- );},_toggleClass:f.fn.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
_removeClass(c);},_toggleClass: ---> f <--- .fn.toggleClass,toggleClass:function(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){returntypeof ---> a <--- =="boolean"||a===j?b?f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e){returntypeofa=="boolean"|| ---> a <--- ===j?b?f.effects.animateClass

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
{returntypeofa=="boolean"||a=== ---> j <--- ?b?f.effects.animateClass.apply

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofa=="boolean"||a===j? ---> b <--- ?f.effects.animateClass.apply(this

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=="boolean"||a===j?b? ---> f <--- .effects.animateClass.apply(this,[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.animateClass.apply(this,[ ---> a <--- ?{add:c}:{remove:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,[a?{add: ---> c <--- }:{remove:c},b,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{add:c}:{remove: ---> c <--- },b,d,e]):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c}:{remove:c}, ---> b <--- ,d,e]):this._toggleClass

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:{remove:c},b, ---> d <--- ,e]):this._toggleClass(c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
remove:c},b,d, ---> e <--- ]):this._toggleClass(c,a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,e]):this._toggleClass( ---> c <--- ,a):f.effects.animateClass.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
]):this._toggleClass(c, ---> a <--- ):f.effects.animateClass.apply(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
this._toggleClass(c,a): ---> f <--- .effects.animateClass.apply(this,[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.apply(this,[{toggle: ---> c <--- },a,b,d]);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,[{toggle:c}, ---> a <--- ,b,d]);},switchClass

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[{toggle:c},a, ---> b <--- ,d]);},switchClass:function

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
toggle:c},a,b, ---> d <--- ]);},switchClass:function(c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> f <--- .effects.animateClass.apply(this,[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.apply(this,[{add: ---> a <--- ,remove:c},b,d,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,[{add:a,remove: ---> c <--- },b,d,e]);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
add:a,remove:c}, ---> b <--- ,d,e]);}})

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a,remove:c},b, ---> d <--- ,e]);}});f

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
remove:c},b,d, ---> e <--- ]);}});f.extend

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,e]);}}); ---> f <--- .extend(f.effects,{version:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});f.extend( ---> f <--- .effects,{version:"1.8.5",save:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,a){for(var  ---> b <--- =0;b<a.length;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var b=0; ---> b <--- <a.length;b++){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var b=0;b< ---> a <--- .length;b++){a[b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;b<a.length; ---> b <--- ++){a[b]!==null&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<a.length;b++){ ---> a <--- [b]!==null&&c.data(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;b++){a[ ---> b <--- ]!==null&&c.data("ec.storage."+

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){a[b]!==null&& ---> c <--- .data("ec.storage."+a[b],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!==null&&c.data("ec.storage."+ ---> a <--- [b],c[0].style

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.data("ec.storage."+a[ ---> b <--- ],c[0].style[a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
data("ec.storage."+a[b], ---> c <--- [0].style[a[b]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
],c[0].style[ ---> a <--- [b]]);}},restore

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c[0].style[a[ ---> b <--- ]]);}},restore:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,a){for(var  ---> b <--- =0;b<a.length;b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var b=0; ---> b <--- <a.length;b++){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var b=0;b< ---> a <--- .length;b++){a[b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;b<a.length; ---> b <--- ++){a[b]!==null&&

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<a.length;b++){ ---> a <--- [b]!==null&&c.css(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;b++){a[ ---> b <--- ]!==null&&c.css(a[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){a[b]!==null&& ---> c <--- .css(a[b],c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b]!==null&&c.css( ---> a <--- [b],c.data("ec.storage."+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
!==null&&c.css(a[ ---> b <--- ],c.data("ec.storage."+a[

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.css(a[b], ---> c <--- .data("ec.storage."+a[b])

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b],c.data("ec.storage."+ ---> a <--- [b]));}},setMode

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,c.data("ec.storage."+a[ ---> b <--- ]));}},setMode:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(c,a){if( ---> a <--- =="toggle"){a=c.is(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(a=="toggle"){ ---> a <--- =c.is(":hidden")?"show":

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
if(a=="toggle"){a= ---> c <--- .is(":hidden")?"show":"hide";

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
":hidden")?"show":"hide";}return ---> a <--- ;},getBaseline:function(c,a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(c,a){var  ---> b <--- ;switch(c[0]){case

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,a){var b;switch( ---> c <--- [0]){case"top":b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c[0]){case"top": ---> b <--- =0;break;case"middle":b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=0;break;case"middle": ---> b <--- =0.5;break;case"bottom":b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b=0.5;break;case"bottom": ---> b <--- =1;break;default:b=c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:b=1;break;default: ---> b <--- =c[0]/a.height;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;break;default:b= ---> c <--- [0]/a.height;}switch

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
default:b=c[0]/ ---> a <--- .height;}switch(c[1]

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
]/a.height;}switch( ---> c <--- [1]){case"left":c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c[1]){case"left": ---> c <--- =0;break;case"center":c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=0;break;case"center": ---> c <--- =0.5;break;case"right":c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=0.5;break;case"right": ---> c <--- =1;break;default:c=c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:c=1;break;default: ---> c <--- =c[1]/a.width;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;break;default:c= ---> c <--- [1]/a.width;}return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
default:c=c[1]/ ---> a <--- .width;}return{x:c,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.width;}return{x: ---> c <--- ,y:b};},createWrapper:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}return{x:c,y: ---> b <--- };},createWrapper:function(c)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
createWrapper:function(c){if( ---> c <--- .parent().is(".ui-effects-wrapper"))

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).is(".ui-effects-wrapper")){return ---> c <--- .parent();}var a={

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnc.parent();}var  ---> a <--- ={width:c.outerWidth(true)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);}var a={width: ---> c <--- .outerWidth(true),height:c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.outerWidth(true),height: ---> c <--- .outerHeight(true),"float":c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.outerHeight(true),"float": ---> c <--- .css("float")},b=f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.css("float")}, ---> b <--- =f("<div></div>").addClass("ui-effects-wrapper")

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("float")},b= ---> f <--- ("<div></div>").addClass("ui-effects-wrapper").css

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,padding:0}); ---> c <--- .wrap(b);b=c.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:0});c.wrap( ---> b <--- );b=c.parent();

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);c.wrap(b); ---> b <--- =c.parent();if(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.wrap(b);b= ---> c <--- .parent();if(c.css

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.parent();if( ---> c <--- .css("position")=="static"){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("position")=="static"){ ---> b <--- .css({position:"relative"});

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css({position:"relative"}); ---> c <--- .css({position:"relative"});

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
position:"relative"});}else{ ---> f <--- .extend(a,{position:c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{f.extend( ---> a <--- ,{position:c.css("position")

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f.extend(a,{position: ---> c <--- .css("position"),zIndex:c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c.css("position"),zIndex: ---> c <--- .css("z-index")});f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c.css("z-index")}); ---> f <--- .each(["top","left","bottom",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
],function(d,e){ ---> a <--- [e]=c.css(e)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(d,e){a[ ---> e <--- ]=c.css(e);if

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){a[e]= ---> c <--- .css(e);if(isNaN(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a[e]=c.css( ---> e <--- );if(isNaN(parseInt(a[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e);if(isNaN(parseInt( ---> a <--- [e],10))){a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(isNaN(parseInt(a[ ---> e <--- ],10))){a[e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
[e],10))){ ---> a <--- [e]="auto";}});

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
],10))){a[ ---> e <--- ]="auto";}});c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
e]="auto";}}); ---> c <--- .css({position:"relative",top:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:0});}return ---> b <--- .css(a).show();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
});}returnb.css( ---> a <--- ).show();},removeWrapper:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper:function(c){if( ---> c <--- .parent().is(".ui-effects-wrapper"))

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).is(".ui-effects-wrapper")){return ---> c <--- .parent().replaceWith(c);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnc.parent().replaceWith( ---> c <--- );}returnc;},setTransition:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
).replaceWith(c);}return ---> c <--- ;},setTransition:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c,a,b,d){ ---> d <--- =d||{};f.each(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,d){d= ---> d <--- ||{};f.each(a,

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){d=d||{}; ---> f <--- .each(a,function(e,g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d||{};f.each( ---> a <--- ,function(e,g){unit=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e,g){unit= ---> c <--- .cssUnit(g);if(unit[

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g){unit=c.cssUnit( ---> g <--- );if(unit[0]>0

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(unit[0]>0){ ---> d <--- [g]=unit[0]*b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]>0){d[ ---> g <--- ]=unit[0]*b+unit

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[g]=unit[0]* ---> b <--- +unit[1];}});

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
[1];}});return ---> d <--- ;}});f.fn.extend

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);returnd;}}); ---> f <--- .fn.extend({effect:function(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{effect:function(c){var  ---> a <--- =k.apply(this,arguments);

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(c){var a= ---> k <--- .apply(this,arguments);a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
k.apply(this,arguments); ---> a <--- ={options:a[1],duration

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,arguments);a={options: ---> a <--- [1],duration:a[2]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options:a[1],duration: ---> a <--- [2],callback:a[3]

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
duration:a[2],callback: ---> a <--- [3]};var b=f.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
callback:a[3]};var  ---> b <--- =f.effects[c];returnb

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
a[3]};var b= ---> f <--- .effects[c];returnb&&!

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
};var b=f.effects[ ---> c <--- ];returnb&&!f.fx.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=f.effects[c];return ---> b <--- &&!f.fx.off?b.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
effects[c];returnb&&! ---> f <--- .fx.off?b.call(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b&&!f.fx.off? ---> b <--- .call(this,a):this;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.off?b.call(this, ---> a <--- ):this;},_show:f.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
a):this;},_show: ---> f <--- .fn.show,show:function(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(c){if(! ---> c <--- ||typeofc=="number"||f.fx.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c){if(!c||typeof ---> c <--- =="number"||f.fx.speeds[c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(!c||typeofc=="number"|| ---> f <--- .fx.speeds[c]||!f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="number"||f.fx.speeds[ ---> c <--- ]||!f.effects[c])

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.fx.speeds[c]||! ---> f <--- .effects[c]){returnthis.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[c]||!f.effects[ ---> c <--- ]){returnthis._show.apply(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,arguments);}else{var  ---> a <--- =k.apply(this,arguments);

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
arguments);}else{var a= ---> k <--- .apply(this,arguments);a[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
k.apply(this,arguments); ---> a <--- [1].mode="show";returnthis

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.effect.apply(this, ---> a <--- );}},_hide:f.fn

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,a);}},_hide: ---> f <--- .fn.hide,hide:function(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(c){if(! ---> c <--- ||typeofc=="number"||f.fx.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c){if(!c||typeof ---> c <--- =="number"||f.fx.speeds[c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(!c||typeofc=="number"|| ---> f <--- .fx.speeds[c]||!f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="number"||f.fx.speeds[ ---> c <--- ]||!f.effects[c])

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.fx.speeds[c]||! ---> f <--- .effects[c]){returnthis.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[c]||!f.effects[ ---> c <--- ]){returnthis._hide.apply(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,arguments);}else{var  ---> a <--- =k.apply(this,arguments);

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
arguments);}else{var a= ---> k <--- .apply(this,arguments);a[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
k.apply(this,arguments); ---> a <--- [1].mode="hide";returnthis

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.effect.apply(this, ---> a <--- );}},__toggle:f.fn

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,a);}},__toggle: ---> f <--- .fn.toggle,toggle:function(c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(c){if(! ---> c <--- ||typeofc=="number"||f.fx.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c){if(!c||typeof ---> c <--- =="number"||f.fx.speeds[c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(!c||typeofc=="number"|| ---> f <--- .fx.speeds[c]||!f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="number"||f.fx.speeds[ ---> c <--- ]||!f.effects[c]||

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.fx.speeds[c]||! ---> f <--- .effects[c]||typeofc=="boolean"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
[c]||!f.effects[ ---> c <--- ]||typeofc=="boolean"||f.isFunction

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
!f.effects[c]||typeof ---> c <--- =="boolean"||f.isFunction(c))

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[c]||typeofc=="boolean"|| ---> f <--- .isFunction(c)){returnthis.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofc=="boolean"||f.isFunction( ---> c <--- )){returnthis.__toggle.apply(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,arguments);}else{var  ---> a <--- =k.apply(this,arguments);

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
arguments);}else{var a= ---> k <--- .apply(this,arguments);a[

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
k.apply(this,arguments); ---> a <--- [1].mode="toggle";returnthis

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnthis.effect.apply(this, ---> a <--- );}},cssUnit:function(c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,cssUnit:function(c){var  ---> a <--- =this.css(c),b=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){var a=this.css( ---> c <--- ),b=[];f.each

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a=this.css(c), ---> b <--- =[];f.each(["em"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(c),b=[]; ---> f <--- .each(["em","px","%",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
function(d,e){if( ---> a <--- .indexOf(e)>0){b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e){if(a.indexOf( ---> e <--- )>0){b=[parseFloat(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.indexOf(e)>0){ ---> b <--- =[parseFloat(a),e];

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
>0){b=[parseFloat( ---> a <--- ),e];}});return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{b=[parseFloat(a), ---> e <--- ];}});returnb;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,e];}});return ---> b <--- ;}});f.easing.jswing

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);returnb;}}); ---> f <--- .easing.jswing=f.easing.swing

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
});f.easing.jswing= ---> f <--- .easing.swing;f.extend(f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.jswing=f.easing.swing; ---> f <--- .extend(f.easing,{def:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing.swing;f.extend( ---> f <--- .easing,{def:"easeOutQuad",swing:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> f <--- .easing[f.easing.def](

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){returnf.easing[ ---> f <--- .easing.def](c,a,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
easing[f.easing.def]( ---> c <--- ,a,b,d,e);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f.easing.def](c, ---> a <--- ,b,d,e);},

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
easing.def](c,a, ---> b <--- ,d,e);},easeInQuad:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
def](c,a,b, ---> d <--- ,e);},easeInQuad:function(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,a,b,d, ---> e <--- );},easeInQuad:function(c,

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *(a/=e)*a+b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e){returnd*( ---> a <--- /=e)*a+b;},

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e){returnd*(a/= ---> e <--- )*a+b;},easeOutQuad:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*(a/=e)* ---> a <--- +b;},easeOutQuad:function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*(a/=e)*a+ ---> b <--- ;},easeOutQuad:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){return- ---> d <--- *(a/=e)*(a-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){return-d*( ---> a <--- /=e)*(a-2)+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
){return-d*(a/= ---> e <--- )*(a-2)+b;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d*(a/=e)*( ---> a <--- -2)+b;},easeInOutQuad:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e)*(a-2)+ ---> b <--- ;},easeInOutQuad:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,e){if(( ---> a <--- /=e/2)<1){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){if((a/= ---> e <--- /2)<1){returnd/

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e/2)<1){return ---> d <--- /2*a*a+b;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<1){returnd/2* ---> a <--- *a+b;}return-d/

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd/2*a* ---> a <--- +b;}return-d/2*

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd/2*a*a+ ---> b <--- ;}return-d/2*(--

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a*a+b;}return- ---> d <--- /2*(--a*(a-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}return-d/2*(-- ---> a <--- *(a-2)-1)+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d/2*(--a*( ---> a <--- -2)-1)+b;}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a-2)-1)+ ---> b <--- ;},easeInCubic:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *(a/=e)*a*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e){returnd*( ---> a <--- /=e)*a*a+b;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e){returnd*(a/= ---> e <--- )*a*a+b;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*(a/=e)* ---> a <--- *a+b;},easeOutCubic:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(a/=e)*a* ---> a <--- +b;},easeOutCubic:function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a/=e)*a*a+ ---> b <--- ;},easeOutCubic:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *((a=a/e-1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){returnd*(( ---> a <--- =a/e-1)*a*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd*((a= ---> a <--- /e-1)*a*a+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*((a=a/ ---> e <--- -1)*a*a+1)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=a/e-1)* ---> a <--- *a+1)+b;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a/e-1)*a* ---> a <--- +1)+b;},easeInOutCubic:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)*a*a+1)+ ---> b <--- ;},easeInOutCubic:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,e){if(( ---> a <--- /=e/2)<1){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){if((a/= ---> e <--- /2)<1){returnd/

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e/2)<1){return ---> d <--- /2*a*a*a+b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<1){returnd/2* ---> a <--- *a*a+b;}returnd

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd/2*a* ---> a <--- *a+b;}returnd/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd/2*a*a* ---> a <--- +b;}returnd/2*(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/2*a*a*a+ ---> b <--- ;}returnd/2*((a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
*a*a+b;}return ---> d <--- /2*((a-=2)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnd/2*(( ---> a <--- -=2)*a*a+2)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
2*((a-=2)* ---> a <--- *a+2)+b;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
((a-=2)*a* ---> a <--- +2)+b;},easeInQuart:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)*a*a+2)+ ---> b <--- ;},easeInQuart:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *(a/=e)*a*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e){returnd*( ---> a <--- /=e)*a*a*a+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e){returnd*(a/= ---> e <--- )*a*a*a+b;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*(a/=e)* ---> a <--- *a*a+b;},easeOutQuart

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(a/=e)*a* ---> a <--- *a+b;},easeOutQuart:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a/=e)*a*a* ---> a <--- +b;},easeOutQuart:function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e)*a*a*a+ ---> b <--- ;},easeOutQuart:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){return- ---> d <--- *((a=a/e-1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e){return-d*(( ---> a <--- =a/e-1)*a*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{return-d*((a= ---> a <--- /e-1)*a*a*

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-d*((a=a/ ---> e <--- -1)*a*a*a-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=a/e-1)* ---> a <--- *a*a-1)+b;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a/e-1)*a* ---> a <--- *a-1)+b;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e-1)*a*a* ---> a <--- -1)+b;},easeInOutQuart:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a*a*a-1)+ ---> b <--- ;},easeInOutQuart:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,e){if(( ---> a <--- /=e/2)<1){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){if((a/= ---> e <--- /2)<1){returnd/

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e/2)<1){return ---> d <--- /2*a*a*a*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<1){returnd/2* ---> a <--- *a*a*a+b;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd/2*a* ---> a <--- *a*a+b;}return-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd/2*a*a* ---> a <--- *a+b;}return-d/

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/2*a*a*a* ---> a <--- +b;}return-d/2*

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*a*a*a*a+ ---> b <--- ;}return-d/2*((

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a*a+b;}return- ---> d <--- /2*((a-=2)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}return-d/2*(( ---> a <--- -=2)*a*a*a-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
2*((a-=2)* ---> a <--- *a*a-2)+b;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
((a-=2)*a* ---> a <--- *a-2)+b;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a-=2)*a*a* ---> a <--- -2)+b;},easeInQuint:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a*a*a-2)+ ---> b <--- ;},easeInQuint:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *(a/=e)*a*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e){returnd*( ---> a <--- /=e)*a*a*a*

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
e){returnd*(a/= ---> e <--- )*a*a*a*a+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*(a/=e)* ---> a <--- *a*a*a+b;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(a/=e)*a* ---> a <--- *a*a+b;},easeOutQuint

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a/=e)*a*a* ---> a <--- *a+b;},easeOutQuint:function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e)*a*a*a* ---> a <--- +b;},easeOutQuint:function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*a*a*a*a+ ---> b <--- ;},easeOutQuint:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *((a=a/e-1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){returnd*(( ---> a <--- =a/e-1)*a*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd*((a= ---> a <--- /e-1)*a*a*

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*((a=a/ ---> e <--- -1)*a*a*a*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=a/e-1)* ---> a <--- *a*a*a+1)+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a/e-1)*a* ---> a <--- *a*a+1)+b;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e-1)*a*a* ---> a <--- *a+1)+b;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1)*a*a*a* ---> a <--- +1)+b;},easeInOutQuint:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a*a*a+1)+ ---> b <--- ;},easeInOutQuint:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,e){if(( ---> a <--- /=e/2)<1){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){if((a/= ---> e <--- /2)<1){returnd/

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e/2)<1){return ---> d <--- /2*a*a*a*a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<1){returnd/2* ---> a <--- *a*a*a*a+b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd/2*a* ---> a <--- *a*a*a+b;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd/2*a*a* ---> a <--- *a*a+b;}returnd

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/2*a*a*a* ---> a <--- *a+b;}returnd/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*a*a*a*a* ---> a <--- +b;}returnd/2*(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*a*a*a*a+ ---> b <--- ;}returnd/2*((a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
*a*a+b;}return ---> d <--- /2*((a-=2)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnd/2*(( ---> a <--- -=2)*a*a*a*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
2*((a-=2)* ---> a <--- *a*a*a+2)+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
((a-=2)*a* ---> a <--- *a*a+2)+b;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a-=2)*a*a* ---> a <--- *a+2)+b;},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
2)*a*a*a* ---> a <--- +2)+b;},easeInSine:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a*a*a+2)+ ---> b <--- ;},easeInSine:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){return- ---> d <--- *Math.cos(a/e*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{return-d*Math.cos( ---> a <--- /e*(Math.PI/2)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-d*Math.cos(a/ ---> e <--- *(Math.PI/2))+

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(Math.PI/2))+ ---> d <--- +b;},easeOutSine:function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.PI/2))+d+ ---> b <--- ;},easeOutSine:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *Math.sin(a/e*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd*Math.sin( ---> a <--- /e*(Math.PI/2)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*Math.sin(a/ ---> e <--- *(Math.PI/2))+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(Math.PI/2))+ ---> b <--- ;},easeInOutSine:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){return- ---> d <--- /2*(Math.cos(Math.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(Math.cos(Math.PI* ---> a <--- /e)-1)+b;}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.cos(Math.PI*a/ ---> e <--- )-1)+b;},easeInExpo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*a/e)-1)+ ---> b <--- ;},easeInExpo:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> a <--- ==0?b:d*Math.pow

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){returna==0? ---> b <--- :d*Math.pow(2,10

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){returna==0?b: ---> d <--- *Math.pow(2,10*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.pow(2,10*( ---> a <--- /e-1))+b;}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
pow(2,10*(a/ ---> e <--- -1))+b;},easeOutExpo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(a/e-1))+ ---> b <--- ;},easeOutExpo:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> a <--- ==e?b+d:d*(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,e){returna== ---> e <--- ?b+d:d*(-Math

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){returna==e? ---> b <--- +d:d*(-Math.pow

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
){returna==e?b+ ---> d <--- :d*(-Math.pow(2

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
returna==e?b+d: ---> d <--- *(-Math.pow(2,-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.pow(2,-10* ---> a <--- /e)+1)+b;}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
pow(2,-10*a/ ---> e <--- )+1)+b;},easeInOutExpo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*a/e)+1)+ ---> b <--- ;},easeInOutExpo:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){if( ---> a <--- ==0){returnb;}if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(a==0){return ---> b <--- ;}if(a==e){return

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0){returnb;}if( ---> a <--- ==e){returnb+d;}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{returnb;}if(a== ---> e <--- ){returnb+d;}if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(a==e){return ---> b <--- +d;}if((a/=e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(a==e){returnb+ ---> d <--- ;}if((a/=e/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb+d;}if(( ---> a <--- /=e/2)<1){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
+d;}if((a/= ---> e <--- /2)<1){returnd/

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e/2)<1){return ---> d <--- /2*Math.pow(2,10

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.pow(2,10*( ---> a <--- -1))+b;}returnd

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
10*(a-1))+ ---> b <--- ;}returnd/2*(-Math

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
-1))+b;}return ---> d <--- /2*(-Math.pow(2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.pow(2,-10*-- ---> a <--- )+2)+b;},easeInCirc

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
10*--a)+2)+ ---> b <--- ;},easeInCirc:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){return- ---> d <--- *(Math.sqrt(1-(a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(Math.sqrt(1-( ---> a <--- /=e)*a)-1)+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.sqrt(1-(a/= ---> e <--- )*a)-1)+b;

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(1-(a/=e)* ---> a <--- )-1)+b;},easeOutCirc

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e)*a)-1)+ ---> b <--- ;},easeOutCirc:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- *Math.sqrt(1-(a=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d*Math.sqrt(1-( ---> a <--- =a/e-1)*a)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.sqrt(1-(a= ---> a <--- /e-1)*a)+b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
sqrt(1-(a=a/ ---> e <--- -1)*a)+b;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=a/e-1)* ---> a <--- )+b;},easeInOutCirc:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/e-1)*a)+ ---> b <--- ;},easeInOutCirc:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,e){if(( ---> a <--- /=e/2)<1){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){if((a/= ---> e <--- /2)<1){return-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
/2)<1){return- ---> d <--- /2*(Math.sqrt(1-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
2*(Math.sqrt(1- ---> a <--- *a)-1)+b;}

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(Math.sqrt(1-a* ---> a <--- )-1)+b;}returnd

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
-a*a)-1)+ ---> b <--- ;}returnd/2*(Math.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)-1)+b;}return ---> d <--- /2*(Math.sqrt(1-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(Math.sqrt(1-( ---> a <--- -=2)*a)+1)+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(1-(a-=2)* ---> a <--- )+1)+b;},easeInElastic

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
2)*a)+1)+ ---> b <--- ;},easeInElastic:function(c,a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,d,e){ ---> c <--- =1.70158;var g=0,h=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){c=1.70158;var  ---> g <--- =0,h=d;if(a

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
c=1.70158;var g=0, ---> h <--- =d;if(a==0){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
1.70158;var g=0,h= ---> d <--- ;if(a==0){returnb

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=0,h=d;if( ---> a <--- ==0){returnb;}if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(a==0){return ---> b <--- ;}if((a/=e)==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnb;}if(( ---> a <--- /=e)==1){returnb+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb;}if((a/= ---> e <--- )==1){returnb+d;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a/=e)==1){return ---> b <--- +d;}g||(g=e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e)==1){returnb+ ---> d <--- ;}g||(g=e*0.3

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
1){returnb+d;} ---> g <--- ||(g=e*0.3);if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb+d;}g||( ---> g <--- =e*0.3);if(h<

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
+d;}g||(g= ---> e <--- *0.3);if(h<Math.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
g=e*0.3);if( ---> h <--- <Math.abs(d)){h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(h<Math.abs( ---> d <--- )){h=d;c=g

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
<Math.abs(d)){ ---> h <--- =d;c=g/4;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(d)){h= ---> d <--- ;c=g/4;}else{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(d)){h=d; ---> c <--- =g/4;}else{c=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)){h=d;c= ---> g <--- /4;}else{c=g/

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=g/4;}else{ ---> c <--- =g/(2*Math.PI)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g/4;}else{c= ---> g <--- /(2*Math.PI)*Math

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.PI)*Math.asin( ---> d <--- /h);}return-(h*

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
PI)*Math.asin(d/ ---> h <--- );}return-(h*Math.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
d/h);}return-( ---> h <--- *Math.pow(2,10*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.pow(2,10*( ---> a <--- -=1))*Math.sin((

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1))*Math.sin(( ---> a <--- *e-c)*2*Math.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)*Math.sin((a* ---> e <--- -c)*2*Math.PI/

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.sin((a*e- ---> c <--- )*2*Math.PI/g)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
c)*2*Math.PI/ ---> g <--- ))+b;},easeOutElastic:function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*Math.PI/g))+ ---> b <--- ;},easeOutElastic:function(c,a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,d,e){ ---> c <--- =1.70158;var g=0,h=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){c=1.70158;var  ---> g <--- =0,h=d;if(a

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
c=1.70158;var g=0, ---> h <--- =d;if(a==0){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
1.70158;var g=0,h= ---> d <--- ;if(a==0){returnb

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=0,h=d;if( ---> a <--- ==0){returnb;}if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(a==0){return ---> b <--- ;}if((a/=e)==

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnb;}if(( ---> a <--- /=e)==1){returnb+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb;}if((a/= ---> e <--- )==1){returnb+d;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a/=e)==1){return ---> b <--- +d;}g||(g=e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e)==1){returnb+ ---> d <--- ;}g||(g=e*0.3

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
1){returnb+d;} ---> g <--- ||(g=e*0.3);if

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb+d;}g||( ---> g <--- =e*0.3);if(h<

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
+d;}g||(g= ---> e <--- *0.3);if(h<Math.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
g=e*0.3);if( ---> h <--- <Math.abs(d)){h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(h<Math.abs( ---> d <--- )){h=d;c=g

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
<Math.abs(d)){ ---> h <--- =d;c=g/4;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(d)){h= ---> d <--- ;c=g/4;}else{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(d)){h=d; ---> c <--- =g/4;}else{c=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)){h=d;c= ---> g <--- /4;}else{c=g/

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=g/4;}else{ ---> c <--- =g/(2*Math.PI)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g/4;}else{c= ---> g <--- /(2*Math.PI)*Math

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.PI)*Math.asin( ---> d <--- /h);}returnh*Math.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
PI)*Math.asin(d/ ---> h <--- );}returnh*Math.pow(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
asin(d/h);}return ---> h <--- *Math.pow(2,-10*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.pow(2,-10* ---> a <--- )*Math.sin((a*e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*a)*Math.sin(( ---> a <--- *e-c)*2*Math.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)*Math.sin((a* ---> e <--- -c)*2*Math.PI/

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.sin((a*e- ---> c <--- )*2*Math.PI/g)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
c)*2*Math.PI/ ---> g <--- )+d+b;},easeInOutElastic:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
2*Math.PI/g)+ ---> d <--- +b;},easeInOutElastic:function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.PI/g)+d+ ---> b <--- ;},easeInOutElastic:function(c,a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,b,d,e){ ---> c <--- =1.70158;var g=0,h=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,e){c=1.70158;var  ---> g <--- =0,h=d;if(a

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
c=1.70158;var g=0, ---> h <--- =d;if(a==0){

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
1.70158;var g=0,h= ---> d <--- ;if(a==0){returnb

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=0,h=d;if( ---> a <--- ==0){returnb;}if(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(a==0){return ---> b <--- ;}if((a/=e/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnb;}if(( ---> a <--- /=e/2)==2){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb;}if((a/= ---> e <--- /2)==2){returnb+

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e/2)==2){return ---> b <--- +d;}g||(g=e

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
2)==2){returnb+ ---> d <--- ;}g||(g=e*0.3

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
2){returnb+d;} ---> g <--- ||(g=e*0.3*1.5)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
returnb+d;}g||( ---> g <--- =e*0.3*1.5);if(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
+d;}g||(g= ---> e <--- *0.3*1.5);if(h<

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
e*0.3*1.5);if( ---> h <--- <Math.abs(d)){h

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(h<Math.abs( ---> d <--- )){h=d;c=g

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
<Math.abs(d)){ ---> h <--- =d;c=g/4;}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(d)){h= ---> d <--- ;c=g/4;}else{

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(d)){h=d; ---> c <--- =g/4;}else{c=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
)){h=d;c= ---> g <--- /4;}else{c=g/

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=g/4;}else{ ---> c <--- =g/(2*Math.PI)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
g/4;}else{c= ---> g <--- /(2*Math.PI)*Math

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.PI)*Math.asin( ---> d <--- /h);}if(a<1

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
PI)*Math.asin(d/ ---> h <--- );}if(a<1){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(d/h);}if( ---> a <--- <1){return-0.5*h*

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
a<1){return-0.5* ---> h <--- *Math.pow(2,10*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.pow(2,10*( ---> a <--- -=1))*Math.sin((

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1))*Math.sin(( ---> a <--- *e-c)*2*Math.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)*Math.sin((a* ---> e <--- -c)*2*Math.PI/

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.sin((a*e- ---> c <--- )*2*Math.PI/g)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
c)*2*Math.PI/ ---> g <--- )+b;}returnh*Math.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
2*Math.PI/g)+ ---> b <--- ;}returnh*Math.pow(2

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
PI/g)+b;}return ---> h <--- *Math.pow(2,-10*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.pow(2,-10*( ---> a <--- -=1))*Math.sin((

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
1))*Math.sin(( ---> a <--- *e-c)*2*Math.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)*Math.sin((a* ---> e <--- -c)*2*Math.PI/

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.sin((a*e- ---> c <--- )*2*Math.PI/g)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
c)*2*Math.PI/ ---> g <--- )*0.5+d+b;},

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
Math.PI/g)*0.5+ ---> d <--- +b;},easeInBack:function(c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
PI/g)*0.5+d+ ---> b <--- ;},easeInBack:function(c,a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e,g){if( ---> g <--- ==j){g=1.70158;}return

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
e,g){if(g== ---> j <--- ){g=1.70158;}returnd*

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(g==j){ ---> g <--- =1.70158;}returnd*(a/=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
j){g=1.70158;}return ---> d <--- *(a/=e)*a*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g=1.70158;}returnd*( ---> a <--- /=e)*a*((g+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
1.70158;}returnd*(a/= ---> e <--- )*a*((g+1)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*(a/=e)* ---> a <--- *((g+1)*a-

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a/=e)*a*(( ---> g <--- +1)*a-g)+b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a*((g+1)* ---> a <--- -g)+b;},easeOutBack:

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
((g+1)*a- ---> g <--- )+b;},easeOutBack:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+1)*a-g)+ ---> b <--- ;},easeOutBack:function(c,a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e,g){if( ---> g <--- ==j){g=1.70158;}return

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
e,g){if(g== ---> j <--- ){g=1.70158;}returnd*

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(g==j){ ---> g <--- =1.70158;}returnd*((a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
j){g=1.70158;}return ---> d <--- *((a=a/e-1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=1.70158;}returnd*(( ---> a <--- =a/e-1)*a*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnd*((a= ---> a <--- /e-1)*a*((

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd*((a=a/ ---> e <--- -1)*a*((g+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a=a/e-1)* ---> a <--- *((g+1)*a+

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
e-1)*a*(( ---> g <--- +1)*a+g)+1

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a*((g+1)* ---> a <--- +g)+1)+b;}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
((g+1)*a+ ---> g <--- )+1)+b;},easeInOutBack

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*a+g)+1)+ ---> b <--- ;},easeInOutBack:function(c,a

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e,g){if( ---> g <--- ==j){g=1.70158;}if

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
e,g){if(g== ---> j <--- ){g=1.70158;}if((

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(g==j){ ---> g <--- =1.70158;}if((a/=e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{g=1.70158;}if(( ---> a <--- /=e/2)<1){return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=1.70158;}if((a/= ---> e <--- /2)<1){returnd/

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e/2)<1){return ---> d <--- /2*a*a*(((

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<1){returnd/2* ---> a <--- *a*(((g*=1.525)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnd/2*a* ---> a <--- *(((g*=1.525)+1

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
2*a*a*((( ---> g <--- *=1.525)+1)*a-g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(g*=1.525)+1)* ---> a <--- -g)+b;}returnd/

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
*=1.525)+1)*a- ---> g <--- )+b;}returnd/2*

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
+1)*a-g)+ ---> b <--- ;}returnd/2*((a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a-g)+b;}return ---> d <--- /2*((a-=2)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnd/2*(( ---> a <--- -=2)*a*(((g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
2*((a-=2)* ---> a <--- *(((g*=1.525)+1

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
-=2)*a*((( ---> g <--- *=1.525)+1)*a+g

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(g*=1.525)+1)* ---> a <--- +g)+2)+b;}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
*=1.525)+1)*a+ ---> g <--- )+2)+b;},easeInBounce

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
*a+g)+2)+ ---> b <--- ;},easeInBounce:function(c,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,b,d,e){return ---> d <--- -f.easing.easeOutBounce(c,e

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
,d,e){returnd- ---> f <--- .easing.easeOutBounce(c,e-a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
returnd-f.easing.easeOutBounce( ---> c <--- ,e-a,0,d,e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
-f.easing.easeOutBounce(c, ---> e <--- -a,0,d,e)+

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing.easeOutBounce(c,e- ---> a <--- ,0,d,e)+b;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,e-a,0, ---> d <--- ,e)+b;},easeOutBounce:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e-a,0,d, ---> e <--- )+b;},easeOutBounce:function(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a,0,d,e)+ ---> b <--- ;},easeOutBounce:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){return( ---> a <--- /=e)<1/2.75?d*

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e){return(a/= ---> e <--- )<1/2.75?d*7.5625*

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a/=e)<1/2.75? ---> d <--- *7.5625*a*a+b:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
<1/2.75?d*7.5625* ---> a <--- *a+b:a<2/2.75

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/2.75?d*7.5625*a* ---> a <--- +b:a<2/2.75?d

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?d*7.5625*a*a+ ---> b <--- :a<2/2.75?d*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*7.5625*a*a+b: ---> a <--- <2/2.75?d*(7.5625*

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+b:a<2/2.75? ---> d <--- *(7.5625*(a-=1.5/2.75

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/2.75?d*(7.5625*( ---> a <--- -=1.5/2.75)*a+0.75)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(a-=1.5/2.75)* ---> a <--- +0.75)+b:a<2.5/

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/2.75)*a+0.75)+ ---> b <--- :a<2.5/2.75?d*(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
)*a+0.75)+b: ---> a <--- <2.5/2.75?d*(7.5625*

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+b:a<2.5/2.75? ---> d <--- *(7.5625*(a-=2.25/2.75

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/2.75?d*(7.5625*( ---> a <--- -=2.25/2.75)*a+0.9375)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(a-=2.25/2.75)* ---> a <--- +0.9375)+b:d*(7.5625

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/2.75)*a+0.9375)+ ---> b <--- :d*(7.5625*(a-=2.625

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
)*a+0.9375)+b: ---> d <--- *(7.5625*(a-=2.625/2.75

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
+b:d*(7.5625*( ---> a <--- -=2.625/2.75)*a+0.984375)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
*(a-=2.625/2.75)* ---> a <--- +0.984375)+b;},easeInOutBounce:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/2.75)*a+0.984375)+ ---> b <--- ;},easeInOutBounce:function(c,a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b,d,e){if( ---> a <--- <e/2){returnf.easing

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d,e){if(a< ---> e <--- /2){returnf.easing.easeInBounce

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(a<e/2){return ---> f <--- .easing.easeInBounce(c,a*2

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
){returnf.easing.easeInBounce( ---> c <--- ,a*2,0,d,e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnf.easing.easeInBounce(c, ---> a <--- *2,0,d,e)*

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(c,a*2,0, ---> d <--- ,e)*0.5+b;}return

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,a*2,0,d, ---> e <--- )*0.5+b;}returnf.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
0,d,e)*0.5+ ---> b <--- ;}returnf.easing.easeOutBounce(c

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e)*0.5+b;}return ---> f <--- .easing.easeOutBounce(c,a*2

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}returnf.easing.easeOutBounce( ---> c <--- ,a*2-e,0,d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
returnf.easing.easeOutBounce(c, ---> a <--- *2-e,0,d,e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.easeOutBounce(c,a*2- ---> e <--- ,0,d,e)*0.5+

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,a*2-e,0, ---> d <--- ,e)*0.5+d*0.5+

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
*2-e,0,d, ---> e <--- )*0.5+d*0.5+b;

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
0,d,e)*0.5+ ---> d <--- *0.5+b;}});}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e)*0.5+d*0.5+ ---> b <--- ;}});}(jQuery);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(b){ ---> b <--- .effects.blind=function(c){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =b(this),g=["position"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> b <--- (this),g=["position","top"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=b(this), ---> g <--- =["position","top","left"],f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=["position","top","left"], ---> f <--- =b.effects.setMode(a,c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"position","top","left"],f= ---> b <--- .effects.setMode(a,c.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=b.effects.setMode( ---> a <--- ,c.options.mode||"hide"),

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.effects.setMode(a, ---> c <--- .options.mode||"hide"),d=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.options.mode||"hide"), ---> d <--- =c.options.direction||"vertical";b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode||"hide"),d= ---> c <--- .options.direction||"vertical";b.effects

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.options.direction||"vertical"; ---> b <--- .effects.save(a,g);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||"vertical";b.effects.save( ---> a <--- ,g);a.show();

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.effects.save(a, ---> g <--- );a.show();var e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(a,g); ---> a <--- .show();var e=b.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.show();var  ---> e <--- =b.effects.createWrapper(a).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.show();var e= ---> b <--- .effects.createWrapper(a).css(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var e=b.effects.createWrapper( ---> a <--- ).css({overflow:"hidden"})

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
css({overflow:"hidden"}), ---> h <--- =d=="vertical"?"height":"width";d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{overflow:"hidden"}),h= ---> d <--- =="vertical"?"height":"width";d=d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=d=="vertical"?"height":"width"; ---> d <--- =d=="vertical"?e.height()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=="vertical"?"height":"width";d= ---> d <--- =="vertical"?e.height():e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:"width";d=d=="vertical"? ---> e <--- .height():e.width()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=="vertical"?e.height(): ---> e <--- .width();f=="show"&&e

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
():e.width(); ---> f <--- =="show"&&e.css(h,0

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.width();f=="show"&& ---> e <--- .css(h,0);var i

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;f=="show"&&e.css( ---> h <--- ,0);var i={};

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.css(h,0);var  ---> i <--- ={};i[h]=f

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
0);var i={}; ---> i <--- [h]=f=="show"?d:

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;var i={};i[ ---> h <--- ]=f=="show"?d:0;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
={};i[h]= ---> f <--- =="show"?d:0;e.animate

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
i[h]=f=="show"? ---> d <--- :0;e.animate(i,c

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=f=="show"?d:0; ---> e <--- .animate(i,c.duration,c

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
?d:0;e.animate( ---> i <--- ,c.duration,c.options.easing

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:0;e.animate(i, ---> c <--- .duration,c.options.easing,function

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(i,c.duration, ---> c <--- .options.easing,function(){f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.easing,function(){ ---> f <--- =="hide"&&a.hide();b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){f=="hide"&& ---> a <--- .hide();b.effects.restore

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"&&a.hide(); ---> b <--- .effects.restore(a,g);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();b.effects.restore( ---> a <--- ,g);b.effects.removeWrapper(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.effects.restore(a, ---> g <--- );b.effects.removeWrapper(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(a,g); ---> b <--- .effects.removeWrapper(a);c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g);b.effects.removeWrapper( ---> a <--- );c.callback&&c.callback.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.effects.removeWrapper(a); ---> c <--- .callback&&c.callback.apply(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(a);c.callback&& ---> c <--- .callback.apply(a[0],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.callback&&c.callback.apply( ---> a <--- [0],arguments);a.dequeue

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a[0],arguments); ---> a <--- .dequeue();});})

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(e){ ---> e <--- .effects.bounce=function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =e(this),l=["position"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> e <--- (this),l=["position","top"

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=e(this), ---> l <--- =["position","top","left"],h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=["position","top","left"], ---> h <--- =e.effects.setMode(a,b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"position","top","left"],h= ---> e <--- .effects.setMode(a,b.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=e.effects.setMode( ---> a <--- ,b.options.mode||"effect"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.effects.setMode(a, ---> b <--- .options.mode||"effect"),d=

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.mode||"effect"), ---> d <--- =b.options.direction||"up",c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode||"effect"),d= ---> b <--- .options.direction||"up",c=b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.direction||"up", ---> c <--- =b.options.distance||20,m

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.direction||"up",c= ---> b <--- .options.distance||20,m=b

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.distance||20, ---> m <--- =b.options.times||5,i

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.distance||20,m= ---> b <--- .options.times||5,i=b

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.times||5, ---> i <--- =b.duration||250;/show|hide/.test

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.times||5,i= ---> b <--- .duration||250;/show|hide/.test(h

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.duration||250;/show|hide/.test( ---> h <--- )&&l.push("opacity");e

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
250;/show|hide/.test(h)&& ---> l <--- .push("opacity");e.effects.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&l.push("opacity"); ---> e <--- .effects.save(a,l);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"opacity");e.effects.save( ---> a <--- ,l);a.show();

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
;e.effects.save(a, ---> l <--- );a.show();e.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(a,l); ---> a <--- .show();e.effects.createWrapper

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
l);a.show(); ---> e <--- .effects.createWrapper(a);var f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();e.effects.createWrapper( ---> a <--- );var f=d=="up"||d

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.createWrapper(a);var  ---> f <--- =d=="up"||d=="down"?"top"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.createWrapper(a);var f= ---> d <--- =="up"||d=="down"?"top":"left"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);var f=d=="up"|| ---> d <--- =="down"?"top":"left";d=d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
||d=="down"?"top":"left"; ---> d <--- =d=="up"||d=="left"?"pos"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=="down"?"top":"left";d= ---> d <--- =="up"||d=="left"?"pos":"neg"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
:"left";d=d=="up"|| ---> d <--- =="left"?"pos":"neg";c=b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||d=="left"?"pos":"neg"; ---> c <--- =b.options.distance||(f==

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="left"?"pos":"neg";c= ---> b <--- .options.distance||(f=="top"?

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c=b.options.distance||( ---> f <--- =="top"?a.outerHeight({margin:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options.distance||(f=="top"? ---> a <--- .outerHeight({margin:true})/

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{margin:true})/3: ---> a <--- .outerWidth({margin:true})/

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
true})/3);if( ---> h <--- =="show"){a.css("opacity",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(h=="show"){ ---> a <--- .css("opacity",0).css(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
css("opacity",0).css( ---> f <--- ,d=="pos"?-c:c)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"opacity",0).css(f, ---> d <--- =="pos"?-c:c);}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css(f,d=="pos"?- ---> c <--- :c);}if(h=="hide"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f,d=="pos"?-c: ---> c <--- );}if(h=="hide"){

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
-c:c);}if( ---> h <--- =="hide"){c/=m*2;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(h=="hide"){ ---> c <--- /=m*2;}h!="hide"&&

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
if(h=="hide"){c/= ---> m <--- *2;}h!="hide"&&m--

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
){c/=m*2;} ---> h <--- !="hide"&&m--;if(h==

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
m*2;}h!="hide"&& ---> m <--- --;if(h=="show"){var 

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
h!="hide"&&m--;if( ---> h <--- =="show"){var g={opacity:

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(h=="show"){var  ---> g <--- ={opacity:1};g[f

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
var g={opacity:1}; ---> g <--- [f]=(d=="pos"?"+="

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
={opacity:1};g[ ---> f <--- ]=(d=="pos"?"+=":"-="

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
1};g[f]=( ---> d <--- =="pos"?"+=":"-=")+c;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="pos"?"+=":"-=")+ ---> c <--- ;a.animate(g,i/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"+=":"-=")+c; ---> a <--- .animate(g,i/2,b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=")+c;a.animate( ---> g <--- ,i/2,b.options.easing

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+c;a.animate(g, ---> i <--- /2,b.options.easing);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(g,i/2, ---> b <--- .options.easing);c/=2;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
2,b.options.easing); ---> c <--- /=2;m--;}for(g

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
options.easing);c/=2; ---> m <--- --;}for(g=0;g

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
/=2;m--;}for( ---> g <--- =0;g<m;g++)

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
--;}for(g=0; ---> g <--- <m;g++){var j=

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
}for(g=0;g< ---> m <--- ;g++){var j={}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(g=0;g<m; ---> g <--- ++){var j={},k

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
g<m;g++){var  ---> j <--- ={},k={};j

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
++){var j={}, ---> k <--- ={};j[f]=(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
={},k={}; ---> j <--- [f]=(d=="pos"?"-="

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
},k={};j[ ---> f <--- ]=(d=="pos"?"-=":"+="

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{};j[f]=( ---> d <--- =="pos"?"-=":"+=")+c;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="pos"?"-=":"+=")+ ---> c <--- ;k[f]=(d=="pos"

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"-=":"+=")+c; ---> k <--- [f]=(d=="pos"?"+="

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=":"+=")+c;k[ ---> f <--- ]=(d=="pos"?"+=":"-="

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+c;k[f]=( ---> d <--- =="pos"?"+=":"-=")+c;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="pos"?"+=":"-=")+ ---> c <--- ;a.animate(j,i/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"+=":"-=")+c; ---> a <--- .animate(j,i/2,b

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=")+c;a.animate( ---> j <--- ,i/2,b.options.easing

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+c;a.animate(j, ---> i <--- /2,b.options.easing).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(j,i/2, ---> b <--- .options.easing).animate(k,

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.easing).animate( ---> k <--- ,i/2,b.options.easing

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
options.easing).animate(k, ---> i <--- /2,b.options.easing);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(k,i/2, ---> b <--- .options.easing);c=h==

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
2,b.options.easing); ---> c <--- =h=="hide"?c*2:c

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.easing);c= ---> h <--- =="hide"?c*2:c/2

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
easing);c=h=="hide"? ---> c <--- *2:c/2;}if(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=h=="hide"?c*2: ---> c <--- /2;}if(h=="hide")

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
2:c/2;}if( ---> h <--- =="hide"){g={opacity:0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(h=="hide"){ ---> g <--- ={opacity:0};g[f

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
{g={opacity:0}; ---> g <--- [f]=(d=="pos"?"-="

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
={opacity:0};g[ ---> f <--- ]=(d=="pos"?"-=":"+="

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
0};g[f]=( ---> d <--- =="pos"?"-=":"+=")+c;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="pos"?"-=":"+=")+ ---> c <--- ;a.animate(g,i/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"-=":"+=")+c; ---> a <--- .animate(g,i/2,b

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"+=")+c;a.animate( ---> g <--- ,i/2,b.options.easing

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+c;a.animate(g, ---> i <--- /2,b.options.easing,function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(g,i/2, ---> b <--- .options.easing,function(){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.easing,function(){ ---> a <--- .hide();e.effects.restore

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(){a.hide(); ---> e <--- .effects.restore(a,l);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();e.effects.restore( ---> a <--- ,l);e.effects.removeWrapper(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
;e.effects.restore(a, ---> l <--- );e.effects.removeWrapper(a)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(a,l); ---> e <--- .effects.removeWrapper(a);b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
l);e.effects.removeWrapper( ---> a <--- );b.callback&&b.callback.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e.effects.removeWrapper(a); ---> b <--- .callback&&b.callback.apply(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(a);b.callback&& ---> b <--- .callback.apply(this,arguments);

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
arguments);});}else{ ---> j <--- ={};k={};j

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
;}else{j={}; ---> k <--- ={};j[f]=(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
={};k={}; ---> j <--- [f]=(d=="pos"?"-="

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
};k={};j[ ---> f <--- ]=(d=="pos"?"-=":"+="

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{};j[f]=( ---> d <--- =="pos"?"-=":"+=")+c;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="pos"?"-=":"+=")+ ---> c <--- ;k[f]=(d=="pos"

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"-=":"+=")+c; ---> k <--- [f]=(d=="pos"?"+="

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=":"+=")+c;k[ ---> f <--- ]=(d=="pos"?"+=":"-="

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+c;k[f]=( ---> d <--- =="pos"?"+=":"-=")+c;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="pos"?"+=":"-=")+ ---> c <--- ;a.animate(j,i/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"+=":"-=")+c; ---> a <--- .animate(j,i/2,b

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=")+c;a.animate( ---> j <--- ,i/2,b.options.easing

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+c;a.animate(j, ---> i <--- /2,b.options.easing).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(j,i/2, ---> b <--- .options.easing).animate(k,

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.easing).animate( ---> k <--- ,i/2,b.options.easing

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
options.easing).animate(k, ---> i <--- /2,b.options.easing,function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(k,i/2, ---> b <--- .options.easing,function(){e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.easing,function(){ ---> e <--- .effects.restore(a,l);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(){e.effects.restore( ---> a <--- ,l);e.effects.removeWrapper(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
{e.effects.restore(a, ---> l <--- );e.effects.removeWrapper(a)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(a,l); ---> e <--- .effects.removeWrapper(a);b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
l);e.effects.removeWrapper( ---> a <--- );b.callback&&b.callback.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
e.effects.removeWrapper(a); ---> b <--- .callback&&b.callback.apply(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(a);b.callback&& ---> b <--- .callback.apply(this,arguments);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this,arguments);});} ---> a <--- .queue("fx",function(){a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("fx",function(){ ---> a <--- .dequeue();});a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a.dequeue();}); ---> a <--- .dequeue();});};

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(b){ ---> b <--- .effects.clip=function(e){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =b(this),i=["position"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> b <--- (this),i=["position","top"

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=b(this), ---> i <--- =["position","top","left","height",

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"top","left","height","width"], ---> f <--- =b.effects.setMode(a,e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"left","height","width"],f= ---> b <--- .effects.setMode(a,e.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=b.effects.setMode( ---> a <--- ,e.options.mode||"hide"),

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.effects.setMode(a, ---> e <--- .options.mode||"hide"),c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
e.options.mode||"hide"), ---> c <--- =e.options.direction||"vertical";b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode||"hide"),c= ---> e <--- .options.direction||"vertical";b.effects

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=e.options.direction||"vertical"; ---> b <--- .effects.save(a,i);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||"vertical";b.effects.save( ---> a <--- ,i);a.show();

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.effects.save(a, ---> i <--- );a.show();var d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(a,i); ---> a <--- .show();var d=b.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.show();var  ---> d <--- =b.effects.createWrapper(a).

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
a.show();var d= ---> b <--- .effects.createWrapper(a).css(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var d=b.effects.createWrapper( ---> a <--- ).css({overflow:"hidden"})

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
css({overflow:"hidden"}); ---> d <--- =a[0].tagName=="IMG"?

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{overflow:"hidden"});d= ---> a <--- [0].tagName=="IMG"?d:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
a[0].tagName=="IMG"? ---> d <--- :a;var g={size:c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0].tagName=="IMG"?d: ---> a <--- ;var g={size:c=="vertical"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
tagName=="IMG"?d:a;var  ---> g <--- ={size:c=="vertical"?"height":

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:a;var g={size: ---> c <--- =="vertical"?"height":"width",position:c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="vertical"?"height":"width",position: ---> c <--- =="vertical"?"top":"left"};c=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c=="vertical"?"top":"left"}; ---> c <--- =c=="vertical"?d.height()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"vertical"?"top":"left"};c= ---> c <--- =="vertical"?d.height():d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"left"};c=c=="vertical"? ---> d <--- .height():d.width()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=="vertical"?d.height(): ---> d <--- .width();if(f=="show"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:d.width();if( ---> f <--- =="show"){d.css(g.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(f=="show"){ ---> d <--- .css(g.size,0);

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
f=="show"){d.css( ---> g <--- .size,0);d.css(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
css(g.size,0); ---> d <--- .css(g.position,c/2

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
size,0);d.css( ---> g <--- .position,c/2);}var 

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.css(g.position, ---> c <--- /2);}var h={}

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
position,c/2);}var  ---> h <--- ={};h[g.size]

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
);}var h={}; ---> h <--- [g.size]=f=="show"?

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
}var h={};h[ ---> g <--- .size]=f=="show"?c:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
};h[g.size]= ---> f <--- =="show"?c:0;h[g

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
g.size]=f=="show"? ---> c <--- :0;h[g.position]=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=f=="show"?c:0; ---> h <--- [g.position]=f=="show"?

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=="show"?c:0;h[ ---> g <--- .position]=f=="show"?0:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
0;h[g.position]= ---> f <--- =="show"?0:c/2;d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
position]=f=="show"?0: ---> c <--- /2;d.animate(h,{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=="show"?0:c/2; ---> d <--- .animate(h,{queue:false,

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:c/2;d.animate( ---> h <--- ,{queue:false,duration:e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h,{queue:false,duration: ---> e <--- .duration,easing:e.options.easing

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,duration:e.duration,easing: ---> e <--- .options.easing,complete:function()

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,complete:function(){ ---> f <--- =="hide"&&a.hide();b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(){f=="hide"&& ---> a <--- .hide();b.effects.restore

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"&&a.hide(); ---> b <--- .effects.restore(a,i);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();b.effects.restore( ---> a <--- ,i);b.effects.removeWrapper(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.effects.restore(a, ---> i <--- );b.effects.removeWrapper(a)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(a,i); ---> b <--- .effects.removeWrapper(a);e.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
i);b.effects.removeWrapper( ---> a <--- );e.callback&&e.callback.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b.effects.removeWrapper(a); ---> e <--- .callback&&e.callback.apply(a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(a);e.callback&& ---> e <--- .callback.apply(a[0],

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.callback&&e.callback.apply( ---> a <--- [0],arguments);a.dequeue

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(a[0],arguments); ---> a <--- .dequeue();}});}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(c){ ---> c <--- .effects.drop=function(d){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =c(this),h=["position"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> c <--- (this),h=["position","top"

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=c(this), ---> h <--- =["position","top","left","opacity"]

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"position","top","left","opacity"], ---> e <--- =c.effects.setMode(a,d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"top","left","opacity"],e= ---> c <--- .effects.setMode(a,d.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=c.effects.setMode( ---> a <--- ,d.options.mode||"hide"),

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setMode(a, ---> d <--- .options.mode||"hide"),b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d.options.mode||"hide"), ---> b <--- =d.options.direction||"left";c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode||"hide"),b= ---> d <--- .options.direction||"left";c.effects

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.options.direction||"left"; ---> c <--- .effects.save(a,h);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||"left";c.effects.save( ---> a <--- ,h);a.show();

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.effects.save(a, ---> h <--- );a.show();c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(a,h); ---> a <--- .show();c.effects.createWrapper

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h);a.show(); ---> c <--- .effects.createWrapper(a);var f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.effects.createWrapper( ---> a <--- );var f=b=="up"||b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.createWrapper(a);var  ---> f <--- =b=="up"||b=="down"?"top"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.createWrapper(a);var f= ---> b <--- =="up"||b=="down"?"top":"left"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);var f=b=="up"|| ---> b <--- =="down"?"top":"left";b=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||b=="down"?"top":"left"; ---> b <--- =b=="up"||b=="left"?"pos"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="down"?"top":"left";b= ---> b <--- =="up"||b=="left"?"pos":"neg"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:"left";b=b=="up"|| ---> b <--- =="left"?"pos":"neg";var g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b=="left"?"pos":"neg";var  ---> g <--- =d.options.distance||(f==

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"left"?"pos":"neg";var g= ---> d <--- .options.distance||(f=="top"?

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
g=d.options.distance||( ---> f <--- =="top"?a.outerHeight({margin:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options.distance||(f=="top"? ---> a <--- .outerHeight({margin:true})/

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{margin:true})/2: ---> a <--- .outerWidth({margin:true})/

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
true})/2);if( ---> e <--- =="show"){a.css("opacity",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(e=="show"){ ---> a <--- .css("opacity",0).css(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
css("opacity",0).css( ---> f <--- ,b=="pos"?-g:g)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"opacity",0).css(f, ---> b <--- =="pos"?-g:g);}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
css(f,b=="pos"?- ---> g <--- :g);}var i={opacity

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
f,b=="pos"?-g: ---> g <--- );}var i={opacity:e

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
?-g:g);}var  ---> i <--- ={opacity:e=="show"?1:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);}var i={opacity: ---> e <--- =="show"?1:0};i[

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
e=="show"?1:0}; ---> i <--- [f]=(e=="show"?b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"show"?1:0};i[ ---> f <--- ]=(e=="show"?b=="pos"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0};i[f]=( ---> e <--- =="show"?b=="pos"?"+=":"-="

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[f]=(e=="show"? ---> b <--- =="pos"?"+=":"-=":b=="pos"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?b=="pos"?"+=":"-=": ---> b <--- =="pos"?"-=":"+=")+g;

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b=="pos"?"-=":"+=")+ ---> g <--- ;a.animate(i,{queue:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"-=":"+=")+g; ---> a <--- .animate(i,{queue:false,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"+=")+g;a.animate( ---> i <--- ,{queue:false,duration:d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
i,{queue:false,duration: ---> d <--- .duration,easing:d.options.easing

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,duration:d.duration,easing: ---> d <--- .options.easing,complete:function()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,complete:function(){ ---> e <--- =="hide"&&a.hide();c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(){e=="hide"&& ---> a <--- .hide();c.effects.restore

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"&&a.hide(); ---> c <--- .effects.restore(a,h);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.effects.restore( ---> a <--- ,h);c.effects.removeWrapper(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.effects.restore(a, ---> h <--- );c.effects.removeWrapper(a)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(a,h); ---> c <--- .effects.removeWrapper(a);d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h);c.effects.removeWrapper( ---> a <--- );d.callback&&d.callback.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.effects.removeWrapper(a); ---> d <--- .callback&&d.callback.apply(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(a);d.callback&& ---> d <--- .callback.apply(this,arguments);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
callback.apply(this,arguments); ---> a <--- .dequeue();}});}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(j){ ---> j <--- .effects.explode=function(a){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> c <--- =a.options.pieces?Math.round

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var c= ---> a <--- .options.pieces?Math.round(Math

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?Math.round(Math.sqrt( ---> a <--- .options.pieces)):3,d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.pieces)):3, ---> d <--- =a.options.pieces?Math.round

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.pieces)):3,d= ---> a <--- .options.pieces?Math.round(Math

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
?Math.round(Math.sqrt( ---> a <--- .options.pieces)):3;a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.pieces)):3; ---> a <--- .options.mode=a.options.mode

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:3;a.options.mode= ---> a <--- .options.mode=="toggle"?j(this

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.options.mode=="toggle"? ---> j <--- (this).is(":visible")?"hide"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
is(":visible")?"hide":"show": ---> a <--- .options.mode;var b=j(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"show":a.options.mode;var  ---> b <--- =j(this).show().

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.mode;var b= ---> j <--- (this).show().css(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
).css("visibility","hidden"), ---> g <--- =b.offset();g.top

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
css("visibility","hidden"),g= ---> b <--- .offset();g.top-=parseInt

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,g=b.offset(); ---> g <--- .top-=parseInt(b.css("marginTop"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();g.top-=parseInt( ---> b <--- .css("marginTop"),10)||0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
("marginTop"),10)||0; ---> g <--- .left-=parseInt(b.css("marginLeft"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||0;g.left-=parseInt( ---> b <--- .css("marginLeft"),10)||0

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,10)||0;for(var  ---> h <--- =b.outerWidth(true),i=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
)||0;for(var h= ---> b <--- .outerWidth(true),i=b.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
h=b.outerWidth(true), ---> i <--- =b.outerHeight(true),e=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.outerWidth(true),i= ---> b <--- .outerHeight(true),e=0;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
i=b.outerHeight(true), ---> e <--- =0;e<c;e++)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
outerHeight(true),e=0; ---> e <--- <c;e++){for(var 

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
true),e=0;e< ---> c <--- ;e++){for(var f=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=0;e<c; ---> e <--- ++){for(var f=0;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c;e++){for(var  ---> f <--- =0;f<d;f++)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
){for(var f=0; ---> f <--- <d;f++){b.clone

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var f=0;f< ---> d <--- ;f++){b.clone()

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=0;f<d; ---> f <--- ++){b.clone().appendTo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;f<d;f++){ ---> b <--- .clone().appendTo("body").

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"absolute",visibility:"visible",left:- ---> f <--- *(h/d),top:-

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:"visible",left:-f*( ---> h <--- /d),top:-e*(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:-f*(h/ ---> d <--- ),top:-e*(i/

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(h/d),top:- ---> e <--- *(i/c)}).parent

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
d),top:-e*( ---> i <--- /c)}).parent().

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,top:-e*(i/ ---> c <--- )}).parent().addClass(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:"absolute",overflow:"hidden",width: ---> h <--- /d,height:i/c,left

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,overflow:"hidden",width:h/ ---> d <--- ,height:i/c,left:g

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:h/d,height: ---> i <--- /c,left:g.left+f

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:h/d,height:i/ ---> c <--- ,left:g.left+f*(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,height:i/c,left: ---> g <--- .left+f*(h/d)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
/c,left:g.left+ ---> f <--- *(h/d)+(a.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
left:g.left+f*( ---> h <--- /d)+(a.options.mode

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
g.left+f*(h/ ---> d <--- )+(a.options.mode=="show"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f*(h/d)+( ---> a <--- .options.mode=="show"?(f-

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.mode=="show"?( ---> f <--- -Math.floor(d/2))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"show"?(f-Math.floor( ---> d <--- /2))*(h/d)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
floor(d/2))*( ---> h <--- /d):0),top:g

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d/2))*(h/ ---> d <--- ):0),top:g.top

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
/d):0),top: ---> g <--- .top+e*(i/c)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
0),top:g.top+ ---> e <--- *(i/c)+(a.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
top:g.top+e*( ---> i <--- /c)+(a.options.mode

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
g.top+e*(i/ ---> c <--- )+(a.options.mode=="show"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e*(i/c)+( ---> a <--- .options.mode=="show"?(e-

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.mode=="show"?( ---> e <--- -Math.floor(c/2))

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"show"?(e-Math.floor( ---> c <--- /2))*(i/c)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
floor(c/2))*( ---> i <--- /c):0),opacity:a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c/2))*(i/ ---> c <--- ):0),opacity:a.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
/c):0),opacity: ---> a <--- .options.mode=="show"?0:1

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
1}).animate({left: ---> g <--- .left+f*(h/d)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
animate({left:g.left+ ---> f <--- *(h/d)+(a.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
left:g.left+f*( ---> h <--- /d)+(a.options.mode

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
g.left+f*(h/ ---> d <--- )+(a.options.mode=="show"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
f*(h/d)+( ---> a <--- .options.mode=="show"?0:(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode=="show"?0:( ---> f <--- -Math.floor(d/2))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
0:(f-Math.floor( ---> d <--- /2))*(h/d)

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
floor(d/2))*( ---> h <--- /d)),top:g.top

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d/2))*(h/ ---> d <--- )),top:g.top+e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(h/d)),top: ---> g <--- .top+e*(i/c)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
)),top:g.top+ ---> e <--- *(i/c)+(a.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
top:g.top+e*( ---> i <--- /c)+(a.options.mode

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
g.top+e*(i/ ---> c <--- )+(a.options.mode=="show"

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e*(i/c)+( ---> a <--- .options.mode=="show"?0:(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode=="show"?0:( ---> e <--- -Math.floor(c/2))

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
0:(e-Math.floor( ---> c <--- /2))*(i/c)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
floor(c/2))*( ---> i <--- /c)),opacity:a.options

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
c/2))*(i/ ---> c <--- )),opacity:a.options.mode

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(i/c)),opacity: ---> a <--- .options.mode=="show"?1:0

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
mode=="show"?1:0}, ---> a <--- .duration||500);}}setTimeout(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}setTimeout(function(){ ---> a <--- .options.mode=="show"?b.css

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.options.mode=="show"? ---> b <--- .css({visibility:"visible"}):

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
css({visibility:"visible"}): ---> b <--- .css({visibility:"visible"}).

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:"visible"}).hide(); ---> a <--- .callback&&a.callback.apply(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.hide();a.callback&& ---> a <--- .callback.apply(b[0])

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.callback&&a.callback.apply( ---> b <--- [0]);b.dequeue()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.apply(b[0]); ---> b <--- .dequeue();j("div.ui-effects-explode").

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
]);b.dequeue(); ---> j <--- ("div.ui-effects-explode").remove();},

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"div.ui-effects-explode").remove();}, ---> a <--- .duration||500);});}

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(b){ ---> b <--- .effects.fade=function(a){

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> c <--- =b(this),d=b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var c= ---> b <--- (this),d=b.effects.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{var c=b(this), ---> d <--- =b.effects.setMode(c,a

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c=b(this),d= ---> b <--- .effects.setMode(c,a.options

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=b.effects.setMode( ---> c <--- ,a.options.mode||"hide");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.effects.setMode(c, ---> a <--- .options.mode||"hide");c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.mode||"hide"); ---> c <--- .animate({opacity:d},{

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);c.animate({opacity: ---> d <--- },{queue:false,duration:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
},{queue:false,duration: ---> a <--- .duration,easing:a.options.easing

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,duration:a.duration,easing: ---> a <--- .options.easing,complete:function()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,complete:function(){ ---> a <--- .callback&&a.callback.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(){a.callback&& ---> a <--- .callback.apply(this,arguments);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
callback.apply(this,arguments); ---> c <--- .dequeue();}});}

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(c){ ---> c <--- .effects.fold=function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> b <--- =c(this),j=["position"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var b= ---> c <--- (this),j=["position","top"

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
{var b=c(this), ---> j <--- =["position","top","left"],d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=["position","top","left"], ---> d <--- =c.effects.setMode(b,a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"position","top","left"],d= ---> c <--- .effects.setMode(b,a.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=c.effects.setMode( ---> b <--- ,a.options.mode||"hide"),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setMode(b, ---> a <--- .options.mode||"hide"),g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.mode||"hide"), ---> g <--- =a.options.size||15,h

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode||"hide"),g= ---> a <--- .options.size||15,h=!

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.options.size||15, ---> h <--- =!!a.options.horizFirst,k

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.size||15,h=!! ---> a <--- .options.horizFirst,k=a.duration

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
=!!a.options.horizFirst, ---> k <--- =a.duration?a.duration/2

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
!a.options.horizFirst,k= ---> a <--- .duration?a.duration/2:c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.horizFirst,k=a.duration? ---> a <--- .duration/2:c.fx.speeds

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.duration?a.duration/2: ---> c <--- .fx.speeds._default/2;c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.fx.speeds._default/2; ---> c <--- .effects.save(b,j);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
/2;c.effects.save( ---> b <--- ,j);b.show();

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.effects.save(b, ---> j <--- );b.show();var e

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(b,j); ---> b <--- .show();var e=c.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);b.show();var  ---> e <--- =c.effects.createWrapper(b).

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
b.show();var e= ---> c <--- .effects.createWrapper(b).css(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
var e=c.effects.createWrapper( ---> b <--- ).css({overflow:"hidden"})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
css({overflow:"hidden"}), ---> f <--- =d=="show"!=h,l=f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{overflow:"hidden"}),f= ---> d <--- =="show"!=h,l=f?[

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}),f=d=="show"!= ---> h <--- ,l=f?["width","height"]

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
,f=d=="show"!=h, ---> l <--- =f?["width","height"]:[

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=d=="show"!=h,l= ---> f <--- ?["width","height"]:["height",

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"height"]:["height","width"]; ---> f <--- =f?[e.width(),

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:["height","width"];f= ---> f <--- ?[e.width(),e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,"width"];f=f?[ ---> e <--- .width(),e.height()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
f?[e.width(), ---> e <--- .height()]:[e.height

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
,e.height()]:[ ---> e <--- .height(),e.width()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
]:[e.height(), ---> e <--- .width()];var i=/([0-9]+)%/

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,e.width()];var  ---> i <--- =/([0-9]+)%/.exec(g);if(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
];var i=/([0-9]+)%/.exec( ---> g <--- );if(i){g=parseInt

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
/([0-9]+)%/.exec(g);if( ---> i <--- ){g=parseInt(i[1]

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
(g);if(i){ ---> g <--- =parseInt(i[1],10)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
if(i){g=parseInt( ---> i <--- [1],10)/100*f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[1],10)/100* ---> f <--- [d=="hide"?0:1];

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
],10)/100*f[ ---> d <--- =="hide"?0:1];}if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
?0:1];}if( ---> d <--- =="show"){e.css(h?

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(d=="show"){ ---> e <--- .css(h?{height:0,

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="show"){e.css( ---> h <--- ?{height:0,width:g}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
h?{height:0,width: ---> g <--- }:{height:g,width:0

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:g}:{height: ---> g <--- ,width:0});}h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
g,width:0});} ---> h <--- ={};i={};h

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
});}h={}; ---> i <--- ={};h[l[0]

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
={};i={}; ---> h <--- [l[0]]=d=="show"

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
};i={};h[ ---> l <--- [0]]=d=="show"?f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;h[l[0]]= ---> d <--- =="show"?f[0]:g;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]]=d=="show"? ---> f <--- [0]:g;i[l[

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
d=="show"?f[0]: ---> g <--- ;i[l[1]]=d

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"show"?f[0]:g; ---> i <--- [l[1]]=d=="show"

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
f[0]:g;i[ ---> l <--- [1]]=d=="show"?f

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;i[l[1]]= ---> d <--- =="show"?f[1]:0;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
[1]]=d=="show"? ---> f <--- [1]:0;e.animate(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
"show"?f[1]:0; ---> e <--- .animate(h,k,a.options

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
1]:0;e.animate( ---> h <--- ,k,a.options.easing).

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
:0;e.animate(h, ---> k <--- ,a.options.easing).animate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;e.animate(h,k, ---> a <--- .options.easing).animate(i,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.easing).animate( ---> i <--- ,k,a.options.easing,function

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
options.easing).animate(i, ---> k <--- ,a.options.easing,function()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
easing).animate(i,k, ---> a <--- .options.easing,function(){d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.easing,function(){ ---> d <--- =="hide"&&b.hide();c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){d=="hide"&& ---> b <--- .hide();c.effects.restore

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"&&b.hide(); ---> c <--- .effects.restore(b,j);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.effects.restore( ---> b <--- ,j);c.effects.removeWrapper(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.effects.restore(b, ---> j <--- );c.effects.removeWrapper(b)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(b,j); ---> c <--- .effects.removeWrapper(b);a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
j);c.effects.removeWrapper( ---> b <--- );a.callback&&a.callback.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.effects.removeWrapper(b); ---> a <--- .callback&&a.callback.apply(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(b);a.callback&& ---> a <--- .callback.apply(b[0],

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.callback&&a.callback.apply( ---> b <--- [0],arguments);b.dequeue

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b[0],arguments); ---> b <--- .dequeue();});})

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(b){ ---> b <--- .effects.highlight=function(c){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =b(this),e=["backgroundImage"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> b <--- (this),e=["backgroundImage","backgroundColor"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=b(this), ---> e <--- =["backgroundImage","backgroundColor","opacity"],d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=["backgroundImage","backgroundColor","opacity"], ---> d <--- =b.effects.setMode(a,c

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"backgroundImage","backgroundColor","opacity"],d= ---> b <--- .effects.setMode(a,c.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=b.effects.setMode( ---> a <--- ,c.options.mode||"show"),

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.effects.setMode(a, ---> c <--- .options.mode||"show"),f=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
c.options.mode||"show"), ---> f <--- ={backgroundColor:a.css("backgroundColor")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||"show"),f={backgroundColor: ---> a <--- .css("backgroundColor")};if(d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("backgroundColor")};if( ---> d <--- =="hide"){f.opacity=0;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
};if(d=="hide"){ ---> f <--- .opacity=0;}b.effects.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
){f.opacity=0;} ---> b <--- .effects.save(a,e);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
0;}b.effects.save( ---> a <--- ,e);a.show().

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}b.effects.save(a, ---> e <--- );a.show().css(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(a,e); ---> a <--- .show().css({backgroundImage:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
css({backgroundImage:"none",backgroundColor: ---> c <--- .options.color||"#ffff99"}).animate

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.color||"#ffff99"}).animate( ---> f <--- ,{queue:false,duration:c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
f,{queue:false,duration: ---> c <--- .duration,easing:c.options.easing

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,duration:c.duration,easing: ---> c <--- .options.easing,complete:function()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,complete:function(){ ---> d <--- =="hide"&&a.hide();b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(){d=="hide"&& ---> a <--- .hide();b.effects.restore

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"&&a.hide(); ---> b <--- .effects.restore(a,e);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();b.effects.restore( ---> a <--- ,e);d=="show"&&!b

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.effects.restore(a, ---> e <--- );d=="show"&&!b.support

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(a,e); ---> d <--- =="show"&&!b.support.opacity&&

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,e);d=="show"&&! ---> b <--- .support.opacity&&this.style.removeAttribute

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
this.style.removeAttribute("filter"); ---> c <--- .callback&&c.callback.apply(this

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
removeAttribute("filter");c.callback&& ---> c <--- .callback.apply(this,arguments);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
callback.apply(this,arguments); ---> a <--- .dequeue();}});}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(d){ ---> d <--- .effects.pulsate=function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> b <--- =d(this),c=d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var b= ---> d <--- (this),c=d.effects.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{var b=d(this), ---> c <--- =d.effects.setMode(b,a

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
b=d(this),c= ---> d <--- .effects.setMode(b,a.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,c=d.effects.setMode( ---> b <--- ,a.options.mode||"show");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.effects.setMode(b, ---> a <--- .options.mode||"show");times=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.mode||"show");times=( ---> a <--- .options.times||5)*2-

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
5)*2-1;duration= ---> a <--- .duration?a.duration/2:d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
-1;duration=a.duration? ---> a <--- .duration/2:d.fx.speeds

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.duration?a.duration/2: ---> d <--- .fx.speeds._default/2;isVisible

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.speeds._default/2;isVisible= ---> b <--- .is(":visible");animateTo=0;

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;if(!isVisible){ ---> b <--- .css("opacity",0).show(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);animateTo=1;}if( ---> c <--- =="hide"&&isVisible||c=="show"&&!

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(c=="hide"&&isVisible|| ---> c <--- =="show"&&!isVisible){times--;

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
isVisible){times--;}for( ---> c <--- =0;c<times;c++)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
--;}for(c=0; ---> c <--- <times;c++){b.animate

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
(c=0;c<times; ---> c <--- ++){b.animate({opacity:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;c<times;c++){ ---> b <--- .animate({opacity:animateTo},duration

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
({opacity:animateTo},duration, ---> a <--- .options.easing);animateTo=(animateTo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(animateTo+1)%2;} ---> b <--- .animate({opacity:animateTo},duration

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
({opacity:animateTo},duration, ---> a <--- .options.easing,function(){animateTo

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(){animateTo==0&& ---> b <--- .hide();a.callback&&a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
==0&&b.hide(); ---> a <--- .callback&&a.callback.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.hide();a.callback&& ---> a <--- .callback.apply(this,arguments);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,arguments);}); ---> b <--- .queue("fx",function(){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("fx",function(){ ---> b <--- .dequeue();}).dequeue(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(c){ ---> c <--- .effects.puff=function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =c(this),e=c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> c <--- (this),e=c.effects.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=c(this), ---> e <--- =c.effects.setMode(a,b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a=c(this),e= ---> c <--- .effects.setMode(a,b.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=c.effects.setMode( ---> a <--- ,b.options.mode||"hide"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setMode(a, ---> b <--- .options.mode||"hide"),g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.mode||"hide"), ---> g <--- =parseInt(b.options.percent,10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
mode||"hide"),g=parseInt( ---> b <--- .options.percent,10)||150,

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
options.percent,10)||150, ---> h <--- =g/100,i={height:

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
percent,10)||150,h= ---> g <--- /100,i={height:a.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
||150,h=g/100, ---> i <--- ={height:a.height(),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g/100,i={height: ---> a <--- .height(),width:a.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.height(),width: ---> a <--- .width()};c.extend(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
width:a.width()}; ---> c <--- .extend(b.options,{fade:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width()};c.extend( ---> b <--- .options,{fade:true,mode:

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
options,{fade:true,mode: ---> e <--- ,percent:e=="hide"?g:100

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
:true,mode:e,percent: ---> e <--- =="hide"?g:100,from:e

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
:e,percent:e=="hide"? ---> g <--- :100,from:e=="hide"?i

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"?g:100,from: ---> e <--- =="hide"?i:{height:i.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
:100,from:e=="hide"? ---> i <--- :{height:i.height*h,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
e=="hide"?i:{height: ---> i <--- .height*h,width:i.width

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
i:{height:i.height* ---> h <--- ,width:i.width*h}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
:i.height*h,width: ---> i <--- .width*h}});a.

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
*h,width:i.width* ---> h <--- }});a.effect("scale",

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
i.width*h}}); ---> a <--- .effect("scale",b.options,b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
});a.effect("scale", ---> b <--- .options,b.duration,b.callback

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.effect("scale",b.options, ---> b <--- .duration,b.callback);a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,b.options,b.duration, ---> b <--- .callback);a.dequeue();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.duration,b.callback); ---> a <--- .dequeue();});};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
dequeue();});}; ---> c <--- .effects.scale=function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =c(this),e=c.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> c <--- (this),e=c.extend(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=c(this), ---> e <--- =c.extend(true,{},

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a=c(this),e= ---> c <--- .extend(true,{},b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.extend(true,{}, ---> b <--- .options),g=c.effects.

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
,{},b.options), ---> g <--- =c.effects.setMode(a,b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
},b.options),g= ---> c <--- .effects.setMode(a,b.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,g=c.effects.setMode( ---> a <--- ,b.options.mode||"effect"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setMode(a, ---> b <--- .options.mode||"effect"),h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.mode||"effect"), ---> h <--- =parseInt(b.options.percent,10

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
mode||"effect"),h=parseInt( ---> b <--- .options.percent,10)||(parseInt

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.percent,10)||(parseInt( ---> b <--- .options.percent,10)==0?

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
percent,10)==0?0: ---> g <--- =="hide"?0:100),i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
g=="hide"?0:100), ---> i <--- =b.options.direction||"both",f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"hide"?0:100),i= ---> b <--- .options.direction||"both",f=b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.direction||"both", ---> f <--- =b.options.origin;if(g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.direction||"both",f= ---> b <--- .options.origin;if(g!="effect"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.origin;if( ---> g <--- !="effect"){e.origin=f||

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
origin;if(g!="effect"){ ---> e <--- .origin=f||["middle","center"]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
g!="effect"){e.origin= ---> f <--- ||["middle","center"];e.restore

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=f||["middle","center"]; ---> e <--- .restore=true;}f={height

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
];e.restore=true;} ---> f <--- ={height:a.height(),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;}f={height: ---> a <--- .height(),width:a.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.height(),width: ---> a <--- .width()};a.from=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width:a.width()}; ---> a <--- .from=b.options.from||(

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width()};a.from= ---> b <--- .options.from||(g=="show"?

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
from=b.options.from||( ---> g <--- =="show"?{height:0,width:

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
height:0,width:0}: ---> f <--- );h={y:i!="horizontal"

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:0}:f); ---> h <--- ={y:i!="horizontal"?h/

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
:f);h={y: ---> i <--- !="horizontal"?h/100:1,x

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
h={y:i!="horizontal"? ---> h <--- /100:1,x:i!="vertical"

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
?h/100:1,x: ---> i <--- !="vertical"?h/100:1};

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
:1,x:i!="vertical"? ---> h <--- /100:1};a.to=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"vertical"?h/100:1}; ---> a <--- .to={height:f.height*

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
};a.to={height: ---> f <--- .height*h.y,width:f

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
to={height:f.height* ---> h <--- .y,width:f.width*h

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.height*h.y,width: ---> f <--- .width*h.x};if(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.y,width:f.width* ---> h <--- .x};if(b.options.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width*h.x};if( ---> b <--- .options.fade){if(g==

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.fade){if( ---> g <--- =="show"){a.from.opacity=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(g=="show"){ ---> a <--- .from.opacity=0;a.to

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.from.opacity=0; ---> a <--- .to.opacity=1;}if(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
to.opacity=1;}if( ---> g <--- =="hide"){a.from.opacity=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(g=="hide"){ ---> a <--- .from.opacity=1;a.to

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.from.opacity=1; ---> a <--- .to.opacity=0;}}e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.to.opacity=0;}} ---> e <--- .from=a.from;e.to

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;}}e.from= ---> a <--- .from;e.to=a.to

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
}e.from=a.from; ---> e <--- .to=a.to;e.mode

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.from;e.to= ---> a <--- .to;e.mode=g;a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
;e.to=a.to; ---> e <--- .mode=g;a.effect("size"

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.to;e.mode= ---> g <--- ;a.effect("size",e,b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.to;e.mode=g; ---> a <--- .effect("size",e,b.duration

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=g;a.effect("size", ---> e <--- ,b.duration,b.callback);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;a.effect("size",e, ---> b <--- .duration,b.callback);a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
("size",e,b.duration, ---> b <--- .callback);a.dequeue();

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
b.duration,b.callback); ---> a <--- .dequeue();});};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
dequeue();});}; ---> c <--- .effects.size=function(b){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =c(this),e=["position"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> c <--- (this),e=["position","top"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=c(this), ---> e <--- =["position","top","left","width",

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"width","height","overflow","opacity"], ---> g <--- =["position","top","left","overflow",

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
"top","left","overflow","opacity"], ---> h <--- =["width","height","overflow"],i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=["width","height","overflow"], ---> i <--- =["fontSize"],f=["borderTopWidth",

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"overflow"],i=["fontSize"], ---> f <--- =["borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"]

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"borderTopWidth","borderBottomWidth","paddingTop","paddingBottom"], ---> k <--- =["borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"]

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
"borderLeftWidth","borderRightWidth","paddingLeft","paddingRight"], ---> p <--- =c.effects.setMode(a,b

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"borderRightWidth","paddingLeft","paddingRight"],p= ---> c <--- .effects.setMode(a,b.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,p=c.effects.setMode( ---> a <--- ,b.options.mode||"effect"),

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setMode(a, ---> b <--- .options.mode||"effect"),n=

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
b.options.mode||"effect"), ---> n <--- =b.options.restore||false,m

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode||"effect"),n= ---> b <--- .options.restore||false,m=b

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.restore||false, ---> m <--- =b.options.scale||"both",l

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.restore||false,m= ---> b <--- .options.scale||"both",l=b

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.scale||"both", ---> l <--- =b.options.origin,j={

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.scale||"both",l= ---> b <--- .options.origin,j={height:

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
,l=b.options.origin, ---> j <--- ={height:a.height(),

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options.origin,j={height: ---> a <--- .height(),width:a.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:a.height(),width: ---> a <--- .width()};a.from=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
width:a.width()}; ---> a <--- .from=b.options.from||j

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
width()};a.from= ---> b <--- .options.from||j;a.to

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.from=b.options.from|| ---> j <--- ;a.to=b.options.to

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
=b.options.from||j; ---> a <--- .to=b.options.to||j

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.from||j;a.to= ---> b <--- .options.to||j;if(l

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
.to=b.options.to|| ---> j <--- ;if(l){l=c.

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.to||j;if( ---> l <--- ){l=c.effects.getBaseline(

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
to||j;if(l){ ---> l <--- =c.effects.getBaseline(l,j

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
j;if(l){l= ---> c <--- .effects.getBaseline(l,j);

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
{l=c.effects.getBaseline( ---> l <--- ,j);a.from.top=

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.getBaseline(l, ---> j <--- );a.from.top=(j

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.getBaseline(l,j); ---> a <--- .from.top=(j.height-

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
);a.from.top=( ---> j <--- .height-a.from.height)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.top=(j.height- ---> a <--- .from.height)*l.y;

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
height-a.from.height)* ---> l <--- .y;a.from.left=(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.height)*l.y; ---> a <--- .from.left=(j.width-

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
y;a.from.left=( ---> j <--- .width-a.from.width)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.left=(j.width- ---> a <--- .from.width)*l.x;

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
width-a.from.width)* ---> l <--- .x;a.to.top=(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.width)*l.x; ---> a <--- .to.top=(j.height-

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
x;a.to.top=( ---> j <--- .height-a.to.height)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
to.top=(j.height- ---> a <--- .to.height)*l.y;

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
height-a.to.height)* ---> l <--- .y;a.to.left=(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
to.height)*l.y; ---> a <--- .to.left=(j.width-

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
y;a.to.left=( ---> j <--- .width-a.to.width)*

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
to.left=(j.width- ---> a <--- .to.width)*l.x;

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
width-a.to.width)* ---> l <--- .x;}var d={from:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
width)*l.x;}var  ---> d <--- ={from:{y:a.from

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
var d={from:{y: ---> a <--- .from.height/j.height,x

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
{y:a.from.height/ ---> j <--- .height,x:a.from.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.height/j.height,x: ---> a <--- .from.width/j.width},

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
,x:a.from.width/ ---> j <--- .width},to:{y:a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.width},to:{y: ---> a <--- .to.height/j.height,x

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
{y:a.to.height/ ---> j <--- .height,x:a.to.width

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.height/j.height,x: ---> a <--- .to.width/j.width}}

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
,x:a.to.width/ ---> j <--- .width}};if(m=="box"

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
/j.width}};if( ---> m <--- =="box"||m=="both"){if(

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
}};if(m=="box"|| ---> m <--- =="both"){if(d.from.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"box"||m=="both"){if( ---> d <--- .from.y!=d.to.y

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(d.from.y!= ---> d <--- .to.y){e=e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
y!=d.to.y){ ---> e <--- =e.concat(f);a.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d.to.y){e= ---> e <--- .concat(f);a.from=

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
y){e=e.concat( ---> f <--- );a.from=c.effects.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e=e.concat(f); ---> a <--- .from=c.effects.setTransition(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
concat(f);a.from= ---> c <--- .effects.setTransition(a,f,d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.from=c.effects.setTransition( ---> a <--- ,f,d.from.y,a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(a, ---> f <--- ,d.from.y,a.from

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(a,f, ---> d <--- .from.y,a.from);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,f,d.from.y, ---> a <--- .from);a.to=c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.y,a.from); ---> a <--- .to=c.effects.setTransition(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.from);a.to= ---> c <--- .effects.setTransition(a,f,d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.to=c.effects.setTransition( ---> a <--- ,f,d.to.y,a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(a, ---> f <--- ,d.to.y,a.to

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(a,f, ---> d <--- .to.y,a.to);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,f,d.to.y, ---> a <--- .to);}if(d.from

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,a.to);}if( ---> d <--- .from.x!=d.to.x

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(d.from.x!= ---> d <--- .to.x){e=e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
x!=d.to.x){ ---> e <--- =e.concat(k);a.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d.to.x){e= ---> e <--- .concat(k);a.from=

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
x){e=e.concat( ---> k <--- );a.from=c.effects.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e=e.concat(k); ---> a <--- .from=c.effects.setTransition(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
concat(k);a.from= ---> c <--- .effects.setTransition(a,k,d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.from=c.effects.setTransition( ---> a <--- ,k,d.from.x,a

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(a, ---> k <--- ,d.from.x,a.from

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(a,k, ---> d <--- .from.x,a.from);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,k,d.from.x, ---> a <--- .from);a.to=c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.x,a.from); ---> a <--- .to=c.effects.setTransition(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.from);a.to= ---> c <--- .effects.setTransition(a,k,d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.to=c.effects.setTransition( ---> a <--- ,k,d.to.x,a

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(a, ---> k <--- ,d.to.x,a.to

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(a,k, ---> d <--- .to.x,a.to);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,k,d.to.x, ---> a <--- .to);}}if(m==

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
a.to);}}if( ---> m <--- =="content"||m=="both"){if(

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}if(m=="content"|| ---> m <--- =="both"){if(d.from.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"content"||m=="both"){if( ---> d <--- .from.y!=d.to.y

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(d.from.y!= ---> d <--- .to.y){e=e.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
y!=d.to.y){ ---> e <--- =e.concat(i);a.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
d.to.y){e= ---> e <--- .concat(i);a.from=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
y){e=e.concat( ---> i <--- );a.from=c.effects.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e=e.concat(i); ---> a <--- .from=c.effects.setTransition(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
concat(i);a.from= ---> c <--- .effects.setTransition(a,i,d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.from=c.effects.setTransition( ---> a <--- ,i,d.from.y,a

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(a, ---> i <--- ,d.from.y,a.from

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(a,i, ---> d <--- .from.y,a.from);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,i,d.from.y, ---> a <--- .from);a.to=c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.y,a.from); ---> a <--- .to=c.effects.setTransition(a

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.from);a.to= ---> c <--- .effects.setTransition(a,i,d

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.to=c.effects.setTransition( ---> a <--- ,i,d.to.y,a

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(a, ---> i <--- ,d.to.y,a.to

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(a,i, ---> d <--- .to.y,a.to);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,i,d.to.y, ---> a <--- .to);}}c.effects.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
y,a.to);}} ---> c <--- .effects.save(a,n?e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}c.effects.save( ---> a <--- ,n?e:g);a.

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
}c.effects.save(a, ---> n <--- ?e:g);a.show(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.save(a,n? ---> e <--- :g);a.show();

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.save(a,n?e: ---> g <--- );a.show();c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
a,n?e:g); ---> a <--- .show();c.effects.createWrapper

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
g);a.show(); ---> c <--- .effects.createWrapper(a);a.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.effects.createWrapper( ---> a <--- );a.css("overflow","hidden")

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
c.effects.createWrapper(a); ---> a <--- .css("overflow","hidden").css(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
css("overflow","hidden").css( ---> a <--- .from);if(m=="content"||

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
css(a.from);if( ---> m <--- =="content"||m=="both"){f=

[WARNING] The symbol m is declared but is apparently never used.
This code can probably be written in a more compact way.
from);if(m=="content"|| ---> m <--- =="both"){f=f.concat(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
m=="content"||m=="both"){ ---> f <--- =f.concat(["marginTop","marginBottom"]

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"content"||m=="both"){f= ---> f <--- .concat(["marginTop","marginBottom"]).

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
["marginTop","marginBottom"]).concat( ---> i <--- );k=k.concat(["marginLeft"

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"marginBottom"]).concat(i); ---> k <--- =k.concat(["marginLeft","marginRight"]

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
).concat(i);k= ---> k <--- .concat(["marginLeft","marginRight"]);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
concat(["marginLeft","marginRight"]); ---> h <--- =e.concat(f).concat(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
["marginLeft","marginRight"]);h= ---> e <--- .concat(f).concat(k)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
]);h=e.concat( ---> f <--- ).concat(k);a.find

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
e.concat(f).concat( ---> k <--- );a.find("*[width]").each

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(f).concat(k); ---> a <--- .find("*[width]").each(function(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(function(){child= ---> c <--- (this);n&&c.effects.

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
){child=c(this); ---> n <--- &&c.effects.save(child,h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
child=c(this);n&& ---> c <--- .effects.save(child,h);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.effects.save(child, ---> h <--- );var o={height:child.

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
.save(child,h);var  ---> o <--- ={height:child.height(),

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
};child.from={height: ---> o <--- .height*d.from.y,width

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
from={height:o.height* ---> d <--- .from.y,width:o.width

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
*d.from.y,width: ---> o <--- .width*d.from.x};

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.y,width:o.width* ---> d <--- .from.x};child.to=

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
};child.to={height: ---> o <--- .height*d.to.y,width

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
to={height:o.height* ---> d <--- .to.y,width:o.width

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
*d.to.y,width: ---> o <--- .width*d.to.x};

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.y,width:o.width* ---> d <--- .to.x};if(d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
d.to.x};if( ---> d <--- .from.y!=d.to.y

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(d.from.y!= ---> d <--- .to.y){child.from=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
to.y){child.from= ---> c <--- .effects.setTransition(child,f,d

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(child, ---> f <--- ,d.from.y,child.from

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(child,f, ---> d <--- .from.y,child.from);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
child.from);child.to= ---> c <--- .effects.setTransition(child,f,d

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(child, ---> f <--- ,d.to.y,child.to

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(child,f, ---> d <--- .to.y,child.to);

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,child.to);}if( ---> d <--- .from.x!=d.to.x

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(d.from.x!= ---> d <--- .to.x){child.from=

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
to.x){child.from= ---> c <--- .effects.setTransition(child,k,d

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(child, ---> k <--- ,d.from.x,child.from

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(child,k, ---> d <--- .from.x,child.from);

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
child.from);child.to= ---> c <--- .effects.setTransition(child,k,d

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setTransition(child, ---> k <--- ,d.to.x,child.to

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.setTransition(child,k, ---> d <--- .to.x,child.to);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;child.animate(child.to, ---> b <--- .duration,b.options.easing,function

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(child.to,b.duration, ---> b <--- .options.easing,function(){n

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.easing,function(){ ---> n <--- &&c.effects.restore(child,h

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,function(){n&& ---> c <--- .effects.restore(child,h);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
&&c.effects.restore(child, ---> h <--- );});});}a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);});});} ---> a <--- .animate(a.to,{queue:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;});}a.animate( ---> a <--- .to,{queue:false,duration:

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
to,{queue:false,duration: ---> b <--- .duration,easing:b.options.easing

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,duration:b.duration,easing: ---> b <--- .options.easing,complete:function()

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,complete:function(){ ---> a <--- .to.opacity===0&&a.css

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{a.to.opacity===0&& ---> a <--- .css("opacity",a.from.opacity

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
===0&&a.css("opacity", ---> a <--- .from.opacity);p=="hide"&&

[WARNING] The symbol p is declared but is apparently never used.
This code can probably be written in a more compact way.
"opacity",a.from.opacity); ---> p <--- =="hide"&&a.hide();c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
from.opacity);p=="hide"&& ---> a <--- .hide();c.effects.restore

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"&&a.hide(); ---> c <--- .effects.restore(a,n?e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.effects.restore( ---> a <--- ,n?e:g);c.

[WARNING] The symbol n is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.effects.restore(a, ---> n <--- ?e:g);c.effects.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.restore(a,n? ---> e <--- :g);c.effects.removeWrapper(

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.restore(a,n?e: ---> g <--- );c.effects.removeWrapper(a)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a,n?e:g); ---> c <--- .effects.removeWrapper(a);b.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
g);c.effects.removeWrapper( ---> a <--- );b.callback&&b.callback.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.effects.removeWrapper(a); ---> b <--- .callback&&b.callback.apply(this

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(a);b.callback&& ---> b <--- .callback.apply(this,arguments);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
callback.apply(this,arguments); ---> a <--- .dequeue();}});}

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(d){ ---> d <--- .effects.shake=function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> b <--- =d(this),j=["position"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var b= ---> d <--- (this),j=["position","top"

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
{var b=d(this), ---> j <--- =["position","top","left"];d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=["position","top","left"]; ---> d <--- .effects.setMode(b,a.options

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"left"];d.effects.setMode( ---> b <--- ,a.options.mode||"effect");

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.effects.setMode(b, ---> a <--- .options.mode||"effect");var c

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.mode||"effect");var  ---> c <--- =a.options.direction||"left",e

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.mode||"effect");var c= ---> a <--- .options.direction||"left",e=a

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.options.direction||"left", ---> e <--- =a.options.distance||20,l

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.direction||"left",e= ---> a <--- .options.distance||20,l=a

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.options.distance||20, ---> l <--- =a.options.times||3,f

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.distance||20,l= ---> a <--- .options.times||3,f=a

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
=a.options.times||3, ---> f <--- =a.duration||a.options.duration

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.times||3,f= ---> a <--- .duration||a.options.duration||140

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||3,f=a.duration|| ---> a <--- .options.duration||140;d.effects

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
||a.options.duration||140; ---> d <--- .effects.save(b,j);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||140;d.effects.save( ---> b <--- ,j);b.show();

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
;d.effects.save(b, ---> j <--- );b.show();d.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(b,j); ---> b <--- .show();d.effects.createWrapper

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
j);b.show(); ---> d <--- .effects.createWrapper(b);var g

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
();d.effects.createWrapper( ---> b <--- );var g=c=="up"||c

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
.effects.createWrapper(b);var  ---> g <--- =c=="up"||c=="down"?"top"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
.createWrapper(b);var g= ---> c <--- =="up"||c=="down"?"top":"left"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
);var g=c=="up"|| ---> c <--- =="down"?"top":"left",h=c

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
||c=="down"?"top":"left", ---> h <--- =c=="up"||c=="left"?"pos"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="down"?"top":"left",h= ---> c <--- =="up"||c=="left"?"pos":"neg"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:"left",h=c=="up"|| ---> c <--- =="left"?"pos":"neg";c={

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
||c=="left"?"pos":"neg"; ---> c <--- ={};var i={},

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
:"neg";c={};var  ---> i <--- ={},k={};c

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
{};var i={}, ---> k <--- ={};c[g]=(

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
={},k={}; ---> c <--- [g]=(h=="pos"?"-="

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
},k={};c[ ---> g <--- ]=(h=="pos"?"-=":"+="

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{};c[g]=( ---> h <--- =="pos"?"-=":"+=")+e;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h=="pos"?"-=":"+=")+ ---> e <--- ;i[g]=(h=="pos"

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"-=":"+=")+e; ---> i <--- [g]=(h=="pos"?"+="

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=":"+=")+e;i[ ---> g <--- ]=(h=="pos"?"+=":"-="

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
+e;i[g]=( ---> h <--- =="pos"?"+=":"-=")+e*

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h=="pos"?"+=":"-=")+ ---> e <--- *2;k[g]=(h

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
"+=":"-=")+e*2; ---> k <--- [g]=(h=="pos"?"-="

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=")+e*2;k[ ---> g <--- ]=(h=="pos"?"-=":"+="

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
*2;k[g]=( ---> h <--- =="pos"?"-=":"+=")+e*

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
h=="pos"?"-=":"+=")+ ---> e <--- *2;b.animate(c,f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"-=":"+=")+e*2; ---> b <--- .animate(c,f,a.options

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
+e*2;b.animate( ---> c <--- ,f,a.options.easing);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
*2;b.animate(c, ---> f <--- ,a.options.easing);for(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
;b.animate(c,f, ---> a <--- .options.easing);for(e=

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.easing);for( ---> e <--- =1;e<l;e++)

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
easing);for(e=1; ---> e <--- <l;e++){b.animate

[WARNING] The symbol l is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(e=1;e< ---> l <--- ;e++){b.animate(i

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(e=1;e<l; ---> e <--- ++){b.animate(i,f

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
;e<l;e++){ ---> b <--- .animate(i,f,a.options

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;e++){b.animate( ---> i <--- ,f,a.options.easing).

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
++){b.animate(i, ---> f <--- ,a.options.easing).animate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
{b.animate(i,f, ---> a <--- .options.easing).animate(k,

[WARNING] The symbol k is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.easing).animate( ---> k <--- ,f,a.options.easing);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
options.easing).animate(k, ---> f <--- ,a.options.easing);}b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
easing).animate(k,f, ---> a <--- .options.easing);}b.animate

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,a.options.easing);} ---> b <--- .animate(i,f,a.options

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing);}b.animate( ---> i <--- ,f,a.options.easing).

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
);}b.animate(i, ---> f <--- ,a.options.easing).animate(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
}b.animate(i,f, ---> a <--- .options.easing).animate(c,

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.easing).animate( ---> c <--- ,f/2,a.options.easing

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
options.easing).animate(c, ---> f <--- /2,a.options.easing,function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(c,f/2, ---> a <--- .options.easing,function(){d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.easing,function(){ ---> d <--- .effects.restore(b,j);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(){d.effects.restore( ---> b <--- ,j);d.effects.removeWrapper(

[WARNING] The symbol j is declared but is apparently never used.
This code can probably be written in a more compact way.
{d.effects.restore(b, ---> j <--- );d.effects.removeWrapper(b)

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(b,j); ---> d <--- .effects.removeWrapper(b);a.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
j);d.effects.removeWrapper( ---> b <--- );a.callback&&a.callback.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
d.effects.removeWrapper(b); ---> a <--- .callback&&a.callback.apply(this

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(b);a.callback&& ---> a <--- .callback.apply(this,arguments);

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(this,arguments);}); ---> b <--- .queue("fx",function(){b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.queue("fx",function(){ ---> b <--- .dequeue();});b.

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
b.dequeue();}); ---> b <--- .dequeue();});};

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(c){ ---> c <--- .effects.slide=function(d){

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> a <--- =c(this),h=["position"

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var a= ---> c <--- (this),h=["position","top"

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
{var a=c(this), ---> h <--- =["position","top","left"],e

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
=["position","top","left"], ---> e <--- =c.effects.setMode(a,d

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
"position","top","left"],e= ---> c <--- .effects.setMode(a,d.options

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
,e=c.effects.setMode( ---> a <--- ,d.options.mode||"show"),

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
=c.effects.setMode(a, ---> d <--- .options.mode||"show"),b=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
d.options.mode||"show"), ---> b <--- =d.options.direction||"left";c

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
options.mode||"show"),b= ---> d <--- .options.direction||"left";c.effects

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.options.direction||"left"; ---> c <--- .effects.save(a,h);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
||"left";c.effects.save( ---> a <--- ,h);a.show();

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.effects.save(a, ---> h <--- );a.show();c.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.save(a,h); ---> a <--- .show();c.effects.createWrapper

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
h);a.show(); ---> c <--- .effects.createWrapper(a).css(

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.effects.createWrapper( ---> a <--- ).css({overflow:"hidden"})

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
({overflow:"hidden"});var  ---> f <--- =b=="up"||b=="down"?"top"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
overflow:"hidden"});var f= ---> b <--- =="up"||b=="down"?"top":"left"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
);var f=b=="up"|| ---> b <--- =="down"?"top":"left";b=b

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
||b=="down"?"top":"left"; ---> b <--- =b=="up"||b=="left"?"pos"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
=="down"?"top":"left";b= ---> b <--- =="up"||b=="left"?"pos":"neg"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:"left";b=b=="up"|| ---> b <--- =="left"?"pos":"neg";var g=

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b=="left"?"pos":"neg";var  ---> g <--- =d.options.distance||(f==

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"left"?"pos":"neg";var g= ---> d <--- .options.distance||(f=="top"?

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
g=d.options.distance||( ---> f <--- =="top"?a.outerHeight({margin:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
options.distance||(f=="top"? ---> a <--- .outerHeight({margin:true}):

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
outerHeight({margin:true}): ---> a <--- .outerWidth({margin:true}))

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
margin:true}));if( ---> e <--- =="show"){a.css(f,

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(e=="show"){ ---> a <--- .css(f,b=="pos"?-

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
e=="show"){a.css( ---> f <--- ,b=="pos"?-g:g)

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
"show"){a.css(f, ---> b <--- =="pos"?-g:g);}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
css(f,b=="pos"?- ---> g <--- :g);}var i={}

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
f,b=="pos"?-g: ---> g <--- );}var i={};i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
?-g:g);}var  ---> i <--- ={};i[f]=(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);}var i={}; ---> i <--- [f]=(e=="show"?b

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
}var i={};i[ ---> f <--- ]=(e=="show"?b=="pos"

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
{};i[f]=( ---> e <--- =="show"?b=="pos"?"+=":"-="

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
[f]=(e=="show"? ---> b <--- =="pos"?"+=":"-=":b=="pos"

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
?b=="pos"?"+=":"-=": ---> b <--- =="pos"?"-=":"+=")+g;

[WARNING] The symbol g is declared but is apparently never used.
This code can probably be written in a more compact way.
b=="pos"?"-=":"+=")+ ---> g <--- ;a.animate(i,{queue:

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
"pos"?"-=":"+=")+g; ---> a <--- .animate(i,{queue:false,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"+=")+g;a.animate( ---> i <--- ,{queue:false,duration:d.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
i,{queue:false,duration: ---> d <--- .duration,easing:d.options.easing

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
,duration:d.duration,easing: ---> d <--- .options.easing,complete:function()

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.easing,complete:function(){ ---> e <--- =="hide"&&a.hide();c

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(){e=="hide"&& ---> a <--- .hide();c.effects.restore

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
=="hide"&&a.hide(); ---> c <--- .effects.restore(a,h);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
();c.effects.restore( ---> a <--- ,h);c.effects.removeWrapper(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
;c.effects.restore(a, ---> h <--- );c.effects.removeWrapper(a)

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
effects.restore(a,h); ---> c <--- .effects.removeWrapper(a);d.

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
h);c.effects.removeWrapper( ---> a <--- );d.callback&&d.callback.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
c.effects.removeWrapper(a); ---> d <--- .callback&&d.callback.apply(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
removeWrapper(a);d.callback&& ---> d <--- .callback.apply(this,arguments);

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
callback.apply(this,arguments); ---> a <--- .dequeue();}});}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function(e){ ---> e <--- .effects.transfer=function(a){

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
this.queue(function(){var  ---> b <--- =e(this),c=e(

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
queue(function(){var b= ---> e <--- (this),c=e(a.

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
{var b=e(this), ---> c <--- =e(a.options.to),

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b=e(this),c= ---> e <--- (a.options.to),d=

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
e(this),c=e( ---> a <--- .options.to),d=c.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
e(a.options.to), ---> d <--- =c.offset();c={

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
a.options.to),d= ---> c <--- .offset();c={top:

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,d=c.offset(); ---> c <--- ={top:d.top,left:

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
offset();c={top: ---> d <--- .top,left:d.left,height

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{top:d.top,left: ---> d <--- .left,height:c.innerHeight()

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:d.left,height: ---> c <--- .innerHeight(),width:c.innerWidth

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
:c.innerHeight(),width: ---> c <--- .innerWidth()};d=b.

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
width:c.innerWidth()}; ---> d <--- =b.offset();var f=

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
c.innerWidth()};d= ---> b <--- .offset();var f=e(

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
d=b.offset();var  ---> f <--- =e('<div class="ui-effects-transfer"></div>').appendTo(document.

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
b.offset();var f= ---> e <--- ('<div class="ui-effects-transfer"></div>').appendTo(document.body)

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
appendTo(document.body).addClass( ---> a <--- .options.className).css({top

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.className).css({top: ---> d <--- .top,left:d.left,height

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
{top:d.top,left: ---> d <--- .left,height:b.innerHeight()

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
,left:d.left,height: ---> b <--- .innerHeight(),width:b.innerWidth

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
:b.innerHeight(),width: ---> b <--- .innerWidth(),position:"absolute"})

[WARNING] The symbol c is declared but is apparently never used.
This code can probably be written in a more compact way.
,position:"absolute"}).animate( ---> c <--- ,a.duration,a.options.easing

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
:"absolute"}).animate(c, ---> a <--- .duration,a.options.easing,function

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.animate(c,a.duration, ---> a <--- .options.easing,function(){f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.options.easing,function(){ ---> f <--- .remove();a.callback&&a

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
(){f.remove(); ---> a <--- .callback&&a.callback.apply(b

[WARNING] The symbol a is declared but is apparently never used.
This code can probably be written in a more compact way.
.remove();a.callback&& ---> a <--- .callback.apply(b[0],

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
.callback&&a.callback.apply( ---> b <--- [0],arguments);b.dequeue

[WARNING] The symbol b is declared but is apparently never used.
This code can probably be written in a more compact way.
(b[0],arguments); ---> b <--- .dequeue();});})

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(val,len){var  ---> str <--- =String(Math.abs(val))

[WARNING] The symbol val is declared but is apparently never used.
This code can probably be written in a more compact way.
var str=String(Math.abs( ---> val <--- ));while(str.length<len

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
.abs(val));while( ---> str <--- .length<len){str="0"+

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
));while(str.length< ---> len <--- ){str="0"+str;}if

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
while(str.length<len){ ---> str <--- ="0"+str;}if(val<

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
length<len){str="0"+ ---> str <--- ;}if(val<0){str

[WARNING] The symbol val is declared but is apparently never used.
This code can probably be written in a more compact way.
str="0"+str;}if( ---> val <--- <0){str="-"+str;

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(val<0){ ---> str <--- ="-"+str;}returnstr;}

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
val<0){str="-"+ ---> str <--- ;}returnstr;}};(function

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
{str="-"+str;}return ---> str <--- ;}};(function($){

[WARNING] The symbol __oneDay is declared but is apparently never used.
This code can probably be written in a more compact way.
};(function($){var  ---> __oneDay <--- =(24*60*60*1000)

[WARNING] The symbol __daysIn is declared but is apparently never used.
This code can probably be written in a more compact way.
*60*60*1000);var  ---> __daysIn <--- =[31,28,31,30,

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
,31,30,31];var  ---> __iframe <--- =null;var __initialized=false;var __msie6

[WARNING] The symbol __initialized is declared but is apparently never used.
This code can probably be written in a more compact way.
31];var __iframe=null;var  ---> __initialized <--- =false;var __msie6=(navigator.userAgent

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
=null;var __initialized=false;var  ---> __msie6 <--- =(navigator.userAgent.indexOf("MSIE 6")

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("MSIE 6")>0);var  ---> __msie7 <--- =(navigator.userAgent.indexOf("MSIE 7")

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("MSIE 7")>0);var  ---> __pickers <--- =[];jQuery.prototype.AnyTime_picker=

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(i){ ---> AnyTime <--- .picker(this.id,options);

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
{AnyTime.picker(this.id, ---> options <--- );});};jQuery.prototype

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
this.each(function(i){ ---> AnyTime <--- .noPicker(this.id);})

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height=function(inclusive){return( ---> __msie6 <--- ?Number(this.css("height").

[WARNING] The symbol inclusive is declared but is apparently never used.
This code can probably be written in a more compact way.
,"")):this.outerHeight( ---> inclusive <--- ));};jQuery.prototype.AnyTime_width

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_width=function(inclusive){return( ---> __msie6 <--- ?(1+Number(this.css(

[WARNING] The symbol inclusive is declared but is apparently never used.
This code can probably be written in a more compact way.
""))):this.outerWidth( ---> inclusive <--- ));};jQuery.prototype.AnyTime_current

[WARNING] The symbol isCurrent is declared but is apparently never used.
This code can probably be written in a more compact way.
function(isCurrent,isLegal){if( ---> isCurrent <--- ){this.removeClass("AnyTime-out-btn ui-state-default ui-state-disabled ui-state-highlight");this

[WARNING] The symbol isLegal is declared but is apparently never used.
This code can probably be written in a more compact way.
.removeClass("AnyTime-cur-btn ui-state-highlight");if(! ---> isLegal <--- ){this.addClass("AnyTime-out-btn ui-state-disabled");}

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
).triggerHandler("click");}; ---> $ <--- (document).ready(function(){

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.location.hostname!="www.ama3.com")){ ---> $ <--- (document.body).append('<img src="http://www.ama3.com/anytime/ping/?4.1112A'+

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
.body).append('<img src="http://www.ama3.com/anytime/ping/?4.1112A'+( ---> AnyTime <--- .utcLabel?".tz":"")+'" width="0" height="0" />')

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
"")+'" width="0" height="0" />');}if( ---> __msie6 <--- ){__iframe=$('<iframe frameborder="0" scrolling="no"></iframe>');__iframe

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
'" width="0" height="0" />');}if(__msie6){ ---> __iframe <--- =$('<iframe frameborder="0" scrolling="no"></iframe>');__iframe.src=

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(__msie6){__iframe= ---> $ <--- ('<iframe frameborder="0" scrolling="no"></iframe>');__iframe.src="javascript:'<html></html>';";

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
){__iframe=$('<iframe frameborder="0" scrolling="no"></iframe>'); ---> __iframe <--- .src="javascript:'<html></html>';";$(__iframe).

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
'<iframe frameborder="0" scrolling="no"></iframe>');__iframe.src="javascript:'<html></html>';"; ---> $ <--- (__iframe).css({display:"block"

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
;__iframe.src="javascript:'<html></html>';";$( ---> __iframe <--- ).css({display:"block",height

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
:"1px",zIndex:0}); ---> $ <--- (document.body).append(__iframe)

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
$(document.body).append( ---> __iframe <--- );}for(var id in __pickers)

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
append(__iframe);}for(var  ---> id <---  in __pickers){if(!Array.prototype

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
__iframe);}for(var id in  ---> __pickers <--- ){if(!Array.prototype[id

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(!Array.prototype[ ---> id <--- ]){__pickers[id].onReady(

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
!Array.prototype[id]){ ---> __pickers <--- [id].onReady();}}

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
.prototype[id]){__pickers[ ---> id <--- ].onReady();}}__initialized=

[WARNING] The symbol __initialized is declared but is apparently never used.
This code can probably be written in a more compact way.
id].onReady();}} ---> __initialized <--- =true;});AnyTime.Converter=

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
}}__initialized=true;}); ---> AnyTime <--- .Converter=function(options){var _flen

[WARNING] The symbol _flen is declared but is apparently never used.
This code can probably be written in a more compact way.
.Converter=function(options){var  ---> _flen <--- =0;var _longDay=9;var _longMon

[WARNING] The symbol _longDay is declared but is apparently never used.
This code can probably be written in a more compact way.
options){var _flen=0;var  ---> _longDay <--- =9;var _longMon=9;var _shortDay

[WARNING] The symbol _longMon is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;var _longDay=9;var  ---> _longMon <--- =9;var _shortDay=6;var _shortMon

[WARNING] The symbol _shortDay is declared but is apparently never used.
This code can probably be written in a more compact way.
=9;var _longMon=9;var  ---> _shortDay <--- =6;var _shortMon=3;var _offAl

[WARNING] The symbol _shortMon is declared but is apparently never used.
This code can probably be written in a more compact way.
=9;var _shortDay=6;var  ---> _shortMon <--- =3;var _offAl=Number.MIN_VALUE;

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
=6;var _shortMon=3;var  ---> _offAl <--- =Number.MIN_VALUE;var _offCap=Number.

[WARNING] The symbol _offCap is declared but is apparently never used.
This code can probably be written in a more compact way.
;var _offAl=Number.MIN_VALUE;var  ---> _offCap <--- =Number.MIN_VALUE;var _offF=Number.

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
;var _offCap=Number.MIN_VALUE;var  ---> _offF <--- =Number.MIN_VALUE;var _offFSI=(-

[WARNING] The symbol _offFSI is declared but is apparently never used.
This code can probably be written in a more compact way.
;var _offF=Number.MIN_VALUE;var  ---> _offFSI <--- =(-1);var _offP=Number

[WARNING] The symbol _offP is declared but is apparently never used.
This code can probably be written in a more compact way.
var _offFSI=(-1);var  ---> _offP <--- =Number.MIN_VALUE;var _offPSI=(-

[WARNING] The symbol _offPSI is declared but is apparently never used.
This code can probably be written in a more compact way.
;var _offP=Number.MIN_VALUE;var  ---> _offPSI <--- =(-1);var _captureOffset=false

[WARNING] The symbol _captureOffset is declared but is apparently never used.
This code can probably be written in a more compact way.
var _offPSI=(-1);var  ---> _captureOffset <--- =false;this.fmt="%Y-%m-%d %T";this

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(str,pos){return(( ---> str <--- .charCodeAt(pos)>="0".charCodeAt(

[WARNING] The symbol pos is declared but is apparently never used.
This code can probably be written in a more compact way.
){return((str.charCodeAt( ---> pos <--- )>="0".charCodeAt(0))&&

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
"0".charCodeAt(0))&&( ---> str <--- .charCodeAt(pos)<="9".charCodeAt(

[WARNING] The symbol pos is declared but is apparently never used.
This code can probably be written in a more compact way.
0))&&(str.charCodeAt( ---> pos <--- )<="9".charCodeAt(0)))

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
.format=function(date){var  ---> d <--- =new Date(date.getTime())

[WARNING] The symbol date is declared but is apparently never used.
This code can probably be written in a more compact way.
date){var d=new Date( ---> date <--- .getTime());if((_offAl

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
.getTime());if(( ---> _offAl <--- ==Number.MIN_VALUE)&&(_offF!=Number

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
(_offAl==Number.MIN_VALUE)&&( ---> _offF <--- !=Number.MIN_VALUE)){d.setTime

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(_offF!=Number.MIN_VALUE)){ ---> d <--- .setTime((d.getTime()+

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
MIN_VALUE)){d.setTime(( ---> d <--- .getTime()+(d.getTimezoneOffset(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
((d.getTime()+( ---> d <--- .getTimezoneOffset()*60000))+(

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
getTimezoneOffset()*60000))+( ---> _offF <--- *60000));}var t;var 

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(_offF*60000));}var  ---> t <--- ;var str="";for(var f

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
60000));}var t;var  ---> str <--- ="";for(var f=0;

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;var str="";for(var  ---> f <--- =0;f<_flen;f++)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
"";for(var f=0; ---> f <--- <_flen;f++){if(this

[WARNING] The symbol _flen is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var f=0;f< ---> _flen <--- ;f++){if(this.fmt

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=0;f<_flen; ---> f <--- ++){if(this.fmt.charAt

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(this.fmt.charAt( ---> f <--- )!="%"){str+=this.fmt

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(f)!="%"){ ---> str <--- +=this.fmt.charAt(f);

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{str+=this.fmt.charAt( ---> f <--- );}else{var ch=this.

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(f);}else{var  ---> ch <--- =this.fmt.charAt(f+1

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var ch=this.fmt.charAt( ---> f <--- +1);switch(ch){case

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(f+1);switch( ---> ch <--- ){case"a":str+=this.dAbbr

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
;switch(ch){case"a": ---> str <--- +=this.dAbbr[d.getDay()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
case"a":str+=this.dAbbr[ ---> d <--- .getDay()];break;case"B"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];break;case"B":if( ---> d <--- .getFullYear()<0){str+=

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
d.getFullYear()<0){ ---> str <--- +=this.eAbbr[0];}break

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
0];}break;case"b": ---> str <--- +=this.mAbbr[d.getMonth()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
case"b":str+=this.mAbbr[ ---> d <--- .getMonth()];break;case"C"

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];break;case"C":if( ---> d <--- .getFullYear()>0){str+=

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
d.getFullYear()>0){ ---> str <--- +=this.eAbbr[1];}break

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
1];}break;case"c": ---> str <--- +=d.getMonth()+1;break

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}break;case"c":str+= ---> d <--- .getMonth()+1;break;case

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1;break;case"d": ---> t <--- =d.getDate();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
1;break;case"d":t= ---> d <--- .getDate();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getDate();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);break;case"D"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );break;case"D":t=String

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(t);break;case"D": ---> t <--- =String(d.getDate());

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
break;case"D":t=String( ---> d <--- .getDate());str+=t;

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
String(d.getDate()); ---> str <--- +=t;if((t.length==

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
d.getDate());str+= ---> t <--- ;if((t.length==2)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);str+=t;if(( ---> t <--- .length==2)&&(t.charAt

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(t.length==2)&&( ---> t <--- .charAt(0)=="1")){

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(0)=="1")){ ---> str <--- +="th";}else{switch(t.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="th";}else{switch( ---> t <--- .charAt(t.length-1))

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{switch(t.charAt( ---> t <--- .length-1)){case"1":

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
length-1)){case"1": ---> str <--- +="st";break;case"2":str+=

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="st";break;case"2": ---> str <--- +="nd";break;case"3":str+=

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="nd";break;case"3": ---> str <--- +="rd";break;default:str+="th"

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
:str+="rd";break;default: ---> str <--- +="th";break;}}break;case

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}}break;case"E": ---> str <--- +=this.eAbbr[(d.getFullYear(

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
"E":str+=this.eAbbr[( ---> d <--- .getFullYear()<0)?0:

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
:1];break;case"e": ---> str <--- +=d.getDate();break;case

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];break;case"e":str+= ---> d <--- .getDate();break;case"H":

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
getDate();break;case"H": ---> t <--- =d.getHours();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"H":t= ---> d <--- .getHours();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getHours();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);break;case"h"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );break;case"h":case"I":

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"h":case"I": ---> t <--- =d.getHours()%12;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;case"h":case"I":t= ---> d <--- .getHours()%12;if(t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getHours()%12;if( ---> t <--- ==0){str+="12";}else

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
12;if(t==0){ ---> str <--- +="12";}else{if(t<

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="12";}else{if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);}break;case

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );}break;case"i":t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
t);}break;case"i": ---> t <--- =d.getMinutes();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;}break;case"i":t= ---> d <--- .getMinutes();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getMinutes();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);break;case"k"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );break;case"k":str+=d

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(t);break;case"k": ---> str <--- +=d.getHours();break;case

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"k":str+= ---> d <--- .getHours();break;case"l":

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
getHours();break;case"l": ---> t <--- =d.getHours()%12;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"l":t= ---> d <--- .getHours()%12;if(t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getHours()%12;if( ---> t <--- ==0){str+="12";}else

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
12;if(t==0){ ---> str <--- +="12";}else{str+=String(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
){str+="12";}else{ ---> str <--- +=String(t);}break;case

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
"12";}else{str+=String( ---> t <--- );}break;case"M":str+=

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
t);}break;case"M": ---> str <--- +=this.mNames[d.getMonth()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
case"M":str+=this.mNames[ ---> d <--- .getMonth()];break;case"m"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
()];break;case"m": ---> t <--- =d.getMonth()+1;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];break;case"m":t= ---> d <--- .getMonth()+1;if(t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()+1;if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
1;if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);break;case"p"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );break;case"p":str+=(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(t);break;case"p": ---> str <--- +=((d.getHours()<12

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
break;case"p":str+=(( ---> d <--- .getHours()<12)?"AM":

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
:"PM");break;case"r": ---> t <--- =d.getHours()%12;if

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"r":t= ---> d <--- .getHours()%12;if(t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getHours()%12;if( ---> t <--- ==0){str+="12:";}else

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
12;if(t==0){ ---> str <--- +="12:";}else{if(t<

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="12:";}else{if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t)+":";}t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- )+":";}t=d.getMinutes

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
+=String(t)+":";} ---> t <--- =d.getMinutes();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
(t)+":";}t= ---> d <--- .getMinutes();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getMinutes();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t)+":";t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- )+":";t=d.getSeconds(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+=String(t)+":"; ---> t <--- =d.getSeconds();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
String(t)+":";t= ---> d <--- .getSeconds();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getSeconds();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);str+=((

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );str+=((d.getHours(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
;}str+=String(t); ---> str <--- +=((d.getHours()<12

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
String(t);str+=(( ---> d <--- .getHours()<12)?"AM":

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"S":case"s": ---> t <--- =d.getSeconds();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
;case"S":case"s":t= ---> d <--- .getSeconds();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getSeconds();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);break;case"T"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );break;case"T":t=d

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(t);break;case"T": ---> t <--- =d.getHours();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"T":t= ---> d <--- .getHours();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getHours();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t)+":";t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- )+":";t=d.getMinutes(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+=String(t)+":"; ---> t <--- =d.getMinutes();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
String(t)+":";t= ---> d <--- .getMinutes();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getMinutes();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t)+":";t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- )+":";t=d.getSeconds(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+=String(t)+":"; ---> t <--- =d.getSeconds();if(t

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
String(t)+":";t= ---> d <--- .getSeconds();if(t<10

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getSeconds();if( ---> t <--- <10){str+="0";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<10){ ---> str <--- +="0";}str+=String(t)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<10){str+="0";} ---> str <--- +=String(t);break;case"W"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="0";}str+=String( ---> t <--- );break;case"W":str+=this

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(t);break;case"W": ---> str <--- +=this.dNames[d.getDay()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
case"W":str+=this.dNames[ ---> d <--- .getDay()];break;case"w"

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
()];break;case"w": ---> str <--- +=d.getDay();break;case

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
];break;case"w":str+= ---> d <--- .getDay();break;case"Y":

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
getDay();break;case"Y": ---> str <--- +=AnyTime.pad(d.getFullYear()

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"Y":str+= ---> AnyTime <--- .pad(d.getFullYear(),4

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
case"Y":str+=AnyTime.pad( ---> d <--- .getFullYear(),4);break;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
,4);break;case"y": ---> t <--- =d.getFullYear()%100;str

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"y":t= ---> d <--- .getFullYear()%100;str+=AnyTime

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
=d.getFullYear()%100; ---> str <--- +=AnyTime.pad(t,2);

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
.getFullYear()%100;str+= ---> AnyTime <--- .pad(t,2);break;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
%100;str+=AnyTime.pad( ---> t <--- ,2);break;case"Z":str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
,2);break;case"Z": ---> str <--- +=AnyTime.pad(Math.abs(d

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"Z":str+= ---> AnyTime <--- .pad(Math.abs(d.getFullYear

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
+=AnyTime.pad(Math.abs( ---> d <--- .getFullYear()),4);break

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
,4);break;case"z": ---> str <--- +=Math.abs(d.getFullYear()

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
case"z":str+=Math.abs( ---> d <--- .getFullYear());break;case"%"

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
());break;case"%": ---> str <--- +="%";break;case"#":t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+="%";break;case"#": ---> t <--- =(_offAl!=Number.MIN_VALUE)?_offAl

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"#":t=( ---> _offAl <--- !=Number.MIN_VALUE)?_offAl:(_offF

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
=(_offAl!=Number.MIN_VALUE)? ---> _offAl <--- :(_offF==Number.MIN_VALUE)?(

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
!=Number.MIN_VALUE)?_offAl:( ---> _offF <--- ==Number.MIN_VALUE)?(0-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
==Number.MIN_VALUE)?(0- ---> d <--- .getTimezoneOffset()):_offF;if(

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
0-d.getTimezoneOffset()): ---> _offF <--- ;if(t>=0){str+=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
getTimezoneOffset()):_offF;if( ---> t <--- >=0){str+="+";}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
_offF;if(t>=0){ ---> str <--- +="+";}str+=t;break;

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0){str+="+";} ---> str <--- +=t;break;case"@":t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){str+="+";}str+= ---> t <--- ;break;case"@":t=(_offAl

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str+=t;break;case"@": ---> t <--- =(_offAl!=Number.MIN_VALUE)?_offAl

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"@":t=( ---> _offAl <--- !=Number.MIN_VALUE)?_offAl:(_offF

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
=(_offAl!=Number.MIN_VALUE)? ---> _offAl <--- :(_offF==Number.MIN_VALUE)?(

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
!=Number.MIN_VALUE)?_offAl:( ---> _offF <--- ==Number.MIN_VALUE)?(0-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
==Number.MIN_VALUE)?(0- ---> d <--- .getTimezoneOffset()):_offF;if(

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
0-d.getTimezoneOffset()): ---> _offF <--- ;if(AnyTime.utcLabel&&AnyTime.utcLabel

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
getTimezoneOffset()):_offF;if( ---> AnyTime <--- .utcLabel&&AnyTime.utcLabel[t])

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
:_offF;if(AnyTime.utcLabel&& ---> AnyTime <--- .utcLabel[t]){if((

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(AnyTime.utcLabel&&AnyTime.utcLabel[ ---> t <--- ]){if((_offFSI>0)

[WARNING] The symbol _offFSI is declared but is apparently never used.
This code can probably be written in a more compact way.
utcLabel[t]){if(( ---> _offFSI <--- >0)&&(_offFSI<AnyTime.utcLabel

[WARNING] The symbol _offFSI is declared but is apparently never used.
This code can probably be written in a more compact way.
if((_offFSI>0)&&( ---> _offFSI <--- <AnyTime.utcLabel[t].length)

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
(_offFSI>0)&&(_offFSI< ---> AnyTime <--- .utcLabel[t].length)){

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(_offFSI<AnyTime.utcLabel[ ---> t <--- ].length)){str+=AnyTime.

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
utcLabel[t].length)){ ---> str <--- +=AnyTime.utcLabel[t][_offFSI]

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
t].length)){str+= ---> AnyTime <--- .utcLabel[t][_offFSI];}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
)){str+=AnyTime.utcLabel[ ---> t <--- ][_offFSI];}else{str+=

[WARNING] The symbol _offFSI is declared but is apparently never used.
This code can probably be written in a more compact way.
str+=AnyTime.utcLabel[t][ ---> _offFSI <--- ];}else{str+=AnyTime.utcLabel

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
t][_offFSI];}else{ ---> str <--- +=AnyTime.utcLabel[t][0]

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
[_offFSI];}else{str+= ---> AnyTime <--- .utcLabel[t][0];}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{str+=AnyTime.utcLabel[ ---> t <--- ][0];}break;}str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
][0];}break;} ---> str <--- +="UTC";ch=":";case"+":

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
;}break;}str+="UTC"; ---> ch <--- =":";case"+":case"-":case

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
case"-":case":":case";": ---> t <--- =(_offAl!=Number.MIN_VALUE)?_offAl

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
case":":case";":t=( ---> _offAl <--- !=Number.MIN_VALUE)?_offAl:(_offF

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
=(_offAl!=Number.MIN_VALUE)? ---> _offAl <--- :(_offF==Number.MIN_VALUE)?(

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
!=Number.MIN_VALUE)?_offAl:( ---> _offF <--- ==Number.MIN_VALUE)?(0-d

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
==Number.MIN_VALUE)?(0- ---> d <--- .getTimezoneOffset()):_offF;if(

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
0-d.getTimezoneOffset()): ---> _offF <--- ;if(t<0){str+=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
getTimezoneOffset()):_offF;if( ---> t <--- <0){str+="-";}else

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
_offF;if(t<0){ ---> str <--- +="-";}else{str+="+";

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
){str+="-";}else{ ---> str <--- +="+";}t=Math.abs(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
;}else{str+="+";} ---> t <--- =Math.abs(t);str+=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
"+";}t=Math.abs( ---> t <--- );str+=((ch=="+")

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
t=Math.abs(t); ---> str <--- +=((ch=="+")||(ch

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
abs(t);str+=(( ---> ch <--- =="+")||(ch==":"))

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
+=((ch=="+")||( ---> ch <--- ==":"))?AnyTime.pad(Math

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(ch==":"))? ---> AnyTime <--- .pad(Math.floor(t/60

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
?AnyTime.pad(Math.floor( ---> t <--- /60),2):Math.floor

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
),2):Math.floor( ---> t <--- /60);if((ch==":"

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
(t/60);if(( ---> ch <--- ==":")||(ch==";"))

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
if((ch==":")||( ---> ch <--- ==";")){str+=":";}

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(ch==";")){ ---> str <--- +=":";}str+=AnyTime.pad(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
";")){str+=":";} ---> str <--- +=AnyTime.pad(t%60,2

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
){str+=":";}str+= ---> AnyTime <--- .pad(t%60,2);

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
":";}str+=AnyTime.pad( ---> t <--- %60,2);break;case"f"

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
case"X":case"x":throw"%"+ ---> ch <--- +" not implemented by AnyTime.Converter";default:str+=this.fmt

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
throw"%"+ch+" not implemented by AnyTime.Converter";default: ---> str <--- +=this.fmt.substr(f,2

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
:str+=this.fmt.substr( ---> f <--- ,2);}f++;}}

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.substr(f,2);} ---> f <--- ++;}}returnstr;};this

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);}f++;}}return ---> str <--- ;};this.getUtcParseOffsetCaptured=function()

[WARNING] The symbol _offCap is declared but is apparently never used.
This code can probably be written in a more compact way.
this.getUtcParseOffsetCaptured=function(){return ---> _offCap <--- ;};this.getUtcParseOffsetSubIndex=function()

[WARNING] The symbol _offPSI is declared but is apparently never used.
This code can probably be written in a more compact way.
this.getUtcParseOffsetSubIndex=function(){return ---> _offPSI <--- ;};this.parse=function(str

[WARNING] The symbol _offCap is declared but is apparently never used.
This code can probably be written in a more compact way.
this.parse=function(str){ ---> _offCap <--- =_offP;_offPSI=(-1);

[WARNING] The symbol _offP is declared but is apparently never used.
This code can probably be written in a more compact way.
parse=function(str){_offCap= ---> _offP <--- ;_offPSI=(-1);var era

[WARNING] The symbol _offPSI is declared but is apparently never used.
This code can probably be written in a more compact way.
function(str){_offCap=_offP; ---> _offPSI <--- =(-1);var era=1

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
;_offPSI=(-1);var  ---> era <--- =1;var time=new Date(0

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
1);var era=1;var  ---> time <--- =new Date(0,0,1,

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
,0,0,0);var  ---> slen <--- =str.length;var s=0;

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
,0,0);var slen= ---> str <--- .length;var s=0;var tzSign

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
;var slen=str.length;var  ---> s <--- =0;var tzSign=1,tzOff=

[WARNING] The symbol tzSign is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;var s=0;var  ---> tzSign <--- =1,tzOff=_offP;var i,

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
s=0;var tzSign=1, ---> tzOff <--- =_offP;var i,matched,sub,

[WARNING] The symbol _offP is declared but is apparently never used.
This code can probably be written in a more compact way.
0;var tzSign=1,tzOff= ---> _offP <--- ;var i,matched,sub,sublen,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
tzSign=1,tzOff=_offP;var  ---> i <--- ,matched,sub,sublen,temp;for

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
1,tzOff=_offP;var i, ---> matched <--- ,sub,sublen,temp;for(var 

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
tzOff=_offP;var i,matched, ---> sub <--- ,sublen,temp;for(var f=

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
_offP;var i,matched,sub, ---> sublen <--- ,temp;for(var f=0;

[WARNING] The symbol temp is declared but is apparently never used.
This code can probably be written in a more compact way.
var i,matched,sub,sublen, ---> temp <--- ;for(var f=0;f<

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
sub,sublen,temp;for(var  ---> f <--- =0;f<_flen;f++)

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
temp;for(var f=0; ---> f <--- <_flen;f++){if(this

[WARNING] The symbol _flen is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var f=0;f< ---> _flen <--- ;f++){if(this.fmt

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var f=0;f<_flen; ---> f <--- ++){if(this.fmt.charAt

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(this.fmt.charAt( ---> f <--- )=="%"){var ch=this.

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(f)=="%"){var  ---> ch <--- =this.fmt.charAt(f+1

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
var ch=this.fmt.charAt( ---> f <--- +1);switch(ch){case

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(f+1);switch( ---> ch <--- ){case"a":matched=false;for

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
;switch(ch){case"a": ---> matched <--- =false;for(sublen=0;s

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
case"a":matched=false;for( ---> sublen <--- =0;s+sublen<slen;sublen

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;for(sublen=0; ---> s <--- +sublen<slen;sublen++){sub

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(sublen=0;s+ ---> sublen <--- <slen;sublen++){sub=str

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
(sublen=0;s+sublen< ---> slen <--- ;sublen++){sub=str.substr

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;s+sublen<slen; ---> sublen <--- ++){sub=str.substr(s

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
+sublen<slen;sublen++){ ---> sub <--- =str.substr(s,sublen);

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<slen;sublen++){sub= ---> str <--- .substr(s,sublen);for(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
++){sub=str.substr( ---> s <--- ,sublen);for(i=0;

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
{sub=str.substr(s, ---> sublen <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,sublen);for( ---> i <--- =0;i<12;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
sublen);for(i=0; ---> i <--- <12;i++){if(this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<12; ---> i <--- ++){if(this.dAbbr[i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(this.dAbbr[ ---> i <--- ]==sub){matched=true;s

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.dAbbr[i]== ---> sub <--- ){matched=true;s+=sublen;

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
.dAbbr[i]==sub){ ---> matched <--- =true;s+=sublen;break;}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
]==sub){matched=true; ---> s <--- +=sublen;break;}}if(matched

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
sub){matched=true;s+= ---> sublen <--- ;break;}}if(matched){

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
+=sublen;break;}}if( ---> matched <--- ){break;}}if(!matched

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
){break;}}if(! ---> matched <--- ){throw"unknown weekday: "+str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!matched){throw"unknown weekday: "+ ---> str <--- .substr(s);}break;case

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
){throw"unknown weekday: "+str.substr( ---> s <--- );}break;case"B":sublen=

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
s);}break;case"B": ---> sublen <--- =this.eAbbr[0].length;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].length;if(( ---> s <--- +sublen<=slen)&&(str.substr

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
].length;if((s+ ---> sublen <--- <=slen)&&(str.substr(s

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
length;if((s+sublen<= ---> slen <--- )&&(str.substr(s,sublen

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(s+sublen<=slen)&&( ---> str <--- .substr(s,sublen)==this.

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
<=slen)&&(str.substr( ---> s <--- ,sublen)==this.eAbbr[0]

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(str.substr(s, ---> sublen <--- )==this.eAbbr[0]))

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
this.eAbbr[0])){ ---> era <--- =(-1);s+=sublen;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
){era=(-1); ---> s <--- +=sublen;}break;case"b":matched

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
era=(-1);s+= ---> sublen <--- ;}break;case"b":matched=false

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
+=sublen;}break;case"b": ---> matched <--- =false;for(sublen=0;s

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
case"b":matched=false;for( ---> sublen <--- =0;s+sublen<slen;sublen

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;for(sublen=0; ---> s <--- +sublen<slen;sublen++){sub

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(sublen=0;s+ ---> sublen <--- <slen;sublen++){sub=str

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
(sublen=0;s+sublen< ---> slen <--- ;sublen++){sub=str.substr

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;s+sublen<slen; ---> sublen <--- ++){sub=str.substr(s

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
+sublen<slen;sublen++){ ---> sub <--- =str.substr(s,sublen);

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<slen;sublen++){sub= ---> str <--- .substr(s,sublen);for(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
++){sub=str.substr( ---> s <--- ,sublen);for(i=0;

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
{sub=str.substr(s, ---> sublen <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,sublen);for( ---> i <--- =0;i<12;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
sublen);for(i=0; ---> i <--- <12;i++){if(this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<12; ---> i <--- ++){if(this.mAbbr[i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(this.mAbbr[ ---> i <--- ]==sub){time.setMonth(i

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.mAbbr[i]== ---> sub <--- ){time.setMonth(i);matched

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
.mAbbr[i]==sub){ ---> time <--- .setMonth(i);matched=true;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
]==sub){time.setMonth( ---> i <--- );matched=true;s+=sublen;

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
){time.setMonth(i); ---> matched <--- =true;s+=sublen;break;}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
setMonth(i);matched=true; ---> s <--- +=sublen;break;}}if(matched

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
i);matched=true;s+= ---> sublen <--- ;break;}}if(matched){

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
+=sublen;break;}}if( ---> matched <--- ){break;}}if(!matched

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
){break;}}if(! ---> matched <--- ){throw"unknown month: "+str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
if(!matched){throw"unknown month: "+ ---> str <--- .substr(s);}break;case

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
){throw"unknown month: "+str.substr( ---> s <--- );}break;case"C":sublen=

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
s);}break;case"C": ---> sublen <--- =this.eAbbr[1].length;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
[1].length;if(( ---> s <--- +sublen<=slen)&&(str.substr

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
].length;if((s+ ---> sublen <--- <=slen)&&(str.substr(s

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
length;if((s+sublen<= ---> slen <--- )&&(str.substr(s,sublen

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(s+sublen<=slen)&&( ---> str <--- .substr(s,sublen)==this.

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
<=slen)&&(str.substr( ---> s <--- ,sublen)==this.eAbbr[1]

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(str.substr(s, ---> sublen <--- )==this.eAbbr[1]))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
this.eAbbr[1])){ ---> s <--- +=sublen;}break;case"c":if

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
eAbbr[1])){s+= ---> sublen <--- ;}break;case"c":if((

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}break;case"c":if(( ---> s <--- +1<slen)&&this.dAt(

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
"c":if((s+1< ---> slen <--- )&&this.dAt(str,s+

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
1<slen)&&this.dAt( ---> str <--- ,s+1)){time.setMonth

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
slen)&&this.dAt(str, ---> s <--- +1)){time.setMonth((

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
(str,s+1)){ ---> time <--- .setMonth((Number(str.substr(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
){time.setMonth((Number( ---> str <--- .substr(s,2))-1

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
setMonth((Number(str.substr( ---> s <--- ,2))-1)%12)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
))-1)%12); ---> s <--- +=2;}else{time.setMonth(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
);s+=2;}else{ ---> time <--- .setMonth((Number(str.substr(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
else{time.setMonth((Number( ---> str <--- .substr(s,1))-1

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
setMonth((Number(str.substr( ---> s <--- ,1))-1)%12)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
))-1)%12); ---> s <--- ++;}break;case"D":if(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}break;case"D":if(( ---> s <--- +1<slen)&&this.dAt(

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
"D":if((s+1< ---> slen <--- )&&this.dAt(str,s+

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
1<slen)&&this.dAt( ---> str <--- ,s+1)){time.setDate

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
slen)&&this.dAt(str, ---> s <--- +1)){time.setDate(Number

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
(str,s+1)){ ---> time <--- .setDate(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
)){time.setDate(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setDate(Number(str.substr( ---> s <--- ,2)));s+=4;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=4;}else{time.setDate(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
);s+=4;}else{ ---> time <--- .setDate(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{time.setDate(Number( ---> str <--- .substr(s,1)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setDate(Number(str.substr( ---> s <--- ,1)));s+=3;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,1))); ---> s <--- +=3;}break;case"d":time

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
+=3;}break;case"d": ---> time <--- .setDate(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"d":time.setDate(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setDate(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;break;case"E":sublen=

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=2;break;case"E": ---> sublen <--- =this.eAbbr[0].length;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].length;if(( ---> s <--- +sublen<=slen)&&(str.substr

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
].length;if((s+ ---> sublen <--- <=slen)&&(str.substr(s

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
length;if((s+sublen<= ---> slen <--- )&&(str.substr(s,sublen

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(s+sublen<=slen)&&( ---> str <--- .substr(s,sublen)==this.

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
<=slen)&&(str.substr( ---> s <--- ,sublen)==this.eAbbr[0]

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(str.substr(s, ---> sublen <--- )==this.eAbbr[0]))

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
this.eAbbr[0])){ ---> era <--- =(-1);s+=sublen;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
){era=(-1); ---> s <--- +=sublen;}else{if((s

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
era=(-1);s+= ---> sublen <--- ;}else{if((s+(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
+=sublen;}else{if(( ---> s <--- +(sublen=this.eAbbr[1]

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if((s+( ---> sublen <--- =this.eAbbr[1].length)

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
.eAbbr[1].length)<= ---> slen <--- )&&(str.substr(s,sublen

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
].length)<=slen)&&( ---> str <--- .substr(s,sublen)==this.

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
<=slen)&&(str.substr( ---> s <--- ,sublen)==this.eAbbr[1]

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(str.substr(s, ---> sublen <--- )==this.eAbbr[1]))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
this.eAbbr[1])){ ---> s <--- +=sublen;}else{throw"unknown era: "+str

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
eAbbr[1])){s+= ---> sublen <--- ;}else{throw"unknown era: "+str.substr

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
+=sublen;}else{throw"unknown era: "+ ---> str <--- .substr(s);}}break;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
else{throw"unknown era: "+str.substr( ---> s <--- );}}break;case"e":if

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}break;case"e":if(( ---> s <--- +1<slen)&&this.dAt(

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
"e":if((s+1< ---> slen <--- )&&this.dAt(str,s+

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
1<slen)&&this.dAt( ---> str <--- ,s+1)){time.setDate

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
slen)&&this.dAt(str, ---> s <--- +1)){time.setDate(Number

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
(str,s+1)){ ---> time <--- .setDate(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
)){time.setDate(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setDate(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;}else{time.setDate(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
);s+=2;}else{ ---> time <--- .setDate(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{time.setDate(Number( ---> str <--- .substr(s,1)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setDate(Number(str.substr( ---> s <--- ,1)));s++;}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,1))); ---> s <--- ++;}break;case"f":s+=

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
s++;}break;case"f": ---> s <--- +=6;break;case"H":time.

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=6;break;case"H": ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"H":time.setHours(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;break;case"h":case"I"

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"h":case"I": ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"I":time.setHours(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;break;case"i":time.

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=2;break;case"i": ---> time <--- .setMinutes(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"i":time.setMinutes(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setMinutes(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;break;case"k":if(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"k":if(( ---> s <--- +1<slen)&&this.dAt(

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
"k":if((s+1< ---> slen <--- )&&this.dAt(str,s+

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
1<slen)&&this.dAt( ---> str <--- ,s+1)){time.setHours

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
slen)&&this.dAt(str, ---> s <--- +1)){time.setHours(Number

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
(str,s+1)){ ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
)){time.setHours(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;}else{time.setHours(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
);s+=2;}else{ ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{time.setHours(Number( ---> str <--- .substr(s,1)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,1)));s++;}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,1))); ---> s <--- ++;}break;case"l":if(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}break;case"l":if(( ---> s <--- +1<slen)&&this.dAt(

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
"l":if((s+1< ---> slen <--- )&&this.dAt(str,s+

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
1<slen)&&this.dAt( ---> str <--- ,s+1)){time.setHours

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
slen)&&this.dAt(str, ---> s <--- +1)){time.setHours(Number

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
(str,s+1)){ ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
)){time.setHours(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;}else{time.setHours(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
);s+=2;}else{ ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{time.setHours(Number( ---> str <--- .substr(s,1)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,1)));s++;}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,1))); ---> s <--- ++;}break;case"M":matched=

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
s++;}break;case"M": ---> matched <--- =false;for(sublen=_shortMon;s

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
case"M":matched=false;for( ---> sublen <--- =_shortMon;s+sublen<=slen;sublen

[WARNING] The symbol _shortMon is declared but is apparently never used.
This code can probably be written in a more compact way.
:matched=false;for(sublen= ---> _shortMon <--- ;s+sublen<=slen;sublen++)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;for(sublen=_shortMon; ---> s <--- +sublen<=slen;sublen++){if

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(sublen=_shortMon;s+ ---> sublen <--- <=slen;sublen++){if(sublen

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
(sublen=_shortMon;s+sublen<= ---> slen <--- ;sublen++){if(sublen>_longMon

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
=_shortMon;s+sublen<=slen; ---> sublen <--- ++){if(sublen>_longMon){

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
<=slen;sublen++){if( ---> sublen <--- >_longMon){break;}sub=str

[WARNING] The symbol _longMon is declared but is apparently never used.
This code can probably be written in a more compact way.
;sublen++){if(sublen> ---> _longMon <--- ){break;}sub=str.substr

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
(sublen>_longMon){break;} ---> sub <--- =str.substr(s,sublen);

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
>_longMon){break;}sub= ---> str <--- .substr(s,sublen);for(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}sub=str.substr( ---> s <--- ,sublen);for(i=0;

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
}sub=str.substr(s, ---> sublen <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,sublen);for( ---> i <--- =0;i<12;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
sublen);for(i=0; ---> i <--- <12;i++){if(this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<12; ---> i <--- ++){if(this.mNames[i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(this.mNames[ ---> i <--- ]==sub){time.setMonth(i

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.mNames[i]== ---> sub <--- ){time.setMonth(i);matched

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
.mNames[i]==sub){ ---> time <--- .setMonth(i);matched=true;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
]==sub){time.setMonth( ---> i <--- );matched=true;s+=sublen;

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
){time.setMonth(i); ---> matched <--- =true;s+=sublen;break;}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
setMonth(i);matched=true; ---> s <--- +=sublen;break;}}if(matched

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
i);matched=true;s+= ---> sublen <--- ;break;}}if(matched){

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
+=sublen;break;}}if( ---> matched <--- ){break;}}break;case"m"

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}}break;case"m": ---> time <--- .setMonth((Number(str.substr(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
"m":time.setMonth((Number( ---> str <--- .substr(s,2))-1

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
setMonth((Number(str.substr( ---> s <--- ,2))-1)%12)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
))-1)%12); ---> s <--- +=2;break;case"p":if(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
2;break;case"p":if( ---> time <--- .getHours()==12){if(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
getHours()==12){if( ---> str <--- .charAt(s)=="A"){time

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
12){if(str.charAt( ---> s <--- )=="A"){time.setHours(0

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(s)=="A"){ ---> time <--- .setHours(0);}}else{

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
0);}}else{if( ---> str <--- .charAt(s)=="P"){time

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(str.charAt( ---> s <--- )=="P"){time.setHours(time

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(s)=="P"){ ---> time <--- .setHours(time.getHours()+12

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="P"){time.setHours( ---> time <--- .getHours()+12);}}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
getHours()+12);}} ---> s <--- +=2;break;case"r":time.

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=2;break;case"r": ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"r":time.setHours(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,2)));time.setMinutes(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> time <--- .setMinutes(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
));time.setMinutes(Number( ---> str <--- .substr(s+3,2))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setMinutes(Number(str.substr( ---> s <--- +3,2)));time.

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
s+3,2))); ---> time <--- .setSeconds(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
));time.setSeconds(Number( ---> str <--- .substr(s+6,2))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setSeconds(Number(str.substr( ---> s <--- +6,2)));if(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
6,2)));if( ---> time <--- .getHours()==12){if(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
getHours()==12){if( ---> str <--- .charAt(s)=="A"){time

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
12){if(str.charAt( ---> s <--- )=="A"){time.setHours(0

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(s)=="A"){ ---> time <--- .setHours(0);}}else{

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
0);}}else{if( ---> str <--- .charAt(s)=="P"){time

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(str.charAt( ---> s <--- )=="P"){time.setHours(time

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(s)=="P"){ ---> time <--- .setHours(time.getHours()+12

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="P"){time.setHours( ---> time <--- .getHours()+12);}}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
getHours()+12);}} ---> s <--- +=10;break;case"S":case"s"

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
;break;case"S":case"s": ---> time <--- .setSeconds(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"s":time.setSeconds(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setSeconds(Number(str.substr( ---> s <--- ,2)));s+=2;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> s <--- +=2;break;case"T":time.

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=2;break;case"T": ---> time <--- .setHours(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"T":time.setHours(Number( ---> str <--- .substr(s,2)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setHours(Number(str.substr( ---> s <--- ,2)));time.setMinutes(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,2))); ---> time <--- .setMinutes(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
));time.setMinutes(Number( ---> str <--- .substr(s+3,2))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setMinutes(Number(str.substr( ---> s <--- +3,2)));time.

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
s+3,2))); ---> time <--- .setSeconds(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
));time.setSeconds(Number( ---> str <--- .substr(s+6,2))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setSeconds(Number(str.substr( ---> s <--- +6,2)));s+=

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
s+6,2))); ---> s <--- +=8;break;case"W":matched=

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=8;break;case"W": ---> matched <--- =false;for(sublen=_shortDay;s

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
case"W":matched=false;for( ---> sublen <--- =_shortDay;s+sublen<=slen;sublen

[WARNING] The symbol _shortDay is declared but is apparently never used.
This code can probably be written in a more compact way.
:matched=false;for(sublen= ---> _shortDay <--- ;s+sublen<=slen;sublen++)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;for(sublen=_shortDay; ---> s <--- +sublen<=slen;sublen++){if

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
;for(sublen=_shortDay;s+ ---> sublen <--- <=slen;sublen++){if(sublen

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
(sublen=_shortDay;s+sublen<= ---> slen <--- ;sublen++){if(sublen>_longDay

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
=_shortDay;s+sublen<=slen; ---> sublen <--- ++){if(sublen>_longDay){

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
<=slen;sublen++){if( ---> sublen <--- >_longDay){break;}sub=str

[WARNING] The symbol _longDay is declared but is apparently never used.
This code can probably be written in a more compact way.
;sublen++){if(sublen> ---> _longDay <--- ){break;}sub=str.substr

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
(sublen>_longDay){break;} ---> sub <--- =str.substr(s,sublen);

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
>_longDay){break;}sub= ---> str <--- .substr(s,sublen);for(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}sub=str.substr( ---> s <--- ,sublen);for(i=0;

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
}sub=str.substr(s, ---> sublen <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,sublen);for( ---> i <--- =0;i<7;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
sublen);for(i=0; ---> i <--- <7;i++){if(this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<7; ---> i <--- ++){if(this.dNames[i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(this.dNames[ ---> i <--- ]==sub){matched=true;s

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.dNames[i]== ---> sub <--- ){matched=true;s+=sublen;

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
.dNames[i]==sub){ ---> matched <--- =true;s+=sublen;break;}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
]==sub){matched=true; ---> s <--- +=sublen;break;}}if(matched

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
sub){matched=true;s+= ---> sublen <--- ;break;}}if(matched){

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
+=sublen;break;}}if( ---> matched <--- ){break;}}break;case"w"

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}}break;case"w": ---> s <--- +=1;break;case"Y":i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=1;break;case"Y": ---> i <--- =4;if(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"Y":i=4;if( ---> str <--- .substr(s,1)=="-")

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
=4;if(str.substr( ---> s <--- ,1)=="-"){i++;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(s,1)=="-"){ ---> i <--- ++;}time.setFullYear(Number(str

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="-"){i++;} ---> time <--- .setFullYear(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
++;}time.setFullYear(Number( ---> str <--- .substr(s,i)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setFullYear(Number(str.substr( ---> s <--- ,i)));s+=i;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(Number(str.substr(s, ---> i <--- )));s+=i;break;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,i))); ---> s <--- +=i;break;case"y":i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
s,i)));s+= ---> i <--- ;break;case"y":i=2;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=i;break;case"y": ---> i <--- =2;if(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"y":i=2;if( ---> str <--- .substr(s,1)=="-")

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
=2;if(str.substr( ---> s <--- ,1)=="-"){i++;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(s,1)=="-"){ ---> i <--- ++;}temp=Number(str.substr

[WARNING] The symbol temp is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="-"){i++;} ---> temp <--- =Number(str.substr(s,i

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
{i++;}temp=Number( ---> str <--- .substr(s,i));if

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}temp=Number(str.substr( ---> s <--- ,i));if(typeof(this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=Number(str.substr(s, ---> i <--- ));if(typeof(this.baseYear

[WARNING] The symbol temp is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.baseYear)=="number"){ ---> temp <--- +=this.baseYear;}else{if(

[WARNING] The symbol temp is declared but is apparently never used.
This code can probably be written in a more compact way.
this.baseYear;}else{if( ---> temp <--- <70){temp+=2000;}else

[WARNING] The symbol temp is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(temp<70){ ---> temp <--- +=2000;}else{temp+=1900;

[WARNING] The symbol temp is declared but is apparently never used.
This code can probably be written in a more compact way.
){temp+=2000;}else{ ---> temp <--- +=1900;}}time.setFullYear(temp

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{temp+=1900;}} ---> time <--- .setFullYear(temp);s+=i;

[WARNING] The symbol temp is declared but is apparently never used.
This code can probably be written in a more compact way.
+=1900;}}time.setFullYear( ---> temp <--- );s+=i;break;case"Z"

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}}time.setFullYear(temp); ---> s <--- +=i;break;case"Z":time.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
time.setFullYear(temp);s+= ---> i <--- ;break;case"Z":time.setFullYear(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=i;break;case"Z": ---> time <--- .setFullYear(Number(str.substr(s

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
case"Z":time.setFullYear(Number( ---> str <--- .substr(s,4)));

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
.setFullYear(Number(str.substr( ---> s <--- ,4)));s+=4;

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
substr(s,4))); ---> s <--- +=4;break;case"z":i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
s+=4;break;case"z": ---> i <--- =0;while((s<slen)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
"z":i=0;while(( ---> s <--- <slen)&&this.dAt(str,

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
i=0;while((s< ---> slen <--- )&&this.dAt(str,s)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
s<slen)&&this.dAt( ---> str <--- ,s)){i=(i*

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
slen)&&this.dAt(str, ---> s <--- )){i=(i*10)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.dAt(str,s)){ ---> i <--- =(i*10)+Number(str

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
str,s)){i=( ---> i <--- *10)+Number(str.charAt(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
=(i*10)+Number( ---> str <--- .charAt(s++));}time

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
10)+Number(str.charAt( ---> s <--- ++));}time.setFullYear(i

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(s++));} ---> time <--- .setFullYear(i);break;case"#"

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++));}time.setFullYear( ---> i <--- );break;case"#":if(str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;case"#":if( ---> str <--- .charAt(s++)=="-"){

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
case"#":if(str.charAt( ---> s <--- ++)=="-"){tzSign=(-

[WARNING] The symbol tzSign is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(s++)=="-"){ ---> tzSign <--- =(-1);}for(tzOff

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
=(-1);}for( ---> tzOff <--- =0;(s<slen)&&(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
;}for(tzOff=0;( ---> s <--- <slen)&&(String(i=Number

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
for(tzOff=0;(s< ---> slen <--- )&&(String(i=Number(str

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(s<slen)&&(String( ---> i <--- =Number(str.charAt(s))

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(String(i=Number( ---> str <--- .charAt(s)))==str.

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=Number(str.charAt( ---> s <--- )))==str.charAt(s)

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
str.charAt(s)))== ---> str <--- .charAt(s));s++)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
s)))==str.charAt( ---> s <--- ));s++){tzOff=(

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
==str.charAt(s)); ---> s <--- ++){tzOff=(tzOff*10)

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
(s));s++){ ---> tzOff <--- =(tzOff*10)+i;}

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
);s++){tzOff=( ---> tzOff <--- *10)+i;}tzOff*=tzSign

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{tzOff=(tzOff*10)+ ---> i <--- ;}tzOff*=tzSign;break;case"@"

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
(tzOff*10)+i;} ---> tzOff <--- *=tzSign;break;case"@":_offPSI=

[WARNING] The symbol tzSign is declared but is apparently never used.
This code can probably be written in a more compact way.
*10)+i;}tzOff*= ---> tzSign <--- ;break;case"@":_offPSI=(-

[WARNING] The symbol _offPSI is declared but is apparently never used.
This code can probably be written in a more compact way.
tzOff*=tzSign;break;case"@": ---> _offPSI <--- =(-1);if(AnyTime.

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
_offPSI=(-1);if( ---> AnyTime <--- .utcLabel){matched=false;for(

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(AnyTime.utcLabel){ ---> matched <--- =false;for(tzOff in AnyTime.utcLabel

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
utcLabel){matched=false;for( ---> tzOff <---  in AnyTime.utcLabel){if(!Array

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
{matched=false;for(tzOff in  ---> AnyTime <--- .utcLabel){if(!Array.prototype

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(!Array.prototype[ ---> tzOff <--- ]){for(i=0;i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.prototype[tzOff]){for( ---> i <--- =0;i<AnyTime.utcLabel[tzOff

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
]){for(i=0; ---> i <--- <AnyTime.utcLabel[tzOff].length;

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
{for(i=0;i< ---> AnyTime <--- .utcLabel[tzOff].length;i++

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;i<AnyTime.utcLabel[ ---> tzOff <--- ].length;i++){sub=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime.utcLabel[tzOff].length; ---> i <--- ++){sub=AnyTime.utcLabel[tzOff

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
tzOff].length;i++){ ---> sub <--- =AnyTime.utcLabel[tzOff][i]

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
.length;i++){sub= ---> AnyTime <--- .utcLabel[tzOff][i];sublen

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
++){sub=AnyTime.utcLabel[ ---> tzOff <--- ][i];sublen=sub.length

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
sub=AnyTime.utcLabel[tzOff][ ---> i <--- ];sublen=sub.length;if(

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
.utcLabel[tzOff][i]; ---> sublen <--- =sub.length;if((s+

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
[tzOff][i];sublen= ---> sub <--- .length;if((s+sublen<=

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
sublen=sub.length;if(( ---> s <--- +sublen<=slen)&&(str.substr

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
sub.length;if((s+ ---> sublen <--- <=slen)&&(str.substr(s

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
length;if((s+sublen<= ---> slen <--- )&&(str.substr(s,sublen

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(s+sublen<=slen)&&( ---> str <--- .substr(s,sublen)==sub)

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
<=slen)&&(str.substr( ---> s <--- ,sublen)==sub)){s+=

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(str.substr(s, ---> sublen <--- )==sub)){s+=sublen;

[WARNING] The symbol sub is declared but is apparently never used.
This code can probably be written in a more compact way.
str.substr(s,sublen)== ---> sub <--- )){s+=sublen;matched=true

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
s,sublen)==sub)){ ---> s <--- +=sublen;matched=true;break;}

[WARNING] The symbol sublen is declared but is apparently never used.
This code can probably be written in a more compact way.
sublen)==sub)){s+= ---> sublen <--- ;matched=true;break;}}if

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
==sub)){s+=sublen; ---> matched <--- =true;break;}}if(matched

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
=true;break;}}if( ---> matched <--- ){break;}}}if(matched

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
){break;}}}if( ---> matched <--- ){_offPSI=i;tzOff=Number(

[WARNING] The symbol _offPSI is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}}if(matched){ ---> _offPSI <--- =i;tzOff=Number(tzOff);

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(matched){_offPSI= ---> i <--- ;tzOff=Number(tzOff);break;

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
if(matched){_offPSI=i; ---> tzOff <--- =Number(tzOff);break;}}

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
{_offPSI=i;tzOff=Number( ---> tzOff <--- );break;}}if((s

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
);break;}}if(( ---> s <--- +9<slen)||(str.substr

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if((s+9< ---> slen <--- )||(str.substr(s,3

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
(s+9<slen)||( ---> str <--- .substr(s,3)!="UTC")

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
<slen)||(str.substr( ---> s <--- ,3)!="UTC")){throw"unknown time zone: "

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
)!="UTC")){throw"unknown time zone: "+ ---> str <--- .substr(s);}s+=3

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
){throw"unknown time zone: "+str.substr( ---> s <--- );}s+=3;ch=":"

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
+str.substr(s);} ---> s <--- +=3;ch=":";case"-":

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
(s);}s+=3; ---> ch <--- =":";case"-":case"+":case

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
:case":":case";":if( ---> str <--- .charAt(s++)=="-"){

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
case";":if(str.charAt( ---> s <--- ++)=="-"){tzSign=(-

[WARNING] The symbol tzSign is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(s++)=="-"){ ---> tzSign <--- =(-1);}tzOff=Number

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
{tzSign=(-1);} ---> tzOff <--- =Number(str.charAt(s))

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
-1);}tzOff=Number( ---> str <--- .charAt(s));if((

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
}tzOff=Number(str.charAt( ---> s <--- ));if((ch=="+")

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(s));if(( ---> ch <--- =="+")||(ch==":")||

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
if((ch=="+")||( ---> ch <--- ==":")||((s+3<

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
||(ch==":")||(( ---> s <--- +3<slen)&&(String(Number

[WARNING] The symbol slen is declared but is apparently never used.
This code can probably be written in a more compact way.
":")||((s+3< ---> slen <--- )&&(String(Number(str.charAt

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
<slen)&&(String(Number( ---> str <--- .charAt(s+3)))!==

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
(String(Number(str.charAt( ---> s <--- +3)))!==str.charAt(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(s+3)))!== ---> str <--- .charAt(s+3))))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
3)))!==str.charAt( ---> s <--- +3)))){tzOff=(

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
(s+3)))){ ---> tzOff <--- =(tzOff*10)+Number(str

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
3)))){tzOff=( ---> tzOff <--- *10)+Number(str.charAt(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
=(tzOff*10)+Number( ---> str <--- .charAt(++s));}tzOff

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
)+Number(str.charAt(++ ---> s <--- ));}tzOff*=60;if(

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
.charAt(++s));} ---> tzOff <--- *=60;if((ch==":")

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
;}tzOff*=60;if(( ---> ch <--- ==":")||(ch==";"))

[WARNING] The symbol ch is declared but is apparently never used.
This code can probably be written in a more compact way.
if((ch==":")||( ---> ch <--- ==";")){s++;}tzOff

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(ch==";")){ ---> s <--- ++;}tzOff=(tzOff+Number(

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
==";")){s++;} ---> tzOff <--- =(tzOff+Number(str.substr(

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
){s++;}tzOff=( ---> tzOff <--- +Number(str.substr(++s,

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
;}tzOff=(tzOff+Number( ---> str <--- .substr(++s,2)))

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
tzOff+Number(str.substr(++ ---> s <--- ,2)))*tzSign;s+=

[WARNING] The symbol tzSign is declared but is apparently never used.
This code can probably be written in a more compact way.
(++s,2)))* ---> tzSign <--- ;s+=2;break;case"j":

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
s,2)))*tzSign; ---> s <--- +=2;break;case"j":case"U"

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
throw"%"+this.fmt.charAt( ---> f <--- +1)+" not implemented by AnyTime.Converter";case"%":default

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
throw"%"+this.fmt.charAt( ---> f <--- +1)+" reserved for future use";break;}f

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
+1)+" reserved for future use";break;} ---> f <--- ++;}else{if(this.fmt

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(this.fmt.charAt( ---> f <--- )!=str.charAt(s)){

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
this.fmt.charAt(f)!= ---> str <--- .charAt(s)){throwstr+

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
charAt(f)!=str.charAt( ---> s <--- )){throwstr+' is not in "'+this.

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
str.charAt(s)){throw ---> str <--- +' is not in "'+this.fmt+'" format';}

[WARNING] The symbol s is declared but is apparently never used.
This code can probably be written in a more compact way.
this.fmt+'" format';}else{ ---> s <--- ++;}}}if(era<0

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
{s++;}}}if( ---> era <--- <0){time.setFullYear(0-

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(era<0){ ---> time <--- .setFullYear(0-time.getFullYear()

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
0){time.setFullYear(0- ---> time <--- .getFullYear());}if(tzOff

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
.getFullYear());}if( ---> tzOff <--- !=Number.MIN_VALUE){if(_captureOffset)

[WARNING] The symbol _captureOffset is declared but is apparently never used.
This code can probably be written in a more compact way.
tzOff!=Number.MIN_VALUE){if( ---> _captureOffset <--- ){_offCap=tzOff;}else{time

[WARNING] The symbol _offCap is declared but is apparently never used.
This code can probably be written in a more compact way.
.MIN_VALUE){if(_captureOffset){ ---> _offCap <--- =tzOff;}else{time.setTime(

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(_captureOffset){_offCap= ---> tzOff <--- ;}else{time.setTime((time

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
){_offCap=tzOff;}else{ ---> time <--- .setTime((time.getTime()-

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
;}else{time.setTime(( ---> time <--- .getTime()-(tzOff*60000)

[WARNING] The symbol tzOff is declared but is apparently never used.
This code can probably be written in a more compact way.
((time.getTime()-( ---> tzOff <--- *60000))-(time.getTimezoneOffset(

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
-(tzOff*60000))-( ---> time <--- .getTimezoneOffset()*60000));}

[WARNING] The symbol time is declared but is apparently never used.
This code can probably be written in a more compact way.
)*60000));}}return ---> time <--- ;};this.setUtcFormatOffsetAlleged=function(offset

[WARNING] The symbol prev is declared but is apparently never used.
This code can probably be written in a more compact way.
.setUtcFormatOffsetAlleged=function(offset){var  ---> prev <--- =_offAl;_offAl=offset;returnprev;

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(offset){var prev= ---> _offAl <--- ;_offAl=offset;returnprev;};

[WARNING] The symbol _offAl is declared but is apparently never used.
This code can probably be written in a more compact way.
(offset){var prev=_offAl; ---> _offAl <--- =offset;returnprev;};this.

[WARNING] The symbol offset is declared but is apparently never used.
This code can probably be written in a more compact way.
){var prev=_offAl;_offAl= ---> offset <--- ;returnprev;};this.setUtcFormatOffsetSubIndex=

[WARNING] The symbol prev is declared but is apparently never used.
This code can probably be written in a more compact way.
prev=_offAl;_offAl=offset;return ---> prev <--- ;};this.setUtcFormatOffsetSubIndex=function(subIndex

[WARNING] The symbol prev is declared but is apparently never used.
This code can probably be written in a more compact way.
.setUtcFormatOffsetSubIndex=function(subIndex){var  ---> prev <--- =_offFSI;_offFSI=subIndex;returnprev;

[WARNING] The symbol _offFSI is declared but is apparently never used.
This code can probably be written in a more compact way.
=function(subIndex){var prev= ---> _offFSI <--- ;_offFSI=subIndex;returnprev;};

[WARNING] The symbol _offFSI is declared but is apparently never used.
This code can probably be written in a more compact way.
(subIndex){var prev=_offFSI; ---> _offFSI <--- =subIndex;returnprev;};(function

[WARNING] The symbol subIndex is declared but is apparently never used.
This code can probably be written in a more compact way.
){var prev=_offFSI;_offFSI= ---> subIndex <--- ;returnprev;};(function(_this

[WARNING] The symbol prev is declared but is apparently never used.
This code can probably be written in a more compact way.
prev=_offFSI;_offFSI=subIndex;return ---> prev <--- ;};(function(_this){var 

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
};(function(_this){var  ---> i <--- ,len;options=jQuery.extend(true

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(_this){var i, ---> len <--- ;options=jQuery.extend(true,{

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(_this){var i,len; ---> options <--- =jQuery.extend(true,{},

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery.extend(true,{}, ---> options <--- ||{});if(options.baseYear

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
,options||{});if( ---> options <--- .baseYear){_this.baseYear=Number(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(options.baseYear){ ---> _this <--- .baseYear=Number(options.baseYear);

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
baseYear){_this.baseYear=Number( ---> options <--- .baseYear);}if(options.format

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.baseYear);}if( ---> options <--- .format){_this.fmt=options.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(options.format){ ---> _this <--- .fmt=options.format;}_flen=

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
options.format){_this.fmt= ---> options <--- .format;}_flen=_this.fmt.

[WARNING] The symbol _flen is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.fmt=options.format;} ---> _flen <--- =_this.fmt.length;if(options

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
fmt=options.format;}_flen= ---> _this <--- .fmt.length;if(options.dayAbbreviations

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
=_this.fmt.length;if( ---> options <--- .dayAbbreviations){_this.dAbbr=$.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
length;if(options.dayAbbreviations){ ---> _this <--- .dAbbr=$.makeArray(options.dayAbbreviations

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
options.dayAbbreviations){_this.dAbbr= ---> $ <--- .makeArray(options.dayAbbreviations);}if

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
{_this.dAbbr=$.makeArray( ---> options <--- .dayAbbreviations);}if(options.dayNames

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.dayAbbreviations);}if( ---> options <--- .dayNames){_this.dNames=$.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(options.dayNames){ ---> _this <--- .dNames=$.makeArray(options.dayNames

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
options.dayNames){_this.dNames= ---> $ <--- .makeArray(options.dayNames);_longDay=

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
{_this.dNames=$.makeArray( ---> options <--- .dayNames);_longDay=1;_shortDay=

[WARNING] The symbol _longDay is declared but is apparently never used.
This code can probably be written in a more compact way.
$.makeArray(options.dayNames); ---> _longDay <--- =1;_shortDay=1000;for(i

[WARNING] The symbol _shortDay is declared but is apparently never used.
This code can probably be written in a more compact way.
options.dayNames);_longDay=1; ---> _shortDay <--- =1000;for(i=0;i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;_shortDay=1000;for( ---> i <--- =0;i<7;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=1000;for(i=0; ---> i <--- <7;i++){len=_this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<7; ---> i <--- ++){len=_this.dNames[i

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
;i<7;i++){ ---> len <--- =_this.dNames[i].length;

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
<7;i++){len= ---> _this <--- .dNames[i].length;if(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){len=_this.dNames[ ---> i <--- ].length;if(len>_longDay)

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
dNames[i].length;if( ---> len <--- >_longDay){_longDay=len;}if

[WARNING] The symbol _longDay is declared but is apparently never used.
This code can probably be written in a more compact way.
i].length;if(len> ---> _longDay <--- ){_longDay=len;}if(len

[WARNING] The symbol _longDay is declared but is apparently never used.
This code can probably be written in a more compact way.
length;if(len>_longDay){ ---> _longDay <--- =len;}if(len<_shortDay)

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
if(len>_longDay){_longDay= ---> len <--- ;}if(len<_shortDay){_shortDay

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
){_longDay=len;}if( ---> len <--- <_shortDay){_shortDay=len;}}

[WARNING] The symbol _shortDay is declared but is apparently never used.
This code can probably be written in a more compact way.
_longDay=len;}if(len< ---> _shortDay <--- ){_shortDay=len;}}}if

[WARNING] The symbol _shortDay is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(len<_shortDay){ ---> _shortDay <--- =len;}}}if(options.

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
if(len<_shortDay){_shortDay= ---> len <--- ;}}}if(options.eraAbbreviations)

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
_shortDay=len;}}}if( ---> options <--- .eraAbbreviations){_this.eAbbr=$.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(options.eraAbbreviations){ ---> _this <--- .eAbbr=$.makeArray(options.eraAbbreviations

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
options.eraAbbreviations){_this.eAbbr= ---> $ <--- .makeArray(options.eraAbbreviations);}if

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
{_this.eAbbr=$.makeArray( ---> options <--- .eraAbbreviations);}if(options.monthAbbreviations

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.eraAbbreviations);}if( ---> options <--- .monthAbbreviations){_this.mAbbr=$.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(options.monthAbbreviations){ ---> _this <--- .mAbbr=$.makeArray(options.monthAbbreviations

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
options.monthAbbreviations){_this.mAbbr= ---> $ <--- .makeArray(options.monthAbbreviations);}if

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
{_this.mAbbr=$.makeArray( ---> options <--- .monthAbbreviations);}if(options.monthNames

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.monthAbbreviations);}if( ---> options <--- .monthNames){_this.mNames=$.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(options.monthNames){ ---> _this <--- .mNames=$.makeArray(options.monthNames

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
options.monthNames){_this.mNames= ---> $ <--- .makeArray(options.monthNames);_longMon=

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
{_this.mNames=$.makeArray( ---> options <--- .monthNames);_longMon=1;_shortMon=

[WARNING] The symbol _longMon is declared but is apparently never used.
This code can probably be written in a more compact way.
$.makeArray(options.monthNames); ---> _longMon <--- =1;_shortMon=1000;for(i

[WARNING] The symbol _shortMon is declared but is apparently never used.
This code can probably be written in a more compact way.
options.monthNames);_longMon=1; ---> _shortMon <--- =1000;for(i=0;i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=1;_shortMon=1000;for( ---> i <--- =0;i<12;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=1000;for(i=0; ---> i <--- <12;i++){var len=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<12; ---> i <--- ++){var len=_this.mNames[

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
i<12;i++){var  ---> len <--- =_this.mNames[i].length;

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
12;i++){var len= ---> _this <--- .mNames[i].length;if(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
){var len=_this.mNames[ ---> i <--- ].length;if(len>_longMon)

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
mNames[i].length;if( ---> len <--- >_longMon){_longMon=len;}if

[WARNING] The symbol _longMon is declared but is apparently never used.
This code can probably be written in a more compact way.
i].length;if(len> ---> _longMon <--- ){_longMon=len;}if(len

[WARNING] The symbol _longMon is declared but is apparently never used.
This code can probably be written in a more compact way.
length;if(len>_longMon){ ---> _longMon <--- =len;}if(len<_shortMon)

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
if(len>_longMon){_longMon= ---> len <--- ;}if(len<_shortMon){_shortMon

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
){_longMon=len;}if( ---> len <--- <_shortMon){_shortMon=len;}}

[WARNING] The symbol _shortMon is declared but is apparently never used.
This code can probably be written in a more compact way.
_longMon=len;}if(len< ---> _shortMon <--- ){_shortMon=len;}}}if

[WARNING] The symbol _shortMon is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(len<_shortMon){ ---> _shortMon <--- =len;}}}if(typeofoptions

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
if(len<_shortMon){_shortMon= ---> len <--- ;}}}if(typeofoptions.utcFormatOffsetImposed

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
=len;}}}if(typeof ---> options <--- .utcFormatOffsetImposed!="undefined"){_offF=options.

[WARNING] The symbol _offF is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofoptions.utcFormatOffsetImposed!="undefined"){ ---> _offF <--- =options.utcFormatOffsetImposed;}if(typeofoptions

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
options.utcFormatOffsetImposed!="undefined"){_offF= ---> options <--- .utcFormatOffsetImposed;}if(typeofoptions.utcParseOffsetAssumed

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
=options.utcFormatOffsetImposed;}if(typeof ---> options <--- .utcParseOffsetAssumed!="undefined"){_offP=options.

[WARNING] The symbol _offP is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofoptions.utcParseOffsetAssumed!="undefined"){ ---> _offP <--- =options.utcParseOffsetAssumed;}if(options.

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
options.utcParseOffsetAssumed!="undefined"){_offP= ---> options <--- .utcParseOffsetAssumed;}if(options.utcParseOffsetCapture)

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
_offP=options.utcParseOffsetAssumed;}if( ---> options <--- .utcParseOffsetCapture){_captureOffset=true;}}

[WARNING] The symbol _captureOffset is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(options.utcParseOffsetCapture){ ---> _captureOffset <--- =true;}})(this);

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
}})(this);}; ---> AnyTime <--- .noPicker=function(id){if(

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
noPicker=function(id){if( ---> __pickers <--- [id]){__pickers[id].

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
function(id){if(__pickers[ ---> id <--- ]){__pickers[id].cleanup(

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(__pickers[id]){ ---> __pickers <--- [id].cleanup();delete __pickers

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
(__pickers[id]){__pickers[ ---> id <--- ].cleanup();delete __pickers[id

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
[id].cleanup();delete  ---> __pickers <--- [id];}};AnyTime.picker

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
].cleanup();delete __pickers[ ---> id <--- ];}};AnyTime.picker=function

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
delete __pickers[id];}}; ---> AnyTime <--- .picker=function(id,options){

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
function(id,options){if( ---> __pickers <--- [id]){throw'Cannot create another AnyTime picker for "'+id+

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
id,options){if(__pickers[ ---> id <--- ]){throw'Cannot create another AnyTime picker for "'+id+'"';

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
__pickers[id]){throw'Cannot create another AnyTime picker for "'+ ---> id <--- +'"';}var _this=null;__pickers

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
throw'Cannot create another AnyTime picker for "'+id+'"';}var  ---> _this <--- =null;__pickers[id]={twelveHr

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
+'"';}var _this=null; ---> __pickers <--- [id]={twelveHr:false,ajaxOpts

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var _this=null;__pickers[ ---> id <--- ]={twelveHr:false,ajaxOpts:null

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
null,initialize:function(id){ ---> _this <--- =this;this.id="AnyTime--"+id

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
=this;this.id="AnyTime--"+ ---> id <--- ;options=jQuery.extend(true,{

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.id="AnyTime--"+id; ---> options <--- =jQuery.extend(true,{},

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery.extend(true,{}, ---> options <--- ||{});options.utcParseOffsetCapture=true

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
{},options||{}); ---> options <--- .utcParseOffsetCapture=true;this.conv=new 

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
utcParseOffsetCapture=true;this.conv=new  ---> AnyTime <--- .Converter(options);if(options.

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
this.conv=new AnyTime.Converter( ---> options <--- );if(options.placement){if

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime.Converter(options);if( ---> options <--- .placement){if(options.placement==

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
if(options.placement){if( ---> options <--- .placement=="inline"){this.pop=

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
pop=false;}else{if( ---> options <--- .placement!="popup"){throw"unknown placement: "+options

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
.placement!="popup"){throw"unknown placement: "+ ---> options <--- .placement;}}}if(options.

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
options.placement;}}}if( ---> options <--- .ajaxOptions){this.ajaxOpts=jQuery.

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
ajaxOpts=jQuery.extend({}, ---> options <--- .ajaxOptions);if(!this.ajaxOpts

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
success=function(data,status){ ---> _this <--- .inp.val(data);};

[WARNING] The symbol data is declared but is apparently never used.
This code can probably be written in a more compact way.
status){_this.inp.val( ---> data <--- );};}}if(options.

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
data);};}}if( ---> options <--- .earliest){if(typeofoptions.earliest

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.earliest){if(typeof ---> options <--- .earliest.getTime=="function"){this.

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime=="function"){this.earliest= ---> options <--- .earliest.getTime();}else{

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
.earliest=this.conv.parse( ---> options <--- .earliest.toString());}}

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
toString());}}if( ---> options <--- .firstDOW){if((options.firstDOW

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.firstDOW){if(( ---> options <--- .firstDOW<0)||(options.firstDOW

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.firstDOW<0)||( ---> options <--- .firstDOW>6)){thrownew Exception

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
)){thrownew Exception("illegal firstDOW: "+ ---> options <--- .firstDOW);}this.fDOW=options

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
.firstDOW);}this.fDOW= ---> options <--- .firstDOW;}if(options.latest)

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
fDOW=options.firstDOW;}if( ---> options <--- .latest){if(typeofoptions.latest

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
(options.latest){if(typeof ---> options <--- .latest.getTime=="function"){this.

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime=="function"){this.latest= ---> options <--- .latest.getTime();}else{

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
.latest=this.conv.parse( ---> options <--- .latest.toString());}}

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
));}}this.lX= ---> options <--- .labelDismiss||"X";this.lY=options

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
.labelDismiss||"X";this.lY= ---> options <--- .labelYear||"Year";this.lO=options

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
.labelYear||"Year";this.lO= ---> options <--- .labelTimeZone||"Time Zone";var i;var t

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
lO=options.labelTimeZone||"Time Zone";var  ---> i <--- ;var t;var lab;var shownFields=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.labelTimeZone||"Time Zone";var i;var  ---> t <--- ;var lab;var shownFields=0;var 

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
"Time Zone";var i;var t;var  ---> lab <--- ;var shownFields=0;var format=this

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
i;var t;var lab;var  ---> shownFields <--- =0;var format=this.conv.

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
var lab;var shownFields=0;var  ---> format <--- =this.conv.fmt;if(typeof

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
this.conv.fmt;if(typeof ---> options <--- .askEra!="undefined"){this.askEra=

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
askEra!="undefined"){this.askEra= ---> options <--- .askEra;}else{this.askEra=

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
;}else{this.askEra=( ---> format <--- .indexOf("%B")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%B")>=0)||( ---> format <--- .indexOf("%C")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%C")>=0)||( ---> format <--- .indexOf("%E")>=0);}

[WARNING] The symbol askYear is declared but is apparently never used.
This code can probably be written in a more compact way.
("%E")>=0);}var  ---> askYear <--- =(format.indexOf("%Y")>=0

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0);}var askYear=( ---> format <--- .indexOf("%Y")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%Y")>=0)||( ---> format <--- .indexOf("%y")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%y")>=0)||( ---> format <--- .indexOf("%Z")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%Z")>=0)||( ---> format <--- .indexOf("%z")>=0);var 

[WARNING] The symbol askMonth is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%z")>=0);var  ---> askMonth <--- =(format.indexOf("%b")>=0

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
)>=0);var askMonth=( ---> format <--- .indexOf("%b")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%b")>=0)||( ---> format <--- .indexOf("%c")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%c")>=0)||( ---> format <--- .indexOf("%M")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%M")>=0)||( ---> format <--- .indexOf("%m")>=0);var 

[WARNING] The symbol askDoM is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%m")>=0);var  ---> askDoM <--- =(format.indexOf("%D")>=0

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
)>=0);var askDoM=( ---> format <--- .indexOf("%D")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%D")>=0)||( ---> format <--- .indexOf("%d")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%d")>=0)||( ---> format <--- .indexOf("%e")>=0);var 

[WARNING] The symbol askDate is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%e")>=0);var  ---> askDate <--- =askYear||askMonth||askDoM;this.twelveHr

[WARNING] The symbol askYear is declared but is apparently never used.
This code can probably be written in a more compact way.
"%e")>=0);var askDate= ---> askYear <--- ||askMonth||askDoM;this.twelveHr=(

[WARNING] The symbol askMonth is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0);var askDate=askYear|| ---> askMonth <--- ||askDoM;this.twelveHr=(format.

[WARNING] The symbol askDoM is declared but is apparently never used.
This code can probably be written in a more compact way.
);var askDate=askYear||askMonth|| ---> askDoM <--- ;this.twelveHr=(format.indexOf(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
askMonth||askDoM;this.twelveHr=( ---> format <--- .indexOf("%h")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%h")>=0)||( ---> format <--- .indexOf("%I")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%I")>=0)||( ---> format <--- .indexOf("%l")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%l")>=0)||( ---> format <--- .indexOf("%r")>=0);var 

[WARNING] The symbol askHour is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%r")>=0);var  ---> askHour <--- =this.twelveHr||(format.indexOf(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
;var askHour=this.twelveHr||( ---> format <--- .indexOf("%H")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%H")>=0)||( ---> format <--- .indexOf("%k")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%k")>=0)||( ---> format <--- .indexOf("%T")>=0);var 

[WARNING] The symbol askMinute is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%T")>=0);var  ---> askMinute <--- =(format.indexOf("%i")>=0

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
)>=0);var askMinute=( ---> format <--- .indexOf("%i")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%i")>=0)||( ---> format <--- .indexOf("%r")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%r")>=0)||( ---> format <--- .indexOf("%T")>=0);var 

[WARNING] The symbol askSec is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%T")>=0);var  ---> askSec <--- =((format.indexOf("%r")>=

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
>=0);var askSec=(( ---> format <--- .indexOf("%r")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%r")>=0)||( ---> format <--- .indexOf("%S")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%S")>=0)||( ---> format <--- .indexOf("%s")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%s")>=0)||( ---> format <--- .indexOf("%T")>=0));

[WARNING] The symbol askSec is declared but is apparently never used.
This code can probably be written in a more compact way.
"%T")>=0));if( ---> askSec <--- &&(typeofoptions.askSecond!="undefined"))

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
));if(askSec&&(typeof ---> options <--- .askSecond!="undefined")){askSec=options

[WARNING] The symbol askSec is declared but is apparently never used.
This code can probably be written in a more compact way.
typeofoptions.askSecond!="undefined")){ ---> askSec <--- =options.askSecond;}var askOff=(

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
.askSecond!="undefined")){askSec= ---> options <--- .askSecond;}var askOff=((format

[WARNING] The symbol askOff is declared but is apparently never used.
This code can probably be written in a more compact way.
{askSec=options.askSecond;}var  ---> askOff <--- =((format.indexOf("%#")>=

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
.askSecond;}var askOff=(( ---> format <--- .indexOf("%#")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%#")>=0)||( ---> format <--- .indexOf("%+")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%+")>=0)||( ---> format <--- .indexOf("%-")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%-")>=0)||( ---> format <--- .indexOf("%:")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%:")>=0)||( ---> format <--- .indexOf("%;")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%;")>=0)||( ---> format <--- .indexOf("%<")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%<")>=0)||( ---> format <--- .indexOf("%>")>=0)||(

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%>")>=0)||( ---> format <--- .indexOf("%@")>=0));

[WARNING] The symbol askTime is declared but is apparently never used.
This code can probably be written in a more compact way.
("%@")>=0));var  ---> askTime <--- =askHour||askMinute||askSec||askOff;if

[WARNING] The symbol askHour is declared but is apparently never used.
This code can probably be written in a more compact way.
)>=0));var askTime= ---> askHour <--- ||askMinute||askSec||askOff;if(askOff

[WARNING] The symbol askMinute is declared but is apparently never used.
This code can probably be written in a more compact way.
0));var askTime=askHour|| ---> askMinute <--- ||askSec||askOff;if(askOff){

[WARNING] The symbol askSec is declared but is apparently never used.
This code can probably be written in a more compact way.
);var askTime=askHour||askMinute|| ---> askSec <--- ||askOff;if(askOff){this.

[WARNING] The symbol askOff is declared but is apparently never used.
This code can probably be written in a more compact way.
var askTime=askHour||askMinute||askSec|| ---> askOff <--- ;if(askOff){this.oConv=

[WARNING] The symbol askOff is declared but is apparently never used.
This code can probably be written in a more compact way.
||askMinute||askSec||askOff;if( ---> askOff <--- ){this.oConv=new AnyTime.Converter

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
(askOff){this.oConv=new  ---> AnyTime <--- .Converter({format:options.formatUtcOffset||

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
=new AnyTime.Converter({format: ---> options <--- .formatUtcOffset||format.match(/\S*%[-+:;<>#@]\S*/g).

[WARNING] The symbol format is declared but is apparently never used.
This code can probably be written in a more compact way.
Converter({format:options.formatUtcOffset|| ---> format <--- .match(/\S*%[-+:;<>#@]\S*/g).join(" ")

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
)});}this.inp= ---> $ <--- ("#"+id);this.div=

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
}this.inp=$("#"+ ---> id <--- );this.div=$('<div class="AnyTime-win AnyTime-pkr ui-widget ui-widget-content ui-corner-all" style="width:0;height:0" id="'+

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
"#"+id);this.div= ---> $ <--- ('<div class="AnyTime-win AnyTime-pkr ui-widget ui-widget-content ui-corner-all" style="width:0;height:0" id="'+this.id+'" aria-live="off"/>');

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
wMinW=this.div.outerWidth(! ---> $ <--- .browser.safari);this.wMinH=

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height(true);this.hTitle= ---> $ <--- ('<h5 class="AnyTime-hdr ui-widget-header ui-corner-top"/>');this.div.append(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hTitle);this.dB= ---> $ <--- ('<div class="AnyTime-body" style="width:0;height:0"/>');this.div.append(

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
dB.AnyTime_height(true);if( ---> options <--- .hideInput){this.inp.css(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
,width:"1px"});}var  ---> t <--- =null;var xDiv=null;if(

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
);}var t=null;var  ---> xDiv <--- =null;if(this.pop){

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
null;if(this.pop){ ---> xDiv <--- =$('<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>"

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.pop){xDiv= ---> $ <--- ('<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>");

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
"</div>");this.hTitle.append( ---> xDiv <--- );xDiv.click(function(e)

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hTitle.append(xDiv); ---> xDiv <--- .click(function(e){_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
xDiv.click(function(e){ ---> _this <--- .dismiss(e);});}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.dismiss( ---> e <--- );});}var lab=""

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
(e);});}var  ---> lab <--- ="";if(askDate){this.

[WARNING] The symbol askDate is declared but is apparently never used.
This code can probably be written in a more compact way.
;}var lab="";if( ---> askDate <--- ){this.dD=$('<div class="AnyTime-date" style="width:0;height:0"/>')

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(askDate){this.dD= ---> $ <--- ('<div class="AnyTime-date" style="width:0;height:0"/>');this.dB.append(

[WARNING] The symbol askYear is declared but is apparently never used.
This code can probably be written in a more compact way.
dD.AnyTime_height(true);if( ---> askYear <--- ){this.yLab=$('<h6 class="AnyTime-lbl AnyTime-lbl-yr">'+

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(askYear){this.yLab= ---> $ <--- ('<h6 class="AnyTime-lbl AnyTime-lbl-yr">'+this.lY+"</h6>");

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
this.yLab);this.dY= ---> $ <--- ('<ul class="AnyTime-yrs ui-helper-reset" />');this.dD.append(

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
],"+ "+this.lY); ---> shownFields <--- ++;}if(askMonth){lab=

[WARNING] The symbol askMonth is declared but is apparently never used.
This code can probably be written in a more compact way.
lY);shownFields++;}if( ---> askMonth <--- ){lab=options.labelMonth||"Month";

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
shownFields++;}if(askMonth){ ---> lab <--- =options.labelMonth||"Month";this.hMo

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(askMonth){lab= ---> options <--- .labelMonth||"Month";this.hMo=$

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.labelMonth||"Month";this.hMo= ---> $ <--- ('<h6 class="AnyTime-lbl AnyTime-lbl-month">'+lab+"</h6>");this.

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.hMo=$('<h6 class="AnyTime-lbl AnyTime-lbl-month">'+ ---> lab <--- +"</h6>");this.dD.append(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hMo);this.dMo= ---> $ <--- ('<ul class="AnyTime-mons" />');this.dD.append(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
append(this.dMo);for( ---> i <--- =0;i<12;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
dMo);for(i=0; ---> i <--- <12;i++){var mBtn=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<12; ---> i <--- ++){var mBtn=this.btn(

[WARNING] The symbol mBtn is declared but is apparently never used.
This code can probably be written in a more compact way.
i<12;i++){var  ---> mBtn <--- =this.btn(this.dMo,this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.dMo,this.conv.mAbbr[ ---> i <--- ],function(event){var elem=

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
i],function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> mo <--- =event.target.AnyTime_month;var t=

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
)){return;}var mo= ---> event <--- .target.AnyTime_month;var t=new Date

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
mo=event.target.AnyTime_month;var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
time.getTime());if( ---> t <--- .getDate()>__daysIn[mo])

[WARNING] The symbol __daysIn is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(t.getDate()> ---> __daysIn <--- [mo]){t.setDate(__daysIn

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
(t.getDate()>__daysIn[ ---> mo <--- ]){t.setDate(__daysIn[mo

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
()>__daysIn[mo]){ ---> t <--- .setDate(__daysIn[mo]);}

[WARNING] The symbol __daysIn is declared but is apparently never used.
This code can probably be written in a more compact way.
[mo]){t.setDate( ---> __daysIn <--- [mo]);}t.setMonth(

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
]){t.setDate(__daysIn[ ---> mo <--- ]);}t.setMonth(mo)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
setDate(__daysIn[mo]);} ---> t <--- .setMonth(mo);this.set(

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
mo]);}t.setMonth( ---> mo <--- );this.set(t);this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
setMonth(mo);this.set( ---> t <--- );this.upd(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.upd( ---> elem <--- );},["mon","mon"+String

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
},["mon","mon"+String( ---> i <--- +1)],lab+" "+this

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
+String(i+1)], ---> lab <--- +" "+this.conv.mNames[i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+" "+this.conv.mNames[ ---> i <--- ]);mBtn[0].AnyTime_month=

[WARNING] The symbol mBtn is declared but is apparently never used.
This code can probably be written in a more compact way.
.conv.mNames[i]); ---> mBtn <--- [0].AnyTime_month=i;}shownFields

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);mBtn[0].AnyTime_month= ---> i <--- ;}shownFields++;}if(askDoM)

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].AnyTime_month=i;} ---> shownFields <--- ++;}if(askDoM){lab=

[WARNING] The symbol askDoM is declared but is apparently never used.
This code can probably be written in a more compact way.
i;}shownFields++;}if( ---> askDoM <--- ){lab=options.labelDayOfMonth||"Day of Month";

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
shownFields++;}if(askDoM){ ---> lab <--- =options.labelDayOfMonth||"Day of Month";this.hDoM

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(askDoM){lab= ---> options <--- .labelDayOfMonth||"Day of Month";this.hDoM=$

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.labelDayOfMonth||"Day of Month";this.hDoM= ---> $ <--- ('<h6 class="AnyTime-lbl AnyTime-lbl-dom">'+lab+"</h6>");this.

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.hDoM=$('<h6 class="AnyTime-lbl AnyTime-lbl-dom">'+ ---> lab <--- +"</h6>");this.dD.append(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hDoM);this.dDoM= ---> $ <--- ('<table border="0" cellpadding="0" cellspacing="0" class="AnyTime-dom-table"/>');this.dD.append(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
dD.append(this.dDoM); ---> t <--- =$('<thead class="AnyTime-dom-head"/>');this.dDoM.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
append(this.dDoM);t= ---> $ <--- ('<thead class="AnyTime-dom-head"/>');this.dDoM.append(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
'<thead class="AnyTime-dom-head"/>');this.dDoM.append( ---> t <--- );var tr=$('<tr class="AnyTime-dow"/>');

[WARNING] The symbol tr is declared but is apparently never used.
This code can probably be written in a more compact way.
.dDoM.append(t);var  ---> tr <--- =$('<tr class="AnyTime-dow"/>');t.append(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(t);var tr= ---> $ <--- ('<tr class="AnyTime-dow"/>');t.append(tr)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
;var tr=$('<tr class="AnyTime-dow"/>'); ---> t <--- .append(tr);for(i=

[WARNING] The symbol tr is declared but is apparently never used.
This code can probably be written in a more compact way.
$('<tr class="AnyTime-dow"/>');t.append( ---> tr <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
t.append(tr);for( ---> i <--- =0;i<7;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
tr);for(i=0; ---> i <--- <7;i++){tr.append

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<7; ---> i <--- ++){tr.append('<th class="AnyTime-dow AnyTime-dow'+String

[WARNING] The symbol tr is declared but is apparently never used.
This code can probably be written in a more compact way.
;i<7;i++){ ---> tr <--- .append('<th class="AnyTime-dow AnyTime-dow'+String(i+1

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{tr.append('<th class="AnyTime-dow AnyTime-dow'+String( ---> i <--- +1)+'">'+this.conv.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
conv.dAbbr[(this.fDOW+ ---> i <--- )%7]+"</th>");}var 

[WARNING] The symbol tbody is declared but is apparently never used.
This code can probably be written in a more compact way.
%7]+"</th>");}var  ---> tbody <--- =$('<tbody class="AnyTime-dom-body" />');this.dDoM.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
]+"</th>");}var tbody= ---> $ <--- ('<tbody class="AnyTime-dom-body" />');this.dDoM.append(

[WARNING] The symbol tbody is declared but is apparently never used.
This code can probably be written in a more compact way.
'<tbody class="AnyTime-dom-body" />');this.dDoM.append( ---> tbody <--- );for(var r=0;r

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(tbody);for(var  ---> r <--- =0;r<6;r++)

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
);for(var r=0; ---> r <--- <6;r++){tr=$

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
var r=0;r<6; ---> r <--- ++){tr=$('<tr class="AnyTime-wk AnyTime-wk'+String

[WARNING] The symbol tr is declared but is apparently never used.
This code can probably be written in a more compact way.
;r<6;r++){ ---> tr <--- =$('<tr class="AnyTime-wk AnyTime-wk'+String(r+1

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
<6;r++){tr= ---> $ <--- ('<tr class="AnyTime-wk AnyTime-wk'+String(r+1)+

[WARNING] The symbol r is declared but is apparently never used.
This code can probably be written in a more compact way.
{tr=$('<tr class="AnyTime-wk AnyTime-wk'+String( ---> r <--- +1)+'"/>');tbody.append

[WARNING] The symbol tbody is declared but is apparently never used.
This code can probably be written in a more compact way.
(r+1)+'"/>'); ---> tbody <--- .append(tr);for(i=

[WARNING] The symbol tr is declared but is apparently never used.
This code can probably be written in a more compact way.
)+'"/>');tbody.append( ---> tr <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
tbody.append(tr);for( ---> i <--- =0;i<7;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
tr);for(i=0; ---> i <--- <7;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<7; ---> i <--- ++){this.btn(tr,"x"

[WARNING] The symbol tr is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> tr <--- ,"x",function(event){var elem

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,"x",function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol dom is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> dom <--- =Number(elem.html());

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
{return;}var dom=Number( ---> elem <--- .html());if(dom)

[WARNING] The symbol dom is declared but is apparently never used.
This code can probably be written in a more compact way.
elem.html());if( ---> dom <--- ){var t=new Date(this.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
));if(dom){var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setDate(dom);this.set(

[WARNING] The symbol dom is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime());t.setDate( ---> dom <--- );this.set(t);this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
setDate(dom);this.set( ---> t <--- );this.upd(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.upd( ---> elem <--- );}},["dom"],lab

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
);}},["dom"], ---> lab <--- );}}shownFields++;}}if

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
["dom"],lab);}} ---> shownFields <--- ++;}}if(askTime){var 

[WARNING] The symbol askTime is declared but is apparently never used.
This code can probably be written in a more compact way.
}}shownFields++;}}if( ---> askTime <--- ){var tensDiv,onesDiv;this.dT

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}if(askTime){var  ---> tensDiv <--- ,onesDiv;this.dT=$('<div class="AnyTime-time" style="width:0;height:0" />'

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(askTime){var tensDiv, ---> onesDiv <--- ;this.dT=$('<div class="AnyTime-time" style="width:0;height:0" />');

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
var tensDiv,onesDiv;this.dT= ---> $ <--- ('<div class="AnyTime-time" style="width:0;height:0" />');this.dB.append(

[WARNING] The symbol askHour is declared but is apparently never used.
This code can probably be written in a more compact way.
dT.AnyTime_height(true);if( ---> askHour <--- ){this.dH=$('<div class="AnyTime-hrs"/>')

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(askHour){this.dH= ---> $ <--- ('<div class="AnyTime-hrs"/>');this.dT.append(

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
dT.append(this.dH); ---> lab <--- =options.labelHour||"Hour";this.dH

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
append(this.dH);lab= ---> options <--- .labelHour||"Hour";this.dH.append

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
||"Hour";this.dH.append( ---> $ <--- ('<h6 class="AnyTime-lbl AnyTime-lbl-hr">'+lab+"</h6>"));var 

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
.dH.append($('<h6 class="AnyTime-lbl AnyTime-lbl-hr">'+ ---> lab <--- +"</h6>"));var amDiv=$(

[WARNING] The symbol amDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<h6 class="AnyTime-lbl AnyTime-lbl-hr">'+lab+"</h6>"));var  ---> amDiv <--- =$('<ul class="AnyTime-hrs-am"/>');this.dH.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
lab+"</h6>"));var amDiv= ---> $ <--- ('<ul class="AnyTime-hrs-am"/>');this.dH.append(

[WARNING] The symbol amDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<ul class="AnyTime-hrs-am"/>');this.dH.append( ---> amDiv <--- );var pmDiv=$('<ul class="AnyTime-hrs-pm"/>');

[WARNING] The symbol pmDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
.dH.append(amDiv);var  ---> pmDiv <--- =$('<ul class="AnyTime-hrs-pm"/>');this.dH.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(amDiv);var pmDiv= ---> $ <--- ('<ul class="AnyTime-hrs-pm"/>');this.dH.append(

[WARNING] The symbol pmDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<ul class="AnyTime-hrs-pm"/>');this.dH.append( ---> pmDiv <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
dH.append(pmDiv);for( ---> i <--- =0;i<12;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
pmDiv);for(i=0; ---> i <--- <12;i++){if(this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<12; ---> i <--- ++){if(this.twelveHr){

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.twelveHr){if( ---> i <--- ==0){t="12am";}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(i==0){ ---> t <--- ="12am";}else{t=String(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){t="12am";}else{ ---> t <--- =String(i)+"am";}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"12am";}else{t=String( ---> i <--- )+"am";}}else{t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
i)+"am";}}else{ ---> t <--- =AnyTime.pad(i,2);

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
+"am";}}else{t= ---> AnyTime <--- .pad(i,2);}this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{t=AnyTime.pad( ---> i <--- ,2);}this.btn(amDiv

[WARNING] The symbol amDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
,2);}this.btn( ---> amDiv <--- ,t,this.newHour,["hr",

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);}this.btn(amDiv, ---> t <--- ,this.newHour,["hr","hr"+

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
newHour,["hr","hr"+String( ---> i <--- )],lab+" "+t);

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
,"hr"+String(i)], ---> lab <--- +" "+t);if(this.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(i)],lab+" "+ ---> t <--- );if(this.twelveHr){if

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.twelveHr){if( ---> i <--- ==0){t="12pm";}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(i==0){ ---> t <--- ="12pm";}else{t=String(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){t="12pm";}else{ ---> t <--- =String(i)+"pm";}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"12pm";}else{t=String( ---> i <--- )+"pm";}}else{t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
i)+"pm";}}else{ ---> t <--- =i+12;}this.btn(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
+"pm";}}else{t= ---> i <--- +12;}this.btn(pmDiv,

[WARNING] The symbol pmDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
i+12;}this.btn( ---> pmDiv <--- ,t,this.newHour,["hr",

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
12;}this.btn(pmDiv, ---> t <--- ,this.newHour,["hr","hr"+

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
newHour,["hr","hr"+String( ---> i <--- +12)],lab+" "+t

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
+String(i+12)], ---> lab <--- +" "+t);}shownFields++;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
+12)],lab+" "+ ---> t <--- );}shownFields++;}if(askMinute

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
,lab+" "+t);} ---> shownFields <--- ++;}if(askMinute){this.

[WARNING] The symbol askMinute is declared but is apparently never used.
This code can probably be written in a more compact way.
);}shownFields++;}if( ---> askMinute <--- ){this.dM=$('<div class="AnyTime-mins"/>')

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(askMinute){this.dM= ---> $ <--- ('<div class="AnyTime-mins"/>');this.dT.append(

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
dT.append(this.dM); ---> lab <--- =options.labelMinute||"Minute";this.dM

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
append(this.dM);lab= ---> options <--- .labelMinute||"Minute";this.dM.append

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
||"Minute";this.dM.append( ---> $ <--- ('<h6 class="AnyTime-lbl AnyTime-lbl-min">'+lab+"</h6>"));tensDiv

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
.dM.append($('<h6 class="AnyTime-lbl AnyTime-lbl-min">'+ ---> lab <--- +"</h6>"));tensDiv=$('<ul class="AnyTime-mins-tens"/>'

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
('<h6 class="AnyTime-lbl AnyTime-lbl-min">'+lab+"</h6>")); ---> tensDiv <--- =$('<ul class="AnyTime-mins-tens"/>');this.dM.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
+lab+"</h6>"));tensDiv= ---> $ <--- ('<ul class="AnyTime-mins-tens"/>');this.dM.append(

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<ul class="AnyTime-mins-tens"/>');this.dM.append( ---> tensDiv <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
dM.append(tensDiv);for( ---> i <--- =0;i<6;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
tensDiv);for(i=0; ---> i <--- <6;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<6; ---> i <--- ++){this.btn(tensDiv,i

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> tensDiv <--- ,i,function(event){var elem

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){this.btn(tensDiv, ---> i <--- ,function(event){var elem=$

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,i,function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setMinutes((Number(elem.text(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
);t.setMinutes((Number( ---> elem <--- .text())*10)+(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
%10));this.set( ---> t <--- );this.upd(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.upd( ---> elem <--- );},["min-ten","min"+i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);},["min-ten","min"+ ---> i <--- +"0"],lab+" "+i+

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
"min-ten","min"+i+"0"], ---> lab <--- +" "+i+"0");}for

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0"],lab+" "+ ---> i <--- +"0");}for(;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0");}for(; ---> i <--- <12;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;}for(;i<12; ---> i <--- ++){this.btn(tensDiv,"&#160;"

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> tensDiv <--- ,"&#160;",$.noop,["min-ten",

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.btn(tensDiv,"&#160;", ---> $ <--- .noop,["min-ten","min"+i+

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
$.noop,["min-ten","min"+ ---> i <--- +"0"],lab+" "+i+

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
"min-ten","min"+i+"0"], ---> lab <--- +" "+i+"0").addClass(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0"],lab+" "+ ---> i <--- +"0").addClass("AnyTime-min-ten-btn-empty ui-state-default ui-state-disabled");}

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
"0").addClass("AnyTime-min-ten-btn-empty ui-state-default ui-state-disabled");} ---> onesDiv <--- =$('<ul class="AnyTime-mins-ones"/>');this.dM.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("AnyTime-min-ten-btn-empty ui-state-default ui-state-disabled");}onesDiv= ---> $ <--- ('<ul class="AnyTime-mins-ones"/>');this.dM.append(

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<ul class="AnyTime-mins-ones"/>');this.dM.append( ---> onesDiv <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
dM.append(onesDiv);for( ---> i <--- =0;i<10;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
onesDiv);for(i=0; ---> i <--- <10;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<10; ---> i <--- ++){this.btn(onesDiv,i

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> onesDiv <--- ,i,function(event){var elem

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){this.btn(onesDiv, ---> i <--- ,function(event){var elem=$

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,i,function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setMinutes((Math.floor(this.

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
/10)*10)+Number( ---> elem <--- .text()));this.set

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
()));this.set( ---> t <--- );this.upd(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.upd( ---> elem <--- );},["min-one","min"+i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);},["min-one","min"+ ---> i <--- ],lab+" "+i);}

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
,["min-one","min"+i], ---> lab <--- +" "+i);}for(;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"min"+i],lab+" "+ ---> i <--- );}for(;i<12;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
" "+i);}for(; ---> i <--- <12;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;}for(;i<12; ---> i <--- ++){this.btn(onesDiv,"&#160;"

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> onesDiv <--- ,"&#160;",$.noop,["min-one",

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.btn(onesDiv,"&#160;", ---> $ <--- .noop,["min-one","min"+i+

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
$.noop,["min-one","min"+ ---> i <--- +"0"],lab+" "+i)

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
"min-one","min"+i+"0"], ---> lab <--- +" "+i).addClass("AnyTime-min-one-btn-empty ui-state-default ui-state-disabled")

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0"],lab+" "+ ---> i <--- ).addClass("AnyTime-min-one-btn-empty ui-state-default ui-state-disabled");}shownFields++

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
i).addClass("AnyTime-min-one-btn-empty ui-state-default ui-state-disabled");} ---> shownFields <--- ++;}if(askSec){this.

[WARNING] The symbol askSec is declared but is apparently never used.
This code can probably be written in a more compact way.
);}shownFields++;}if( ---> askSec <--- ){this.dS=$('<div class="AnyTime-secs"/>')

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(askSec){this.dS= ---> $ <--- ('<div class="AnyTime-secs"/>');this.dT.append(

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
dT.append(this.dS); ---> lab <--- =options.labelSecond||"Second";this.dS

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
append(this.dS);lab= ---> options <--- .labelSecond||"Second";this.dS.append

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
||"Second";this.dS.append( ---> $ <--- ('<h6 class="AnyTime-lbl AnyTime-lbl-sec">'+lab+"</h6>"));tensDiv

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
.dS.append($('<h6 class="AnyTime-lbl AnyTime-lbl-sec">'+ ---> lab <--- +"</h6>"));tensDiv=$('<ul class="AnyTime-secs-tens"/>'

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
('<h6 class="AnyTime-lbl AnyTime-lbl-sec">'+lab+"</h6>")); ---> tensDiv <--- =$('<ul class="AnyTime-secs-tens"/>');this.dS.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
+lab+"</h6>"));tensDiv= ---> $ <--- ('<ul class="AnyTime-secs-tens"/>');this.dS.append(

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<ul class="AnyTime-secs-tens"/>');this.dS.append( ---> tensDiv <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
dS.append(tensDiv);for( ---> i <--- =0;i<6;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
tensDiv);for(i=0; ---> i <--- <6;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<6; ---> i <--- ++){this.btn(tensDiv,i

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> tensDiv <--- ,i,function(event){var elem

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){this.btn(tensDiv, ---> i <--- ,function(event){var elem=$

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,i,function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setSeconds((Number(elem.text(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
);t.setSeconds((Number( ---> elem <--- .text())*10)+(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
%10));this.set( ---> t <--- );this.upd(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.upd( ---> elem <--- );},["sec-ten","sec"+i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);},["sec-ten","sec"+ ---> i <--- +"0"],lab+" "+i+

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
"sec-ten","sec"+i+"0"], ---> lab <--- +" "+i+"0");}for

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0"],lab+" "+ ---> i <--- +"0");}for(;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0");}for(; ---> i <--- <12;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;}for(;i<12; ---> i <--- ++){this.btn(tensDiv,"&#160;"

[WARNING] The symbol tensDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> tensDiv <--- ,"&#160;",$.noop,["sec-ten",

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.btn(tensDiv,"&#160;", ---> $ <--- .noop,["sec-ten","sec"+i+

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
$.noop,["sec-ten","sec"+ ---> i <--- +"0"],lab+" "+i+

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
"sec-ten","sec"+i+"0"], ---> lab <--- +" "+i+"0").addClass(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0"],lab+" "+ ---> i <--- +"0").addClass("AnyTime-sec-ten-btn-empty ui-state-default ui-state-disabled");}

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
"0").addClass("AnyTime-sec-ten-btn-empty ui-state-default ui-state-disabled");} ---> onesDiv <--- =$('<ul class="AnyTime-secs-ones"/>');this.dS.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("AnyTime-sec-ten-btn-empty ui-state-default ui-state-disabled");}onesDiv= ---> $ <--- ('<ul class="AnyTime-secs-ones"/>');this.dS.append(

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<ul class="AnyTime-secs-ones"/>');this.dS.append( ---> onesDiv <--- );for(i=0;i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
dS.append(onesDiv);for( ---> i <--- =0;i<10;i++)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
onesDiv);for(i=0; ---> i <--- <10;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(i=0;i<10; ---> i <--- ++){this.btn(onesDiv,i

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> onesDiv <--- ,i,function(event){var elem

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){this.btn(onesDiv, ---> i <--- ,function(event){var elem=$

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,i,function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setSeconds((Math.floor(this.

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
/10)*10)+Number( ---> elem <--- .text()));this.set

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
()));this.set( ---> t <--- );this.upd(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.upd( ---> elem <--- );},["sec-one","sec"+i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);},["sec-one","sec"+ ---> i <--- ],lab+" "+i);}

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
,["sec-one","sec"+i], ---> lab <--- +" "+i);}for(;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"sec"+i],lab+" "+ ---> i <--- );}for(;i<12;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
" "+i);}for(; ---> i <--- <12;i++){this.btn

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;}for(;i<12; ---> i <--- ++){this.btn(onesDiv,"&#160;"

[WARNING] The symbol onesDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){this.btn( ---> onesDiv <--- ,"&#160;",$.noop,["sec-one",

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.btn(onesDiv,"&#160;", ---> $ <--- .noop,["sec-one","sec"+i+

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
$.noop,["sec-one","sec"+ ---> i <--- +"0"],lab+" "+i)

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
"sec-one","sec"+i+"0"], ---> lab <--- +" "+i).addClass("AnyTime-sec-one-btn-empty ui-state-default ui-state-disabled")

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+"0"],lab+" "+ ---> i <--- ).addClass("AnyTime-sec-one-btn-empty ui-state-default ui-state-disabled");}shownFields++

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
i).addClass("AnyTime-sec-one-btn-empty ui-state-default ui-state-disabled");} ---> shownFields <--- ++;}if(askOff){this.

[WARNING] The symbol askOff is declared but is apparently never used.
This code can probably be written in a more compact way.
);}shownFields++;}if( ---> askOff <--- ){this.dO=$('<div class="AnyTime-offs" />')

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(askOff){this.dO= ---> $ <--- ('<div class="AnyTime-offs" />');this.dT.append(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
outerWidth(true);this.oLab= ---> $ <--- ('<h6 class="AnyTime-lbl AnyTime-lbl-off">'+this.lO+"</h6>");

[WARNING] The symbol offDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(this.oLab);var  ---> offDiv <--- =$('<ul class="AnyTime-off-list ui-helper-reset" />');this.dO.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.oLab);var offDiv= ---> $ <--- ('<ul class="AnyTime-off-list ui-helper-reset" />');this.dO.append(

[WARNING] The symbol offDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
'<ul class="AnyTime-off-list ui-helper-reset" />');this.dO.append( ---> offDiv <--- );this.oCur=this.btn(

[WARNING] The symbol offDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.oCur=this.btn( ---> offDiv <--- ,"",this.newOffset,["off",

[WARNING] The symbol lab is declared but is apparently never used.
This code can probably be written in a more compact way.
.newOffset,["off","off-cur"], ---> lab <--- );this.oCur.removeClass("ui-state-default")

[WARNING] The symbol offDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.oSel=this.btn( ---> offDiv <--- ,"&#177;",this.newOffset,["off",

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
this.oSel.outerWidth(true); ---> shownFields <--- ++;}}if(options.labelTitle)

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
);shownFields++;}}if( ---> options <--- .labelTitle){this.hTitle.append(

[WARNING] The symbol options is declared but is apparently never used.
This code can probably be written in a more compact way.
labelTitle){this.hTitle.append( ---> options <--- .labelTitle);}else{if(shownFields

[WARNING] The symbol shownFields is declared but is apparently never used.
This code can probably be written in a more compact way.
.labelTitle);}else{if( ---> shownFields <--- >1){this.hTitle.append(

[WARNING] The symbol askDate is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hTitle.append("Select a "+( ---> askDate <--- ?(askTime?"Date and Time":"Date"):"Time"

[WARNING] The symbol askTime is declared but is apparently never used.
This code can probably be written in a more compact way.
.append("Select a "+(askDate?( ---> askTime <--- ?"Date and Time":"Date"):"Time"));

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
conv.getUtcParseOffsetSubIndex();}catch( ---> e <--- ){this.time=new Date()

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
.div.hide();if( ---> __iframe <--- ){__iframe.hide();}this

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
hide();if(__iframe){ ---> __iframe <--- .hide();}this.div.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hBlur=function(e){ ---> _this <--- .inpBlur(e);});this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.inpBlur( ---> e <--- );});this.inp.click

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hClick=function(e){ ---> _this <--- .showPkr(e);});this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.showPkr( ---> e <--- );});this.inp.focus

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
hFocus=function(e){if( ---> _this <--- .lostFocus){_this.showPkr(e)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(_this.lostFocus){ ---> _this <--- .showPkr(e);}_this.lostFocus

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.lostFocus){_this.showPkr( ---> e <--- );}_this.lostFocus=false;}

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
{_this.showPkr(e);} ---> _this <--- .lostFocus=false;});this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hKeydown=function(e){ ---> _this <--- .key(e);});this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.key( ---> e <--- );});this.inp.keypress

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
hKeypress=function(e){if( ---> $ <--- .browser.opera&&_this.denyTab){

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
{if($.browser.opera&& ---> _this <--- .denyTab){e.preventDefault();

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
browser.opera&&_this.denyTab){ ---> e <--- .preventDefault();}});this

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
div.click(function(e){ ---> _this <--- .lostFocus=false;_this.inp.focus

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
e){_this.lostFocus=false; ---> _this <--- .inp.focus();});

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
inp.focus();}); ---> $ <--- (window).resize(function(e)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
).resize(function(e){ ---> _this <--- .pos(e);});if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.pos( ---> e <--- );});if(__initialized){

[WARNING] The symbol __initialized is declared but is apparently never used.
This code can probably be written in a more compact way.
(e);});if( ---> __initialized <--- ){this.onReady();}}

[WARNING] The symbol opts is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime())){try{var  ---> opts <--- =jQuery.extend({},this.

[WARNING] The symbol opts is declared but is apparently never used.
This code can probably be written in a more compact way.
,this.ajaxOpts);if(typeof ---> opts <--- .data=="object"){opts.data[

[WARNING] The symbol opts is declared but is apparently never used.
This code can probably be written in a more compact way.
(typeofopts.data=="object"){ ---> opts <--- .data[this.inp[0].

[WARNING] The symbol opt is declared but is apparently never used.
This code can probably be written in a more compact way.
.val();}else{var  ---> opt <--- =(this.inp[0].name

[WARNING] The symbol opts is declared but is apparently never used.
This code can probably be written in a more compact way.
inp.val());if( ---> opts <--- .data){opts.data+="&"+

[WARNING] The symbol opts is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(opts.data){ ---> opts <--- .data+="&"+opt;}else{

[WARNING] The symbol opt is declared but is apparently never used.
This code can probably be written in a more compact way.
data){opts.data+="&"+ ---> opt <--- ;}else{opts.data=opt;

[WARNING] The symbol opts is declared but is apparently never used.
This code can probably be written in a more compact way.
data+="&"+opt;}else{ ---> opts <--- .data=opt;}}$.ajax

[WARNING] The symbol opt is declared but is apparently never used.
This code can probably be written in a more compact way.
opt;}else{opts.data= ---> opt <--- ;}}$.ajax(opts);

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
{opts.data=opt;}} ---> $ <--- .ajax(opts);this.lastAjax=

[WARNING] The symbol opts is declared but is apparently never used.
This code can probably be written in a more compact way.
=opt;}}$.ajax( ---> opts <--- );this.lastAjax=this.time;

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
lastAjax=this.time;}catch( ---> e <--- ){}}return;},askOffset:

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.makeCloak();this.oDiv= ---> $ <--- ('<div class="AnyTime-win AnyTime-off-selector ui-widget ui-widget-content ui-corner-all" style="position:absolute" />');this.div.append(

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(this.oDiv);var  ---> title <--- =$('<h5 class="AnyTime-hdr AnyTime-hdr-off-selector ui-widget-header ui-corner-top" />');this.oDiv.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.oDiv);var title= ---> $ <--- ('<h5 class="AnyTime-hdr AnyTime-hdr-off-selector ui-widget-header ui-corner-top" />');this.oDiv.append(

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
'<h5 class="AnyTime-hdr AnyTime-hdr-off-selector ui-widget-header ui-corner-top" />');this.oDiv.append( ---> title <--- );this.oBody=$('<div class="AnyTime-body AnyTime-body-off-selector" style="overflow:auto;white-space:nowrap" />')

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
append(title);this.oBody= ---> $ <--- ('<div class="AnyTime-body AnyTime-body-off-selector" style="overflow:auto;white-space:nowrap" />');this.oDiv.append(

[WARNING] The symbol oBHS is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(this.oBody);var  ---> oBHS <--- =this.oBody.AnyTime_height(true);

[WARNING] The symbol oBWS is declared but is apparently never used.
This code can probably be written in a more compact way.
.oBody.AnyTime_height(true);var  ---> oBWS <--- =this.oBody.AnyTime_width(true);

[WARNING] The symbol oTWS is declared but is apparently never used.
This code can probably be written in a more compact way.
.oBody.AnyTime_width(true);var  ---> oTWS <--- =title.AnyTime_width(true);var xDiv

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_width(true);var oTWS= ---> title <--- .AnyTime_width(true);var xDiv=$

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
=title.AnyTime_width(true);var  ---> xDiv <--- =$('<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>"

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_width(true);var xDiv= ---> $ <--- ('<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>");

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
'<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>"); ---> title <--- .append(xDiv);xDiv.click(

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
lX+"</div>");title.append( ---> xDiv <--- );xDiv.click(function(e)

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
);title.append(xDiv); ---> xDiv <--- .click(function(e){_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
xDiv.click(function(e){ ---> _this <--- .dismissODiv(e);});title

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.dismissODiv( ---> e <--- );});title.append(this

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
.dismissODiv(e);}); ---> title <--- .append(this.lO);if(

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
append(this.lO);if( ---> __msie6 <--- ||__msie7){title.width(String(

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
this.lO);if(__msie6|| ---> __msie7 <--- ){title.width(String(this.

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(__msie6||__msie7){ ---> title <--- .width(String(this.lO.length

[WARNING] The symbol oBW is declared but is apparently never used.
This code can probably be written in a more compact way.
*0.8)+"em");}var  ---> oBW <--- =title.AnyTime_width(true)-oBWS;

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
)+"em");}var oBW= ---> title <--- .AnyTime_width(true)-oBWS;var cont

[WARNING] The symbol oBWS is declared but is apparently never used.
This code can probably be written in a more compact way.
oBW=title.AnyTime_width(true)- ---> oBWS <--- ;var cont=$('<ul class="AnyTime-off-off" />');var 

[WARNING] The symbol cont is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_width(true)-oBWS;var  ---> cont <--- =$('<ul class="AnyTime-off-off" />');var last=null

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(true)-oBWS;var cont= ---> $ <--- ('<ul class="AnyTime-off-off" />');var last=null;this

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
var cont=$('<ul class="AnyTime-off-off" />');var  ---> last <--- =null;this.oBody.append(cont

[WARNING] The symbol cont is declared but is apparently never used.
This code can probably be written in a more compact way.
=null;this.oBody.append( ---> cont <--- );var useSubIndex=(this.oConv.

[WARNING] The symbol useSubIndex is declared but is apparently never used.
This code can probably be written in a more compact way.
.oBody.append(cont);var  ---> useSubIndex <--- =(this.oConv.fmt.indexOf(

[WARNING] The symbol btnW is declared but is apparently never used.
This code can probably be written in a more compact way.
indexOf("%@")>=0);var  ---> btnW <--- =0;if(AnyTime.utcLabel){

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
);var btnW=0;if( ---> AnyTime <--- .utcLabel){for(var o=-

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
(AnyTime.utcLabel){for(var  ---> o <--- =-720;o<720;o++

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
{for(var o=-720; ---> o <--- <720;o++){if(AnyTime

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
o=-720;o<720; ---> o <--- ++){if(AnyTime.utcLabel[o

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
<720;o++){if( ---> AnyTime <--- .utcLabel[o]){this.oConv

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
++){if(AnyTime.utcLabel[ ---> o <--- ]){this.oConv.setUtcFormatOffsetAlleged(o

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
]){this.oConv.setUtcFormatOffsetAlleged( ---> o <--- );for(var i=0;i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.setUtcFormatOffsetAlleged(o);for(var  ---> i <--- =0;i<AnyTime.utcLabel[o

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);for(var i=0; ---> i <--- <AnyTime.utcLabel[o].length;

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var i=0;i< ---> AnyTime <--- .utcLabel[o].length;i++

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;i<AnyTime.utcLabel[ ---> o <--- ].length;i++){this.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime.utcLabel[o].length; ---> i <--- ++){this.oConv.setUtcFormatOffsetSubIndex(i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){this.oConv.setUtcFormatOffsetSubIndex( ---> i <--- );last=this.btn(cont,

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
this.oConv.setUtcFormatOffsetSubIndex(i); ---> last <--- =this.btn(cont,this.oConv

[WARNING] The symbol cont is declared but is apparently never used.
This code can probably be written in a more compact way.
i);last=this.btn( ---> cont <--- ,this.oConv.format(this.time

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
,this.newOPos,["off-off"], ---> o <--- );last[0].AnyTime_offMin=o

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
newOPos,["off-off"],o); ---> last <--- [0].AnyTime_offMin=o;last[

[WARNING] The symbol o is declared but is apparently never used.
This code can probably be written in a more compact way.
);last[0].AnyTime_offMin= ---> o <--- ;last[0].AnyTime_offSI=i;

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
last[0].AnyTime_offMin=o; ---> last <--- [0].AnyTime_offSI=i;var w

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
o;last[0].AnyTime_offSI= ---> i <--- ;var w=last.width();

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
[0].AnyTime_offSI=i;var  ---> w <--- =last.width();if(w

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
].AnyTime_offSI=i;var w= ---> last <--- .width();if(w>btnW

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
=last.width();if( ---> w <--- >btnW){btnW=w;}if

[WARNING] The symbol btnW is declared but is apparently never used.
This code can probably be written in a more compact way.
.width();if(w> ---> btnW <--- ){btnW=w;}if(!

[WARNING] The symbol btnW is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(w>btnW){ ---> btnW <--- =w;}if(!useSubIndex){

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
if(w>btnW){btnW= ---> w <--- ;}if(!useSubIndex){break;

[WARNING] The symbol useSubIndex is declared but is apparently never used.
This code can probably be written in a more compact way.
{btnW=w;}if(! ---> useSubIndex <--- ){break;}}}}}if

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
break;}}}}}if( ---> last <--- ){last.addClass("AnyTime-off-off-last-btn");}

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}if(last){ ---> last <--- .addClass("AnyTime-off-off-last-btn");}this.oBody

[WARNING] The symbol btnW is declared but is apparently never used.
This code can probably be written in a more compact way.
oBody.find(".AnyTime-off-off-btn").width( ---> btnW <--- );if(last){var lW=

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
).width(btnW);if( ---> last <--- ){var lW=last.AnyTime_width(true

[WARNING] The symbol lW is declared but is apparently never used.
This code can probably be written in a more compact way.
btnW);if(last){var  ---> lW <--- =last.AnyTime_width(true);if(

[WARNING] The symbol last is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(last){var lW= ---> last <--- .AnyTime_width(true);if(lW>

[WARNING] The symbol lW is declared but is apparently never used.
This code can probably be written in a more compact way.
last.AnyTime_width(true);if( ---> lW <--- >oBW){oBW=lW+1;

[WARNING] The symbol oBW is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_width(true);if(lW> ---> oBW <--- ){oBW=lW+1;}}

[WARNING] The symbol oBW is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(lW>oBW){ ---> oBW <--- =lW+1;}}this.oBody

[WARNING] The symbol lW is declared but is apparently never used.
This code can probably be written in a more compact way.
if(lW>oBW){oBW= ---> lW <--- +1;}}this.oBody.width

[WARNING] The symbol oBW is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}this.oBody.width( ---> oBW <--- );oBW=this.oBody.AnyTime_width(

[WARNING] The symbol oBW is declared but is apparently never used.
This code can probably be written in a more compact way.
this.oBody.width(oBW); ---> oBW <--- =this.oBody.AnyTime_width(true);

[WARNING] The symbol oBW is declared but is apparently never used.
This code can probably be written in a more compact way.
true);this.oDiv.width( ---> oBW <--- );if(__msie6||__msie7){title

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
oDiv.width(oBW);if( ---> __msie6 <--- ||__msie7){title.width(oBW-

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
width(oBW);if(__msie6|| ---> __msie7 <--- ){title.width(oBW-oTWS)

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(__msie6||__msie7){ ---> title <--- .width(oBW-oTWS);}var 

[WARNING] The symbol oBW is declared but is apparently never used.
This code can probably be written in a more compact way.
__msie6||__msie7){title.width( ---> oBW <--- -oTWS);}var oH=this.

[WARNING] The symbol oTWS is declared but is apparently never used.
This code can probably be written in a more compact way.
__msie7){title.width(oBW- ---> oTWS <--- );}var oH=this.oDiv.

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
width(oBW-oTWS);}var  ---> oH <--- =this.oDiv.AnyTime_height(true);

[WARNING] The symbol oHmax is declared but is apparently never used.
This code can probably be written in a more compact way.
.oDiv.AnyTime_height(true);var  ---> oHmax <--- =this.div.height()*0.75

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
.height()*0.75;if( ---> oH <--- >oHmax){oH=oHmax;this.

[WARNING] The symbol oHmax is declared but is apparently never used.
This code can probably be written in a more compact way.
()*0.75;if(oH> ---> oHmax <--- ){oH=oHmax;this.oBody.

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
0.75;if(oH>oHmax){ ---> oH <--- =oHmax;this.oBody.height(oH

[WARNING] The symbol oHmax is declared but is apparently never used.
This code can probably be written in a more compact way.
if(oH>oHmax){oH= ---> oHmax <--- ;this.oBody.height(oH-(

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
=oHmax;this.oBody.height( ---> oH <--- -(title.AnyTime_height(true)+oBHS

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
this.oBody.height(oH-( ---> title <--- .AnyTime_height(true)+oBHS));

[WARNING] The symbol oBHS is declared but is apparently never used.
This code can probably be written in a more compact way.
-(title.AnyTime_height(true)+ ---> oBHS <--- ));this.oBody.width(this

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
width()+20);if( ---> __msie6 <--- ||__msie7){title.width(this.

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
)+20);if(__msie6|| ---> __msie7 <--- ){title.width(this.oBody.

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(__msie6||__msie7){ ---> title <--- .width(this.oBody.AnyTime_width(true

[WARNING] The symbol oTWS is declared but is apparently never used.
This code can probably be written in a more compact way.
this.oBody.AnyTime_width(true)- ---> oTWS <--- );}}if(!__msie7){

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
-oTWS);}}if(! ---> __msie7 <--- ){this.oDiv.height(String(

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
{this.oDiv.height(String( ---> oH <--- )+"px");}}else{this

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
show();}this.pos( ---> event <--- );this.updODiv(null);var 

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.updODiv(null);var  ---> f <--- =this.oDiv.find(".AnyTime-off-off-btn.AnyTime-cur-btn:first");

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
.find(".AnyTime-off-off-btn.AnyTime-cur-btn:first");if(! ---> f <--- .length){f=this.oDiv.

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!f.length){ ---> f <--- =this.oDiv.find(".AnyTime-off-off-btn:first");

[WARNING] The symbol f is declared but is apparently never used.
This code can probably be written in a more compact way.
(".AnyTime-off-off-btn:first");}this.setFocus( ---> f <--- );},askYear:function(event)

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.makeCloak();this.yDiv= ---> $ <--- ('<div class="AnyTime-win AnyTime-yr-selector ui-widget ui-widget-content ui-corner-all" style="position:absolute" />');this.div.append(

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(this.yDiv);var  ---> title <--- =$('<h5 class="AnyTime-hdr AnyTime-hdr-yr-selector ui-widget-header ui-corner-top" />');this.yDiv.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.yDiv);var title= ---> $ <--- ('<h5 class="AnyTime-hdr AnyTime-hdr-yr-selector ui-widget-header ui-corner-top" />');this.yDiv.append(

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
'<h5 class="AnyTime-hdr AnyTime-hdr-yr-selector ui-widget-header ui-corner-top" />');this.yDiv.append( ---> title <--- );var xDiv=$('<div class="AnyTime-x-btn ui-state-default">'+this

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
.yDiv.append(title);var  ---> xDiv <--- =$('<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>"

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(title);var xDiv= ---> $ <--- ('<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>");

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
'<div class="AnyTime-x-btn ui-state-default">'+this.lX+"</div>"); ---> title <--- .append(xDiv);xDiv.click(

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
lX+"</div>");title.append( ---> xDiv <--- );xDiv.click(function(e)

[WARNING] The symbol xDiv is declared but is apparently never used.
This code can probably be written in a more compact way.
);title.append(xDiv); ---> xDiv <--- .click(function(e){_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
xDiv.click(function(e){ ---> _this <--- .dismissYDiv(e);});title

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.dismissYDiv( ---> e <--- );});title.append(this

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
.dismissYDiv(e);}); ---> title <--- .append(this.lY);var yBody

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
.append(this.lY);var  ---> yBody <--- =$('<div class="AnyTime-body AnyTime-body-yr-selector" />');var yW=yBody

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.lY);var yBody= ---> $ <--- ('<div class="AnyTime-body AnyTime-body-yr-selector" />');var yW=yBody.AnyTime_width

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
var yBody=$('<div class="AnyTime-body AnyTime-body-yr-selector" />');var  ---> yW <--- =yBody.AnyTime_width(true);var yH

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
=$('<div class="AnyTime-body AnyTime-body-yr-selector" />');var yW= ---> yBody <--- .AnyTime_width(true);var yH=0

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
=yBody.AnyTime_width(true);var  ---> yH <--- =0;this.yDiv.append(yBody

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;this.yDiv.append( ---> yBody <--- );cont=$('<ul class="AnyTime-yr-mil" />');yBody

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
yDiv.append(yBody);cont= ---> $ <--- ('<ul class="AnyTime-yr-mil" />');yBody.append(cont)

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
);cont=$('<ul class="AnyTime-yr-mil" />'); ---> yBody <--- .append(cont);this.y0XXX=

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
+" "+i+"000");} ---> yW <--- +=cont.AnyTime_width(true);if(

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
cont.AnyTime_width(true);if( ---> yH <--- <cont.AnyTime_height(true)){yH

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
<cont.AnyTime_height(true)){ ---> yH <--- =cont.AnyTime_height(true);}cont

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_height(true);}cont= ---> $ <--- ('<ul class="AnyTime-yr-cent" />');yBody.append(cont)

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
;}cont=$('<ul class="AnyTime-yr-cent" />'); ---> yBody <--- .append(cont);for(i=

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
+" "+i+"00");} ---> yW <--- +=cont.AnyTime_width(true);if(

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
cont.AnyTime_width(true);if( ---> yH <--- <cont.AnyTime_height(true)){yH

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
<cont.AnyTime_height(true)){ ---> yH <--- =cont.AnyTime_height(true);}cont

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_height(true);}cont= ---> $ <--- ('<ul class="AnyTime-yr-dec" />');yBody.append(cont)

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
;}cont=$('<ul class="AnyTime-yr-dec" />'); ---> yBody <--- .append(cont);for(i=

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
+" "+i+"0");} ---> yW <--- +=cont.AnyTime_width(true);if(

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
cont.AnyTime_width(true);if( ---> yH <--- <cont.AnyTime_height(true)){yH

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
<cont.AnyTime_height(true)){ ---> yH <--- =cont.AnyTime_height(true);}cont

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_height(true);}cont= ---> $ <--- ('<ul class="AnyTime-yr-yr" />');yBody.append(cont)

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
;}cont=$('<ul class="AnyTime-yr-yr" />'); ---> yBody <--- .append(cont);for(i=

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
.lY+" "+i);} ---> yW <--- +=cont.AnyTime_width(true);if(

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
cont.AnyTime_width(true);if( ---> yH <--- <cont.AnyTime_height(true)){yH

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
<cont.AnyTime_height(true)){ ---> yH <--- =cont.AnyTime_height(true);}if

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.askEra){cont= ---> $ <--- ('<ul class="AnyTime-yr-era" />');yBody.append(cont)

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
){cont=$('<ul class="AnyTime-yr-era" />'); ---> yBody <--- .append(cont);this.btn(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
0],function(event){var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
.time.getTime());var  ---> year <--- =t.getFullYear();if(year

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getTime());var year= ---> t <--- .getFullYear();if(year>0

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
=t.getFullYear();if( ---> year <--- >0){t.setFullYear(0-

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(year>0){ ---> t <--- .setFullYear(0-year);}this

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
0){t.setFullYear(0- ---> year <--- );}this.set(t);

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
-year);}this.set( ---> t <--- );this.updYDiv($(event.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.updYDiv( ---> $ <--- (event.target));},[

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
t);this.updYDiv($( ---> event <--- .target));},["era",

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
1],function(event){var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
.time.getTime());var  ---> year <--- =t.getFullYear();if(year

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getTime());var year= ---> t <--- .getFullYear();if(year<0

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
=t.getFullYear();if( ---> year <--- <0){t.setFullYear(0-

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(year<0){ ---> t <--- .setFullYear(0-year);}this

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
0){t.setFullYear(0- ---> year <--- );}this.set(t);

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
-year);}this.set( ---> t <--- );this.updYDiv($(event.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.updYDiv( ---> $ <--- (event.target));},[

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
t);this.updYDiv($( ---> event <--- .target));},["era",

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
.conv.eAbbr[1]); ---> yW <--- +=cont.AnyTime_width(true);if(

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
cont.AnyTime_width(true);if( ---> yH <--- <cont.AnyTime_height(true)){yH

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
<cont.AnyTime_height(true)){ ---> yH <--- =cont.AnyTime_height(true);}}

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height(true);}}if( ---> $ <--- .browser.msie){yW+=1;

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
if($.browser.msie){ ---> yW <--- +=1;}else{if($.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
yW+=1;}else{if( ---> $ <--- .browser.safari){yW+=2;

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
if($.browser.safari){ ---> yW <--- +=2;}}yH+=yBody.AnyTime_height

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
safari){yW+=2;}} ---> yH <--- +=yBody.AnyTime_height(true);yBody.

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
{yW+=2;}}yH+= ---> yBody <--- .AnyTime_height(true);yBody.css(

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
yH+=yBody.AnyTime_height(true); ---> yBody <--- .css("width",String(yW)+

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
;yBody.css("width",String( ---> yW <--- )+"px");if(!__msie7)

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
yW)+"px");if(! ---> __msie7 <--- ){yBody.css("height",String(

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
"px");if(!__msie7){ ---> yBody <--- .css("height",String(yH)+

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
{yBody.css("height",String( ---> yH <--- )+"px");}if(__msie6||

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
yH)+"px");}if( ---> __msie6 <--- ||__msie7){title.width(yBody.

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
+"px");}if(__msie6|| ---> __msie7 <--- ){title.width(yBody.outerWidth(

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(__msie6||__msie7){ ---> title <--- .width(yBody.outerWidth(true))

[WARNING] The symbol yBody is declared but is apparently never used.
This code can probably be written in a more compact way.
__msie6||__msie7){title.width( ---> yBody <--- .outerWidth(true));}yH+=

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
yBody.outerWidth(true));} ---> yH <--- +=title.AnyTime_height(true);if(

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
outerWidth(true));}yH+= ---> title <--- .AnyTime_height(true);if(title.

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
title.AnyTime_height(true);if( ---> title <--- .AnyTime_width(true)>yW){yW

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
if(title.AnyTime_width(true)> ---> yW <--- ){yW=title.AnyTime_width(true)

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_width(true)>yW){ ---> yW <--- =title.AnyTime_width(true);}this

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
(true)>yW){yW= ---> title <--- .AnyTime_width(true);}this.yDiv

[WARNING] The symbol yW is declared but is apparently never used.
This code can probably be written in a more compact way.
.yDiv.css("width",String( ---> yW <--- )+"px");if(!__msie7)

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
yW)+"px");if(! ---> __msie7 <--- ){this.yDiv.css("height",

[WARNING] The symbol yH is declared but is apparently never used.
This code can probably be written in a more compact way.
.yDiv.css("height",String( ---> yH <--- )+"px");}}else{this

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
show();}this.pos( ---> event <--- );this.updYDiv(null);this

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
.oDiv.is(":visible")){ ---> _this <--- .inp.focus();return;}

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
;setTimeout(function(){if( ---> _this <--- .lostFocus){_this.div.find(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(_this.lostFocus){ ---> _this <--- .div.find(".AnyTime-focus-btn").removeClass(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
).removeClass("AnyTime-focus-btn ui-state-focus");if( ---> _this <--- .pop){_this.dismiss(event)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(_this.pop){ ---> _this <--- .dismiss(event);}else{_this

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.pop){_this.dismiss( ---> event <--- );}else{_this.ajax()

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
.dismiss(event);}else{ ---> _this <--- .ajax();}}},334

[WARNING] The symbol tagName is declared but is apparently never used.
This code can probably be written in a more compact way.
,handler,classes,title){var  ---> tagName <--- =((parent[0].nodeName.

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
,title){var tagName=(( ---> parent <--- [0].nodeName.toLowerCase()==

[WARNING] The symbol div$ is declared but is apparently never used.
This code can probably be written in a more compact way.
"ul")?"li":"td");var  ---> div$ <--- ="<"+tagName+' class="AnyTime-btn';for(var 

[WARNING] The symbol tagName is declared but is apparently never used.
This code can probably be written in a more compact way.
:"td");var div$="<"+ ---> tagName <--- +' class="AnyTime-btn';for(var i=0;

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
"<"+tagName+' class="AnyTime-btn';for(var  ---> i <--- =0;i<classes.length;i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
' class="AnyTime-btn';for(var i=0; ---> i <--- <classes.length;i++){div$

[WARNING] The symbol classes is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var i=0;i< ---> classes <--- .length;i++){div$+=" AnyTime-"

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;i<classes.length; ---> i <--- ++){div$+=" AnyTime-"+classes[i

[WARNING] The symbol div$ is declared but is apparently never used.
This code can probably be written in a more compact way.
<classes.length;i++){ ---> div$ <--- +=" AnyTime-"+classes[i]+"-btn";

[WARNING] The symbol classes is declared but is apparently never used.
This code can probably be written in a more compact way.
;i++){div$+=" AnyTime-"+ ---> classes <--- [i]+"-btn";}var div=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
++){div$+=" AnyTime-"+classes[ ---> i <--- ]+"-btn";}var div=$(

[WARNING] The symbol div is declared but is apparently never used.
This code can probably be written in a more compact way.
classes[i]+"-btn";}var  ---> div <--- =$(div$+' ui-state-default">'+text+"</"

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
i]+"-btn";}var div= ---> $ <--- (div$+' ui-state-default">'+text+"</"+tagName

[WARNING] The symbol div$ is declared but is apparently never used.
This code can probably be written in a more compact way.
+"-btn";}var div=$( ---> div$ <--- +' ui-state-default">'+text+"</"+tagName+">"

[WARNING] The symbol text is declared but is apparently never used.
This code can probably be written in a more compact way.
var div=$(div$+' ui-state-default">'+ ---> text <--- +"</"+tagName+">");parent.

[WARNING] The symbol tagName is declared but is apparently never used.
This code can probably be written in a more compact way.
(div$+' ui-state-default">'+text+"</"+ ---> tagName <--- +">");parent.append(div)

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
text+"</"+tagName+">"); ---> parent <--- .append(div);div.AnyTime_title=

[WARNING] The symbol div is declared but is apparently never used.
This code can probably be written in a more compact way.
tagName+">");parent.append( ---> div <--- );div.AnyTime_title=title;div.

[WARNING] The symbol div is declared but is apparently never used.
This code can probably be written in a more compact way.
);parent.append(div); ---> div <--- .AnyTime_title=title;div.click(function

[WARNING] The symbol title is declared but is apparently never used.
This code can probably be written in a more compact way.
append(div);div.AnyTime_title= ---> title <--- ;div.click(function(e){

[WARNING] The symbol div is declared but is apparently never used.
This code can probably be written in a more compact way.
div);div.AnyTime_title=title; ---> div <--- .click(function(e){_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
div.click(function(e){ ---> _this <--- .tempFunc=handler;_this.tempFunc(e

[WARNING] The symbol handler is declared but is apparently never used.
This code can probably be written in a more compact way.
function(e){_this.tempFunc= ---> handler <--- ;_this.tempFunc(e);})

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
e){_this.tempFunc=handler; ---> _this <--- .tempFunc(e);});div

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
.tempFunc=handler;_this.tempFunc( ---> e <--- );});div.dblclick(function

[WARNING] The symbol div is declared but is apparently never used.
This code can probably be written in a more compact way.
.tempFunc(e);}); ---> div <--- .dblclick(function(e){var elem

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
.dblclick(function(e){var  ---> elem <--- =$(this);if(elem.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(e){var elem= ---> $ <--- (this);if(elem.is(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
elem=$(this);if( ---> elem <--- .is(".AnyTime-off-off-btn")){_this.dismissODiv

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(elem.is(".AnyTime-off-off-btn")){ ---> _this <--- .dismissODiv(e);}else{if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(".AnyTime-off-off-btn")){_this.dismissODiv( ---> e <--- );}else{if(elem.is

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
(e);}else{if( ---> elem <--- .is(".AnyTime-mil-btn")||elem.is(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
if(elem.is(".AnyTime-mil-btn")|| ---> elem <--- .is(".AnyTime-cent-btn")||elem.is(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
)||elem.is(".AnyTime-cent-btn")|| ---> elem <--- .is(".AnyTime-dec-btn")||elem.is(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
)||elem.is(".AnyTime-dec-btn")|| ---> elem <--- .is(".AnyTime-yr-btn")||elem.is(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
)||elem.is(".AnyTime-yr-btn")|| ---> elem <--- .is(".AnyTime-era-btn")){_this.dismissYDiv

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
||elem.is(".AnyTime-era-btn")){ ---> _this <--- .dismissYDiv(e);}else{if

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(".AnyTime-era-btn")){_this.dismissYDiv( ---> e <--- );}else{if(_this.pop

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(e);}else{if( ---> _this <--- .pop){_this.dismiss(e)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(_this.pop){ ---> _this <--- .dismiss(e);}}}}

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.pop){_this.dismiss( ---> e <--- );}}}});returndiv

[WARNING] The symbol div is declared but is apparently never used.
This code can probably be written in a more compact way.
);}}}});return ---> div <--- ;},cleanup:function(event){

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
.div.hide();if( ---> __iframe <--- ){__iframe.hide();}if

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
hide();if(__iframe){ ---> __iframe <--- .hide();}if(this.

[WARNING] The symbol btn is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(btn){if(! ---> btn <--- .hasClass("AnyTime-focus-btn")){this.div

[WARNING] The symbol btn is declared but is apparently never used.
This code can probably be written in a more compact way.
removeClass("AnyTime-focus-btn ui-state-focus");this.fBtn= ---> btn <--- ;btn.removeClass("ui-state-default ui-state-highlight");btn.

[WARNING] The symbol btn is declared but is apparently never used.
This code can probably be written in a more compact way.
"AnyTime-focus-btn ui-state-focus");this.fBtn=btn; ---> btn <--- .removeClass("ui-state-default ui-state-highlight");btn.addClass(

[WARNING] The symbol btn is declared but is apparently never used.
This code can probably be written in a more compact way.
btn;btn.removeClass("ui-state-default ui-state-highlight"); ---> btn <--- .addClass("AnyTime-focus-btn ui-state-default ui-state-highlight ui-state-focus");}if(btn

[WARNING] The symbol btn is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("AnyTime-focus-btn ui-state-default ui-state-highlight ui-state-focus");}if( ---> btn <--- .hasClass("AnyTime-off-off-btn")){var oBT=

[WARNING] The symbol oBT is declared but is apparently never used.
This code can probably be written in a more compact way.
btn.hasClass("AnyTime-off-off-btn")){var  ---> oBT <--- =this.oBody.offset().top

[WARNING] The symbol btnT is declared but is apparently never used.
This code can probably be written in a more compact way.
oBody.offset().top;var  ---> btnT <--- =btn.offset().top;var 

[WARNING] The symbol btn is declared but is apparently never used.
This code can probably be written in a more compact way.
offset().top;var btnT= ---> btn <--- .offset().top;var btnH=

[WARNING] The symbol btnH is declared but is apparently never used.
This code can probably be written in a more compact way.
btn.offset().top;var  ---> btnH <--- =btn.AnyTime_height(true);if(

[WARNING] The symbol btn is declared but is apparently never used.
This code can probably be written in a more compact way.
offset().top;var btnH= ---> btn <--- .AnyTime_height(true);if(btnT-

[WARNING] The symbol btnT is declared but is apparently never used.
This code can probably be written in a more compact way.
btn.AnyTime_height(true);if( ---> btnT <--- -btnH<oBT){this.oBody.

[WARNING] The symbol btnH is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height(true);if(btnT- ---> btnH <--- <oBT){this.oBody.scrollTop(

[WARNING] The symbol oBT is declared but is apparently never used.
This code can probably be written in a more compact way.
true);if(btnT-btnH< ---> oBT <--- ){this.oBody.scrollTop(btnT+

[WARNING] The symbol btnT is declared but is apparently never used.
This code can probably be written in a more compact way.
oBT){this.oBody.scrollTop( ---> btnT <--- +this.oBody.scrollTop()-(

[WARNING] The symbol oBT is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.oBody.innerHeight()+ ---> oBT <--- )+(btnH*2));}

[WARNING] The symbol btnH is declared but is apparently never used.
This code can probably be written in a more compact way.
.innerHeight()+oBT)+( ---> btnH <--- *2));}else{if(

[WARNING] The symbol btnT is declared but is apparently never used.
This code can probably be written in a more compact way.
2));}else{if( ---> btnT <--- +btnH>oBT+this.oBody.innerHeight

[WARNING] The symbol btnH is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{if(btnT+ ---> btnH <--- >oBT+this.oBody.innerHeight()

[WARNING] The symbol oBT is declared but is apparently never used.
This code can probably be written in a more compact way.
}else{if(btnT+btnH> ---> oBT <--- +this.oBody.innerHeight()){

[WARNING] The symbol btnT is declared but is apparently never used.
This code can probably be written in a more compact way.
){this.oBody.scrollTop(( ---> btnT <--- +this.oBody.scrollTop())-

[WARNING] The symbol oBT is declared but is apparently never used.
This code can probably be written in a more compact way.
.oBody.scrollTop())-( ---> oBT <--- +btnH));}}}},

[WARNING] The symbol btnH is declared but is apparently never used.
This code can probably be written in a more compact way.
.scrollTop())-(oBT+ ---> btnH <--- ));}}}},key:

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
,key:function(event){var  ---> t <--- =null;var elem=this.div.

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
event){var t=null;var  ---> elem <--- =this.div.find(".AnyTime-focus-btn");

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
.div.find(".AnyTime-focus-btn");var  ---> key <--- =event.keyCode||event.which;this

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
.find(".AnyTime-focus-btn");var key= ---> event <--- .keyCode||event.which;this.denyTab

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
);var key=event.keyCode|| ---> event <--- .which;this.denyTab=true;if

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
;this.denyTab=true;if( ---> key <--- ==16){}else{if((

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
16){}else{if(( ---> key <--- ==10)||(key==13)||

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
if((key==10)||( ---> key <--- ==13)||(key==27))

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(key==13)||( ---> key <--- ==27)){if(this.oDiv

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(":visible")){this.dismissODiv( ---> event <--- );}else{if(this.yDiv

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(":visible")){this.dismissYDiv( ---> event <--- );}else{if(this.pop

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
this.pop){this.dismiss( ---> event <--- );}}}}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}else{if(( ---> key <--- ==33)||((key==9)

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
((key==33)||(( ---> key <--- ==9)&&event.shiftKey)){

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
)||((key==9)&& ---> event <--- .shiftKey)){if(this.fBtn

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-off-off-btn")){if( ---> key <--- ==9){this.dismissODiv(event)

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
key==9){this.dismissODiv( ---> event <--- );}}else{if(this.

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-mil-btn")){if( ---> key <--- ==9){this.dismissYDiv(event)

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
key==9){this.dismissYDiv( ---> event <--- );}}else{if(this.

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
(".AnyTime-yrs").length){if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
("click");}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
hasClass("AnyTime-dom-btn")){if(( ---> key <--- ==9)&&event.shiftKey){this

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
{if((key==9)&& ---> event <--- .shiftKey){this.denyTab=false;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
denyTab=false;return;}else{ ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
time.getTime());if( ---> event <--- .shiftKey){t.setFullYear(t.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(event.shiftKey){ ---> t <--- .setFullYear(t.getFullYear()-1

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
event.shiftKey){t.setFullYear( ---> t <--- .getFullYear()-1);}else

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
)-1);}else{var  ---> mo <--- =t.getMonth()-1;if

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
1);}else{var mo= ---> t <--- .getMonth()-1;if(t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()-1;if( ---> t <--- .getDate()>__daysIn[mo])

[WARNING] The symbol __daysIn is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(t.getDate()> ---> __daysIn <--- [mo]){t.setDate(__daysIn

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
(t.getDate()>__daysIn[ ---> mo <--- ]){t.setDate(__daysIn[mo

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
()>__daysIn[mo]){ ---> t <--- .setDate(__daysIn[mo]);}

[WARNING] The symbol __daysIn is declared but is apparently never used.
This code can probably be written in a more compact way.
[mo]){t.setDate( ---> __daysIn <--- [mo]);}t.setMonth(

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
]){t.setDate(__daysIn[ ---> mo <--- ]);}t.setMonth(mo)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
setDate(__daysIn[mo]);} ---> t <--- .setMonth(mo);}this.keyDateChange

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
mo]);}t.setMonth( ---> mo <--- );}this.keyDateChange(t);

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(mo);}this.keyDateChange( ---> t <--- );}}else{if(this.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-hr-btn")){ ---> t <--- =this.dDoM||this.dMo;if

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dDoM||this.dMo;if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dMo;if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
("click");}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-min-ten-btn")){ ---> t <--- =this.dH||this.dDoM||this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dDoM||this.dMo;if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dMo;if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
("click");}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(this.dM){ ---> t <--- =this.dM.find(".AnyTime-mins-ones");

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.find(".AnyTime-mins-ones");}else{ ---> t <--- =this.dH||this.dDoM||this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
dDoM||this.dMo;}if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dMo;}if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
("click");}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(this.dS){ ---> t <--- =this.dS.find(".AnyTime-secs-ones");

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(this.dM){ ---> t <--- =this.dM.find(".AnyTime-mins-ones");

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.find(".AnyTime-mins-ones");}else{ ---> t <--- =this.dH||this.dDoM||this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
||this.dMo;}}if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
dMo;}}if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
("click");}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}else{if(( ---> key <--- ==34)||(key==9))

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
if((key==34)||( ---> key <--- ==9)){if(this.fBtn

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-yr-btn")){ ---> t <--- =this.yDiv.find(".AnyTime-era-btn.AnyTime-cur-btn");

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
yDiv.find(".AnyTime-era-btn.AnyTime-cur-btn");if( ---> t <--- .length){t.triggerHandler("click")

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t.length){ ---> t <--- .triggerHandler("click");}else{if

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
("click");}else{if( ---> key <--- ==9){this.dismissYDiv(event)

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
key==9){this.dismissYDiv( ---> event <--- );}}}else{if(this

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-era-btn")){if( ---> key <--- ==9){this.dismissYDiv(event)

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
key==9){this.dismissYDiv( ---> event <--- );}}else{if(this.

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-off-off-btn")){if( ---> key <--- ==9){this.dismissODiv(event)

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
key==9){this.dismissODiv( ---> event <--- );}}else{if(this.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.parents(".AnyTime-yrs").length){ ---> t <--- =this.dDoM||this.dMo||this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dS||this.dO;if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dO;if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_clickCurrent();}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-mon-btn")){ ---> t <--- =this.dDoM||this.dH||this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dS||this.dO;if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dO;if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_clickCurrent();}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-dom-btn")){if( ---> key <--- ==9){t=this.dH||

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(key==9){ ---> t <--- =this.dH||this.dM||this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dS||this.dO;if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dO;if(t){ ---> t <--- .AnyTime_clickCurrent();}else{this.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=false;return;}}else{ ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
time.getTime());if( ---> event <--- .shiftKey){t.setFullYear(t.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(event.shiftKey){ ---> t <--- .setFullYear(t.getFullYear()+1

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
event.shiftKey){t.setFullYear( ---> t <--- .getFullYear()+1);}else

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1);}else{var  ---> mo <--- =t.getMonth()+1;if

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
1);}else{var mo= ---> t <--- .getMonth()+1;if(t

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()+1;if( ---> t <--- .getDate()>__daysIn[mo])

[WARNING] The symbol __daysIn is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(t.getDate()> ---> __daysIn <--- [mo]){t.setDate(__daysIn

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
(t.getDate()>__daysIn[ ---> mo <--- ]){t.setDate(__daysIn[mo

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
()>__daysIn[mo]){ ---> t <--- .setDate(__daysIn[mo]);}

[WARNING] The symbol __daysIn is declared but is apparently never used.
This code can probably be written in a more compact way.
[mo]){t.setDate( ---> __daysIn <--- [mo]);}t.setMonth(

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
]){t.setDate(__daysIn[ ---> mo <--- ]);}t.setMonth(mo)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
setDate(__daysIn[mo]);} ---> t <--- .setMonth(mo);}this.keyDateChange

[WARNING] The symbol mo is declared but is apparently never used.
This code can probably be written in a more compact way.
mo]);}t.setMonth( ---> mo <--- );}this.keyDateChange(t);

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(mo);}this.keyDateChange( ---> t <--- );}}else{if(this.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-hr-btn")){ ---> t <--- =this.dM||this.dS||this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dS||this.dO;if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dO;if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_clickCurrent();}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-min-one-btn")){ ---> t <--- =this.dS||this.dO;if

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.dS||this.dO;if( ---> t <--- ){t.AnyTime_clickCurrent();}else

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dO;if(t){ ---> t <--- .AnyTime_clickCurrent();}else{if(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_clickCurrent();}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_clickCurrent();}else{if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-off-btn")){if( ---> key <--- ==9){this.denyTab=false;

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}}else{if( ---> key <--- ==35){if(this.fBtn.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-era-btn")){ ---> t <--- =this.yDiv.find(".AnyTime-ce-btn");

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.find(".AnyTime-ce-btn");if(! ---> t <--- .length){t=this.yDiv.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(!t.length){ ---> t <--- =this.yDiv.find(".AnyTime-yr9-btn");

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.yDiv.find(".AnyTime-yr9-btn");} ---> t <--- .triggerHandler("click");}else{if

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-dom-btn")){ ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setDate(1);t.setMonth(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);t.setDate(1); ---> t <--- .setMonth(t.getMonth()+1

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
setDate(1);t.setMonth( ---> t <--- .getMonth()+1);t.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
t.getMonth()+1); ---> t <--- .setDate(t.getDate()-1

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1);t.setDate( ---> t <--- .getDate()-1);if(

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
getDate()-1);if( ---> event <--- .ctrlKey){t.setMonth(11)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(event.ctrlKey){ ---> t <--- .setMonth(11);}this.keyDateChange

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(11);}this.keyDateChange( ---> t <--- );}else{if(this.dS

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}}else{if( ---> key <--- ==36){if(this.fBtn.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
.fBtn.hasClass("AnyTime-dom-btn")){ ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setDate(1);if(event.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
t.setDate(1);if( ---> event <--- .ctrlKey){t.setMonth(0)

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(event.ctrlKey){ ---> t <--- .setMonth(0);}this.keyDateChange

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(0);}this.keyDateChange( ---> t <--- );}else{if(this.dY

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}}else{if( ---> key <--- ==37){if(this.fBtn.

[WARNING] The symbol __oneDay is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.time.getTime()- ---> __oneDay <--- ));}else{this.keyBack(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
();}}else{if( ---> key <--- ==38){if(this.fBtn.

[WARNING] The symbol __oneDay is declared but is apparently never used.
This code can probably be written in a more compact way.
time.getTime()-(7* ---> __oneDay <--- )));}else{this.keyBack

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
();}}else{if( ---> key <--- ==39){if(this.fBtn.

[WARNING] The symbol __oneDay is declared but is apparently never used.
This code can probably be written in a more compact way.
(this.time.getTime()+ ---> __oneDay <--- ));}else{this.keyAhead(

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
();}}else{if( ---> key <--- ==40){if(this.fBtn.

[WARNING] The symbol __oneDay is declared but is apparently never used.
This code can probably be written in a more compact way.
time.getTime()+(7* ---> __oneDay <--- )));}else{this.keyAhead

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}else{if((( ---> key <--- ==86)||(key==118))

[WARNING] The symbol key is declared but is apparently never used.
This code can probably be written in a more compact way.
(((key==86)||( ---> key <--- ==118))&&event.ctrlKey){

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(key==118))&& ---> event <--- .ctrlKey){this.inp.val(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
("").change();var  ---> _this <--- =this;setTimeout(function(){_this

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
=this;setTimeout(function(){ ---> _this <--- .showPkr(null);},100)

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
}}}}}}}}} ---> event <--- .preventDefault();},keyAhead:function

[WARNING] The symbol newDate is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-dom-btn")){this.set( ---> newDate <--- );this.upd(null);this

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
this.cloak){this.cloak= ---> $ <--- ('<div class="AnyTime-cloak" style="position:absolute" />');this.div.append(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
click(function(e){if( ---> _this <--- .oDiv&&_this.oDiv.is(":visible"

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
e){if(_this.oDiv&& ---> _this <--- .oDiv.is(":visible")){_this

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
.oDiv.is(":visible")){ ---> _this <--- .dismissODiv(e);}else{_this

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
(":visible")){_this.dismissODiv( ---> e <--- );}else{_this.dismissYDiv(e

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
.dismissODiv(e);}else{ ---> _this <--- .dismissYDiv(e);}});

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{_this.dismissYDiv( ---> e <--- );}});}else{this

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
,newHour:function(event){var  ---> h <--- ;var t;var elem=$(event

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
function(event){var h;var  ---> t <--- ;var elem=$(event.target)

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
){var h;var t;var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
var h;var t;var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
;var t;var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(!this.twelveHr){ ---> h <--- =Number(elem.text());

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
this.twelveHr){h=Number( ---> elem <--- .text());}else{var 

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
text());}else{var  ---> str <--- =elem.text();t=str

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
));}else{var str= ---> elem <--- .text();t=str.indexOf

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
var str=elem.text(); ---> t <--- =str.indexOf("a");if(

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
=elem.text();t= ---> str <--- .indexOf("a");if(t<

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
str.indexOf("a");if( ---> t <--- <0){t=Number(str.

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(t<0){ ---> t <--- =Number(str.substr(0,str

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
t<0){t=Number( ---> str <--- .substr(0,str.indexOf("p"

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
=Number(str.substr(0, ---> str <--- .indexOf("p")));h=

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
str.indexOf("p"))); ---> h <--- =((t==12)?12:

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
"p")));h=(( ---> t <--- ==12)?12:(t+12

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(t==12)?12:( ---> t <--- +12));}else{t=

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
t+12));}else{ ---> t <--- =Number(str.substr(0,t

[WARNING] The symbol str is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{t=Number( ---> str <--- .substr(0,t));h

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=Number(str.substr(0, ---> t <--- ));h=((t==12

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.substr(0,t)); ---> h <--- =((t==12)?0:

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
,t));h=(( ---> t <--- ==12)?0:t);}

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
((t==12)?0: ---> t <--- );}}t=new Date(this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
)?0:t);}} ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setHours(h);this.set(

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime());t.setHours( ---> h <--- );this.set(t);this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
setHours(h);this.set( ---> t <--- );this.upd(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.upd( ---> elem <--- );},newOffset:function(event)

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
newOffset:function(event){if( ---> event <--- .target==this.oSel[0])

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
[0]){this.askOffset( ---> event <--- );}else{this.upd(this

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,newOPos:function(event){var  ---> elem <--- =$(event.target);this.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(event){var elem= ---> $ <--- (event.target);this.offMin=

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);this.offMin=elem[

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
event.target);this.offMin= ---> elem <--- [0].AnyTime_offMin;this.offSI=

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
0].AnyTime_offMin;this.offSI= ---> elem <--- [0].AnyTime_offSI;var t=new 

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
=elem[0].AnyTime_offSI;var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime());this.set( ---> t <--- );this.updODiv(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.updODiv( ---> elem <--- );},newYear:function(event)

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,newYear:function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol txt is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> txt <--- =elem.text();if((

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
)){return;}var txt= ---> elem <--- .text();if((txt==

[WARNING] The symbol txt is declared but is apparently never used.
This code can probably be written in a more compact way.
elem.text();if(( ---> txt <--- =="<")||(txt=="&lt;"))

[WARNING] The symbol txt is declared but is apparently never used.
This code can probably be written in a more compact way.
if((txt=="<")||( ---> txt <--- =="&lt;")){this.askYear(event

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
=="&lt;")){this.askYear( ---> event <--- );}else{if((txt==

[WARNING] The symbol txt is declared but is apparently never used.
This code can probably be written in a more compact way.
event);}else{if(( ---> txt <--- ==">")||(txt=="&gt;"))

[WARNING] The symbol txt is declared but is apparently never used.
This code can probably be written in a more compact way.
if((txt==">")||( ---> txt <--- =="&gt;")){this.askYear(event

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
=="&gt;")){this.askYear( ---> event <--- );}else{var t=new Date

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
askYear(event);}else{var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setFullYear(Number(txt));this

[WARNING] The symbol txt is declared but is apparently never used.
This code can probably be written in a more compact way.
));t.setFullYear(Number( ---> txt <--- ));this.set(t);

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
(txt));this.set( ---> t <--- );this.upd(this.yCur)

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,newYPos:function(event){var  ---> elem <--- =$(event.target);if(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(event){var elem= ---> $ <--- (event.target);if(elem.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
(event){var elem=$( ---> event <--- .target);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
$(event.target);if( ---> elem <--- .hasClass("AnyTime-out-btn")){return;}

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-out-btn")){return;}var  ---> era <--- =1;var year=this.time.

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
return;}var era=1;var  ---> year <--- =this.time.getFullYear();if

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
.time.getFullYear();if( ---> year <--- <0){era=(-1)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(year<0){ ---> era <--- =(-1);year=0-

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
){era=(-1); ---> year <--- =0-year;}year=AnyTime.

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
(-1);year=0- ---> year <--- ;}year=AnyTime.pad(year,

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
);year=0-year;} ---> year <--- =AnyTime.pad(year,4);

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
year=0-year;}year= ---> AnyTime <--- .pad(year,4);if(

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
year;}year=AnyTime.pad( ---> year <--- ,4);if(elem.hasClass(

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
pad(year,4);if( ---> elem <--- .hasClass("AnyTime-mil-btn")){year=elem

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
(elem.hasClass("AnyTime-mil-btn")){ ---> year <--- =elem.html()+year.substring

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-mil-btn")){year= ---> elem <--- .html()+year.substring(1

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
{year=elem.html()+ ---> year <--- .substring(1,4);}else

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,4);}else{if( ---> elem <--- .hasClass("AnyTime-cent-btn")){year=year

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
(elem.hasClass("AnyTime-cent-btn")){ ---> year <--- =year.substring(0,1)+

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-cent-btn")){year= ---> year <--- .substring(0,1)+elem.

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
year.substring(0,1)+ ---> elem <--- .html()+year.substring(2

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
1)+elem.html()+ ---> year <--- .substring(2,4);}else

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
,4);}else{if( ---> elem <--- .hasClass("AnyTime-dec-btn")){year=year

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
(elem.hasClass("AnyTime-dec-btn")){ ---> year <--- =year.substring(0,2)+

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
.hasClass("AnyTime-dec-btn")){year= ---> year <--- .substring(0,2)+elem.

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
year.substring(0,2)+ ---> elem <--- .html()+year.substring(3

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
2)+elem.html()+ ---> year <--- .substring(3,4);}else

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
(3,4);}else{ ---> year <--- =year.substring(0,3)+

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
,4);}else{year= ---> year <--- .substring(0,3)+elem.

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
year.substring(0,3)+ ---> elem <--- .html();}}}if(

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
html();}}}if( ---> year <--- =="0000"){year=1;}var 

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(year=="0000"){ ---> year <--- =1;}var t=new Date(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
"0000"){year=1;}var  ---> t <--- =new Date(this.time.getTime(

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> t <--- .setFullYear(era*year);this.

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
getTime());t.setFullYear( ---> era <--- *year);this.set(t)

[WARNING] The symbol year is declared but is apparently never used.
This code can probably be written in a more compact way.
));t.setFullYear(era* ---> year <--- );this.set(t);this

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
era*year);this.set( ---> t <--- );this.updYDiv(elem);}

[WARNING] The symbol elem is declared but is apparently never used.
This code can probably be written in a more compact way.
set(t);this.updYDiv( ---> elem <--- );},onReady:function(){

[WARNING] The symbol off is declared but is apparently never used.
This code can probably be written in a more compact way.
{if(this.pop){var  ---> off <--- =this.inp.offset();var 

[WARNING] The symbol bodyWidth is declared but is apparently never used.
This code can probably be written in a more compact way.
this.inp.offset();var  ---> bodyWidth <--- =$(document.body).outerWidth(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
inp.offset();var bodyWidth= ---> $ <--- (document.body).outerWidth(true)

[WARNING] The symbol pickerWidth is declared but is apparently never used.
This code can probably be written in a more compact way.
body).outerWidth(true);var  ---> pickerWidth <--- =this.div.outerWidth(true);

[WARNING] The symbol left is declared but is apparently never used.
This code can probably be written in a more compact way.
.div.outerWidth(true);var  ---> left <--- =off.left;if(left+pickerWidth

[WARNING] The symbol off is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerWidth(true);var left= ---> off <--- .left;if(left+pickerWidth>bodyWidth

[WARNING] The symbol left is declared but is apparently never used.
This code can probably be written in a more compact way.
var left=off.left;if( ---> left <--- +pickerWidth>bodyWidth-20){left=

[WARNING] The symbol pickerWidth is declared but is apparently never used.
This code can probably be written in a more compact way.
=off.left;if(left+ ---> pickerWidth <--- >bodyWidth-20){left=bodyWidth-

[WARNING] The symbol bodyWidth is declared but is apparently never used.
This code can probably be written in a more compact way.
.left;if(left+pickerWidth> ---> bodyWidth <--- -20){left=bodyWidth-(pickerWidth

[WARNING] The symbol left is declared but is apparently never used.
This code can probably be written in a more compact way.
left+pickerWidth>bodyWidth-20){ ---> left <--- =bodyWidth-(pickerWidth+20);}

[WARNING] The symbol bodyWidth is declared but is apparently never used.
This code can probably be written in a more compact way.
pickerWidth>bodyWidth-20){left= ---> bodyWidth <--- -(pickerWidth+20);}var top

[WARNING] The symbol pickerWidth is declared but is apparently never used.
This code can probably be written in a more compact way.
-20){left=bodyWidth-( ---> pickerWidth <--- +20);}var top=off.

[WARNING] The symbol top is declared but is apparently never used.
This code can probably be written in a more compact way.
-(pickerWidth+20);}var  ---> top <--- =off.top-this.div.outerHeight

[WARNING] The symbol off is declared but is apparently never used.
This code can probably be written in a more compact way.
pickerWidth+20);}var top= ---> off <--- .top-this.div.outerHeight(true

[WARNING] The symbol top is declared but is apparently never used.
This code can probably be written in a more compact way.
div.outerHeight(true);if( ---> top <--- <0){top=off.top+

[WARNING] The symbol top is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(top<0){ ---> top <--- =off.top+this.inp.outerHeight

[WARNING] The symbol off is declared but is apparently never used.
This code can probably be written in a more compact way.
if(top<0){top= ---> off <--- .top+this.inp.outerHeight(true

[WARNING] The symbol top is declared but is apparently never used.
This code can probably be written in a more compact way.
div.css({top:String( ---> top <--- )+"px",left:String(left<

[WARNING] The symbol left is declared but is apparently never used.
This code can probably be written in a more compact way.
top)+"px",left:String( ---> left <--- <0?0:left)+"px"}

[WARNING] The symbol left is declared but is apparently never used.
This code can probably be written in a more compact way.
:String(left<0?0: ---> left <--- )+"px"});}var wOff=

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
left)+"px"});}var  ---> wOff <--- =this.div.offset();if

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
oDiv.is(":visible")){var  ---> oOff <--- =this.oLab.offset();if

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("position")=="absolute"){ ---> oOff <--- .top-=wOff.top;oOff.left

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="absolute"){oOff.top-= ---> wOff <--- .top;oOff.left=oOff.left

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
{oOff.top-=wOff.top; ---> oOff <--- .left=oOff.left-wOff.left

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
-=wOff.top;oOff.left= ---> oOff <--- .left-wOff.left;wOff={

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
;oOff.left=oOff.left- ---> wOff <--- .left;wOff={top:0,

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
=oOff.left-wOff.left; ---> wOff <--- ={top:0,left:0}

[WARNING] The symbol oW is declared but is apparently never used.
This code can probably be written in a more compact way.
0,left:0};}var  ---> oW <--- =this.oDiv.AnyTime_width(true);

[WARNING] The symbol wW is declared but is apparently never used.
This code can probably be written in a more compact way.
.oDiv.AnyTime_width(true);var  ---> wW <--- =this.div.AnyTime_width(true);

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
div.AnyTime_width(true);if( ---> oOff <--- .left+oW>wOff.left+wW

[WARNING] The symbol oW is declared but is apparently never used.
This code can probably be written in a more compact way.
true);if(oOff.left+ ---> oW <--- >wOff.left+wW){oOff.

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(oOff.left+oW> ---> wOff <--- .left+wW){oOff.left=

[WARNING] The symbol wW is declared but is apparently never used.
This code can probably be written in a more compact way.
.left+oW>wOff.left+ ---> wW <--- ){oOff.left=(wOff.left

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
oW>wOff.left+wW){ ---> oOff <--- .left=(wOff.left+wW)

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
+wW){oOff.left=( ---> wOff <--- .left+wW)-oW;if(

[WARNING] The symbol wW is declared but is apparently never used.
This code can probably be written in a more compact way.
oOff.left=(wOff.left+ ---> wW <--- )-oW;if(oOff.left<

[WARNING] The symbol oW is declared but is apparently never used.
This code can probably be written in a more compact way.
=(wOff.left+wW)- ---> oW <--- ;if(oOff.left<2){

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
left+wW)-oW;if( ---> oOff <--- .left<2){oOff.left=

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
if(oOff.left<2){ ---> oOff <--- .left=2;}}var oH=

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
oOff.left=2;}}var  ---> oH <--- =this.oDiv.AnyTime_height(true);

[WARNING] The symbol wH is declared but is apparently never used.
This code can probably be written in a more compact way.
.oDiv.AnyTime_height(true);var  ---> wH <--- =this.div.AnyTime_height(true);

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
this.div.AnyTime_height(true); ---> oOff <--- .top+=this.oLab.AnyTime_height(true

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
oLab.AnyTime_height(true);if( ---> oOff <--- .top+oH>wOff.top+wH

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
true);if(oOff.top+ ---> oH <--- >wOff.top+wH){oOff.

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(oOff.top+oH> ---> wOff <--- .top+wH){oOff.top=

[WARNING] The symbol wH is declared but is apparently never used.
This code can probably be written in a more compact way.
.top+oH>wOff.top+ ---> wH <--- ){oOff.top=oOff.top-

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
oH>wOff.top+wH){ ---> oOff <--- .top=oOff.top-oH;}

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
top+wH){oOff.top= ---> oOff <--- .top-oH;}if(oOff.

[WARNING] The symbol oH is declared but is apparently never used.
This code can probably be written in a more compact way.
{oOff.top=oOff.top- ---> oH <--- ;}if(oOff.top<wOff.

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
oOff.top-oH;}if( ---> oOff <--- .top<wOff.top){oOff.

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
oH;}if(oOff.top< ---> wOff <--- .top){oOff.top=wOff.

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
oOff.top<wOff.top){ ---> oOff <--- .top=wOff.top;}this.

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
wOff.top){oOff.top= ---> wOff <--- .top;}this.oDiv.css(

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
this.oDiv.css({top: ---> oOff <--- .top+"px",left:oOff.left

[WARNING] The symbol oOff is declared but is apparently never used.
This code can probably be written in a more compact way.
:oOff.top+"px",left: ---> oOff <--- .left+"px"});}else{

[WARNING] The symbol yOff is declared but is apparently never used.
This code can probably be written in a more compact way.
yDiv.is(":visible")){var  ---> yOff <--- =this.yLab.offset();if

[WARNING] The symbol yOff is declared but is apparently never used.
This code can probably be written in a more compact way.
.css("position")=="absolute"){ ---> yOff <--- .top-=wOff.top;yOff.left

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="absolute"){yOff.top-= ---> wOff <--- .top;yOff.left=yOff.left

[WARNING] The symbol yOff is declared but is apparently never used.
This code can probably be written in a more compact way.
{yOff.top-=wOff.top; ---> yOff <--- .left=yOff.left-wOff.left

[WARNING] The symbol yOff is declared but is apparently never used.
This code can probably be written in a more compact way.
-=wOff.top;yOff.left= ---> yOff <--- .left-wOff.left;wOff={

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
;yOff.left=yOff.left- ---> wOff <--- .left;wOff={top:0,

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
=yOff.left-wOff.left; ---> wOff <--- ={top:0,left:0}

[WARNING] The symbol yOff is declared but is apparently never used.
This code can probably be written in a more compact way.
:0,left:0};} ---> yOff <--- .left+=((this.yLab.outerWidth

[WARNING] The symbol yOff is declared but is apparently never used.
This code can probably be written in a more compact way.
this.yDiv.css({top: ---> yOff <--- .top+"px",left:yOff.left

[WARNING] The symbol yOff is declared but is apparently never used.
This code can probably be written in a more compact way.
:yOff.top+"px",left: ---> yOff <--- .left+"px"});}}if

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
this.cloak.css({top: ---> wOff <--- .top+"px",left:wOff.left

[WARNING] The symbol wOff is declared but is apparently never used.
This code can probably be written in a more compact way.
:wOff.top+"px",left: ---> wOff <--- .left+"px",height:String(this

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
String(this.div.outerWidth(! ---> $ <--- .browser.safari)-2)+"px"

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
,set:function(newTime){var  ---> t <--- =newTime.getTime();if(this

[WARNING] The symbol newTime is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(newTime){var t= ---> newTime <--- .getTime();if(this.earliest

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(this.earliest&&( ---> t <--- <this.earliest)){this.time

[WARNING] The symbol t is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(this.latest&&( ---> t <--- >this.latest)){this.time

[WARNING] The symbol newTime is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{this.time= ---> newTime <--- ;}}},showPkr:function(event

[WARNING] The symbol e is declared but is apparently never used.
This code can probably be written in a more compact way.
conv.getUtcParseOffsetSubIndex();}catch( ---> e <--- ){this.time=new Date()

[WARNING] The symbol cb is declared but is apparently never used.
This code can probably be written in a more compact way.
(null);fBtn=null;var  ---> cb <--- =".AnyTime-cur-btn:first";if(this.dDoM){

[WARNING] The symbol cb is declared but is apparently never used.
This code can probably be written in a more compact way.
{fBtn=this.dDoM.find( ---> cb <--- );}else{if(this.yCur

[WARNING] The symbol cb is declared but is apparently never used.
This code can probably be written in a more compact way.
{fBtn=this.dMo.find( ---> cb <--- );}else{if(this.dH

[WARNING] The symbol cb is declared but is apparently never used.
This code can probably be written in a more compact way.
{fBtn=this.dH.find( ---> cb <--- );}else{if(this.dM

[WARNING] The symbol cb is declared but is apparently never used.
This code can probably be written in a more compact way.
{fBtn=this.dM.find( ---> cb <--- );}else{if(this.dS

[WARNING] The symbol cb is declared but is apparently never used.
This code can probably be written in a more compact way.
{fBtn=this.dS.find( ---> cb <--- );}}}}}}this.

[WARNING] The symbol event is declared but is apparently never used.
This code can probably be written in a more compact way.
setFocus(fBtn);this.pos( ---> event <--- );if(this.pop&&__iframe)

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
event);if(this.pop&& ---> __iframe <--- ){setTimeout(function(){var pos

[WARNING] The symbol pos is declared but is apparently never used.
This code can probably be written in a more compact way.
){setTimeout(function(){var  ---> pos <--- =_this.div.offset();__iframe

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
setTimeout(function(){var pos= ---> _this <--- .div.offset();__iframe.css

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
=_this.div.offset(); ---> __iframe <--- .css({height:String(_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
__iframe.css({height:String( ---> _this <--- .div.outerHeight(true))+"px"

[WARNING] The symbol pos is declared but is apparently never used.
This code can probably be written in a more compact way.
))+"px",left:String( ---> pos <--- .left)+"px",position:"absolute",

[WARNING] The symbol pos is declared but is apparently never used.
This code can probably be written in a more compact way.
,position:"absolute",top:String( ---> pos <--- .top)+"px",width:String(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
top)+"px",width:String( ---> _this <--- .div.outerWidth(true))+"px"

[WARNING] The symbol __iframe is declared but is apparently never used.
This code can probably be written in a more compact way.
(true))+"px"}); ---> __iframe <--- .show();},300);

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
,upd:function(fBtn){var  ---> cmpLo <--- =new Date(this.time.getTime(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> cmpLo <--- .setMonth(0,1);cmpLo.

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.setMonth(0,1); ---> cmpLo <--- .setHours(0,0,0,0

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
,0,0,0);var  ---> cmpHi <--- =new Date(this.time.getTime(

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getTime()); ---> cmpHi <--- .setMonth(11,31);cmpHi.

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpHi.setMonth(11,31); ---> cmpHi <--- .setHours(23,59,59,999

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
,59,59,999);var  ---> current <--- =this.time.getFullYear();if

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
this.earliest&&this.yPast){ ---> cmpHi <--- .setYear(current-2);if(

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
this.yPast){cmpHi.setYear( ---> current <--- -2);if(cmpHi.getTime(

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
setYear(current-2);if( ---> cmpHi <--- .getTime()<this.earliest){

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
yPrior){this.yPrior.text( ---> AnyTime <--- .pad((current==1)?(

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
yPrior.text(AnyTime.pad(( ---> current <--- ==1)?(-1):(

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
1)?(-1):( ---> current <--- -1),4));if(

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(this.earliest){ ---> cmpHi <--- .setYear(current-1);if(

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
this.earliest){cmpHi.setYear( ---> current <--- -1);if(cmpHi.getTime(

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
setYear(current-1);if( ---> cmpHi <--- .getTime()<this.earliest){

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
yCur){this.yCur.text( ---> AnyTime <--- .pad(current,4));}

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
.yCur.text(AnyTime.pad( ---> current <--- ,4));}if(this.

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
yNext){this.yNext.text( ---> AnyTime <--- .pad((current==-1)?

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
yNext.text(AnyTime.pad(( ---> current <--- ==-1)?1:(current+

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
current==-1)?1:( ---> current <--- +1),4));if(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(this.latest){ ---> cmpLo <--- .setYear(current+1);if(

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
this.latest){cmpLo.setYear( ---> current <--- +1);if(cmpLo.getTime(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
setYear(current+1);if( ---> cmpLo <--- .getTime()>this.latest){

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
this.latest&&this.yAhead){ ---> cmpLo <--- .setYear(current+2);if(

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
this.yAhead){cmpLo.setYear( ---> current <--- +2);if(cmpLo.getTime(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
setYear(current+2);if( ---> cmpLo <--- .getTime()>this.latest){

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
yAhead.removeClass("AnyTime-out-btn ui-state-disabled");}} ---> cmpLo <--- .setFullYear(this.time.getFullYear()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getFullYear()); ---> cmpHi <--- .setFullYear(this.time.getFullYear()

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.time.getFullYear());var  ---> i <--- =0;current=this.time.getMonth

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
());var i=0; ---> current <--- =this.time.getMonth();$

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.time.getMonth(); ---> $ <--- ("#"+this.id+" .AnyTime-mon-btn").

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
" .AnyTime-mon-btn").each(function(){ ---> cmpLo <--- .setMonth(i);cmpHi.setDate(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){cmpLo.setMonth( ---> i <--- );cmpHi.setDate(1);cmpHi

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
){cmpLo.setMonth(i); ---> cmpHi <--- .setDate(1);cmpHi.setMonth(

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
);cmpHi.setDate(1); ---> cmpHi <--- .setMonth(i+1);cmpHi.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
setDate(1);cmpHi.setMonth( ---> i <--- +1);cmpHi.setDate(0)

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpHi.setMonth(i+1); ---> cmpHi <--- .setDate(0);$(this)

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
);cmpHi.setDate(0); ---> $ <--- (this).AnyTime_current(i==current,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);$(this).AnyTime_current( ---> i <--- ==current,((!_this.earliest)

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
$(this).AnyTime_current(i== ---> current <--- ,((!_this.earliest)||(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_current(i==current,((! ---> _this <--- .earliest)||(cmpHi.getTime()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> cmpHi <--- .getTime()>=_this.earliest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpHi.getTime()>= ---> _this <--- .earliest))&&((!_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest))&&((! ---> _this <--- .latest)||(cmpLo.getTime()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> cmpLo <--- .getTime()<=_this.latest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getTime()<= ---> _this <--- .latest)));i++;}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
)<=_this.latest))); ---> i <--- ++;});cmpLo.setMonth(this

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
));i++;}); ---> cmpLo <--- .setMonth(this.time.getMonth()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getMonth()); ---> cmpHi <--- .setMonth(this.time.getMonth()

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
time.getMonth(),1); ---> current <--- =this.time.getDate();var 

[WARNING] The symbol currentMonth is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getDate();var  ---> currentMonth <--- =this.time.getMonth();var 

[WARNING] The symbol dow1 is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getMonth();var  ---> dow1 <--- =cmpLo.getDay();if(this

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
time.getMonth();var dow1= ---> cmpLo <--- .getDay();if(this.fDOW

[WARNING] The symbol dow1 is declared but is apparently never used.
This code can probably be written in a more compact way.
();if(this.fDOW> ---> dow1 <--- ){dow1+=7;}var wom=

[WARNING] The symbol dow1 is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.fDOW>dow1){ ---> dow1 <--- +=7;}var wom=0,dow

[WARNING] The symbol wom is declared but is apparently never used.
This code can probably be written in a more compact way.
dow1){dow1+=7;}var  ---> wom <--- =0,dow=0;$("#"

[WARNING] The symbol dow is declared but is apparently never used.
This code can probably be written in a more compact way.
+=7;}var wom=0, ---> dow <--- =0;$("#"+this.id

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
var wom=0,dow=0; ---> $ <--- ("#"+this.id+" .AnyTime-wk").

[WARNING] The symbol dow is declared but is apparently never used.
This code can probably be written in a more compact way.
" .AnyTime-wk").each(function(){ ---> dow <--- =_this.fDOW;$(this).

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(function(){dow= ---> _this <--- .fDOW;$(this).children(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(){dow=_this.fDOW; ---> $ <--- (this).children().each(

[WARNING] The symbol dow is declared but is apparently never used.
This code can probably be written in a more compact way.
.each(function(){if( ---> dow <--- -_this.fDOW<7){var td

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(function(){if(dow- ---> _this <--- .fDOW<7){var td=$

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
-_this.fDOW<7){var  ---> td <--- =$(this);if(((

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.fDOW<7){var td= ---> $ <--- (this);if(((wom==

[WARNING] The symbol wom is declared but is apparently never used.
This code can probably be written in a more compact way.
$(this);if((( ---> wom <--- ==0)&&(dow<dow1))

[WARNING] The symbol dow is declared but is apparently never used.
This code can probably be written in a more compact way.
(((wom==0)&&( ---> dow <--- <dow1))||(cmpLo.getMonth(

[WARNING] The symbol dow1 is declared but is apparently never used.
This code can probably be written in a more compact way.
(wom==0)&&(dow< ---> dow1 <--- ))||(cmpLo.getMonth()!=

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
&&(dow<dow1))||( ---> cmpLo <--- .getMonth()!=currentMonth)){td

[WARNING] The symbol currentMonth is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getMonth()!= ---> currentMonth <--- )){td.html("&#160;");

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
.getMonth()!=currentMonth)){ ---> td <--- .html("&#160;");td.removeClass(

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
){td.html("&#160;"); ---> td <--- .removeClass("AnyTime-dom-btn-filled AnyTime-cur-btn ui-state-default ui-state-highlight");td.addClass(

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
);td.removeClass("AnyTime-dom-btn-filled AnyTime-cur-btn ui-state-default ui-state-highlight"); ---> td <--- .addClass("AnyTime-dom-btn-empty");if(wom)

[WARNING] The symbol wom is declared but is apparently never used.
This code can probably be written in a more compact way.
td.addClass("AnyTime-dom-btn-empty");if( ---> wom <--- ){if((cmpLo.getDate()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
;if(wom){if(( ---> cmpLo <--- .getDate()==1)&&(dow

[WARNING] The symbol dow is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate()==1)&&( ---> dow <--- !=0)){td.addClass("AnyTime-dom-btn-empty-after-filled"

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(dow!=0)){ ---> td <--- .addClass("AnyTime-dom-btn-empty-after-filled");}else{td

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("AnyTime-dom-btn-empty-after-filled");}else{ ---> td <--- .removeClass("AnyTime-dom-btn-empty-after-filled");}if(cmpLo

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
.removeClass("AnyTime-dom-btn-empty-after-filled");}if( ---> cmpLo <--- .getDate()<=7){td.

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getDate()<=7){ ---> td <--- .addClass("AnyTime-dom-btn-empty-below-filled");}else{td

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("AnyTime-dom-btn-empty-below-filled");}else{ ---> td <--- .removeClass("AnyTime-dom-btn-empty-below-filled");}cmpLo.setDate

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
{td.removeClass("AnyTime-dom-btn-empty-below-filled");} ---> cmpLo <--- .setDate(cmpLo.getDate()+1

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
("AnyTime-dom-btn-empty-below-filled");}cmpLo.setDate( ---> cmpLo <--- .getDate()+1);cmpHi.

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getDate()+1); ---> cmpHi <--- .setDate(cmpHi.getDate()+1

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1);cmpHi.setDate( ---> cmpHi <--- .getDate()+1);}else

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
()+1);}else{ ---> td <--- .addClass("AnyTime-dom-btn-empty-above-filled");if(dow==

[WARNING] The symbol dow is declared but is apparently never used.
This code can probably be written in a more compact way.
td.addClass("AnyTime-dom-btn-empty-above-filled");if( ---> dow <--- ==dow1-1){td.addClass(

[WARNING] The symbol dow1 is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("AnyTime-dom-btn-empty-above-filled");if(dow== ---> dow1 <--- -1){td.addClass("AnyTime-dom-btn-empty-before-filled")

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
if(dow==dow1-1){ ---> td <--- .addClass("AnyTime-dom-btn-empty-before-filled");}else{td

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("AnyTime-dom-btn-empty-before-filled");}else{ ---> td <--- .removeClass("AnyTime-dom-btn-empty-before-filled");}}td.

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
td.removeClass("AnyTime-dom-btn-empty-before-filled");}} ---> td <--- .addClass("ui-state-default ui-state-disabled");}else{i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.addClass("ui-state-default ui-state-disabled");}else{ ---> i <--- =cmpLo.getDate();td.text

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
("ui-state-default ui-state-disabled");}else{i= ---> cmpLo <--- .getDate();td.text(i

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
{i=cmpLo.getDate(); ---> td <--- .text(i);td.removeClass(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.getDate();td.text( ---> i <--- );td.removeClass("AnyTime-dom-btn-empty AnyTime-dom-btn-empty-above-filled AnyTime-dom-btn-empty-before-filled AnyTime-dom-btn-empty-after-filled AnyTime-dom-btn-empty-below-filled ui-state-default ui-state-disabled");td

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
);td.text(i); ---> td <--- .removeClass("AnyTime-dom-btn-empty AnyTime-dom-btn-empty-above-filled AnyTime-dom-btn-empty-before-filled AnyTime-dom-btn-empty-after-filled AnyTime-dom-btn-empty-below-filled ui-state-default ui-state-disabled");td.addClass(

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
);td.removeClass("AnyTime-dom-btn-empty AnyTime-dom-btn-empty-above-filled AnyTime-dom-btn-empty-before-filled AnyTime-dom-btn-empty-after-filled AnyTime-dom-btn-empty-below-filled ui-state-default ui-state-disabled"); ---> td <--- .addClass("AnyTime-dom-btn-filled ui-state-default");td.AnyTime_current(

[WARNING] The symbol td is declared but is apparently never used.
This code can probably be written in a more compact way.
);td.addClass("AnyTime-dom-btn-filled ui-state-default"); ---> td <--- .AnyTime_current(i==current,((!

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
addClass("AnyTime-dom-btn-filled ui-state-default");td.AnyTime_current( ---> i <--- ==current,((!_this.earliest)

[WARNING] The symbol current is declared but is apparently never used.
This code can probably be written in a more compact way.
"AnyTime-dom-btn-filled ui-state-default");td.AnyTime_current(i== ---> current <--- ,((!_this.earliest)||(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_current(i==current,((! ---> _this <--- .earliest)||(cmpHi.getTime()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> cmpHi <--- .getTime()>=_this.earliest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpHi.getTime()>= ---> _this <--- .earliest))&&((!_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest))&&((! ---> _this <--- .latest)||(cmpLo.getTime()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> cmpLo <--- .getTime()<=_this.latest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getTime()<= ---> _this <--- .latest)));cmpLo.setDate(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)<=_this.latest))); ---> cmpLo <--- .setDate(i+1);cmpHi.

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
latest)));cmpLo.setDate( ---> i <--- +1);cmpHi.setDate(i+

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.setDate(i+1); ---> cmpHi <--- .setDate(i+1);}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
i+1);cmpHi.setDate( ---> i <--- +1);}}dow++;}

[WARNING] The symbol dow is declared but is apparently never used.
This code can probably be written in a more compact way.
setDate(i+1);}} ---> dow <--- ++;});wom++;})

[WARNING] The symbol wom is declared but is apparently never used.
This code can probably be written in a more compact way.
;}}dow++;}); ---> wom <--- ++;});cmpLo.setMonth(this

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
});wom++;}); ---> cmpLo <--- .setMonth(this.time.getMonth()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getDate()); ---> cmpHi <--- .setMonth(this.time.getMonth()

[WARNING] The symbol not12 is declared but is apparently never used.
This code can probably be written in a more compact way.
.time.getDate());var  ---> not12 <--- =!this.twelveHr;var hr=this

[WARNING] The symbol hr is declared but is apparently never used.
This code can probably be written in a more compact way.
var not12=!this.twelveHr;var  ---> hr <--- =this.time.getHours();$

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.time.getHours(); ---> $ <--- ("#"+this.id+" .AnyTime-hr-btn").

[WARNING] The symbol html is declared but is apparently never used.
This code can probably be written in a more compact way.
).each(function(){var  ---> html <--- =this.innerHTML;var i;if(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{var html=this.innerHTML;var  ---> i <--- ;if(not12){i=Number(

[WARNING] The symbol not12 is declared but is apparently never used.
This code can probably be written in a more compact way.
this.innerHTML;var i;if( ---> not12 <--- ){i=Number(html);}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
;var i;if(not12){ ---> i <--- =Number(html);}else{i

[WARNING] The symbol html is declared but is apparently never used.
This code can probably be written in a more compact way.
if(not12){i=Number( ---> html <--- );}else{i=Number(html

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=Number(html);}else{ ---> i <--- =Number(html.substring(0,html

[WARNING] The symbol html is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{i=Number( ---> html <--- .substring(0,html.length-2

[WARNING] The symbol html is declared but is apparently never used.
This code can probably be written in a more compact way.
=Number(html.substring(0, ---> html <--- .length-2));if(html

[WARNING] The symbol html is declared but is apparently never used.
This code can probably be written in a more compact way.
.length-2));if( ---> html <--- .charAt(html.length-2)==

[WARNING] The symbol html is declared but is apparently never used.
This code can probably be written in a more compact way.
));if(html.charAt( ---> html <--- .length-2)=="a"){if

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
-2)=="a"){if( ---> i <--- ==12){i=0;}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
){if(i==12){ ---> i <--- =0;}}else{if(i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
=0;}}else{if( ---> i <--- <12){i+=12;}}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
else{if(i<12){ ---> i <--- +=12;}}}cmpLo.setHours(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
){i+=12;}}} ---> cmpLo <--- .setHours(i);cmpHi.setHours(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
12;}}}cmpLo.setHours( ---> i <--- );cmpHi.setHours(i);$

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
}}cmpLo.setHours(i); ---> cmpHi <--- .setHours(i);$(this)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
setHours(i);cmpHi.setHours( ---> i <--- );$(this).AnyTime_current(hr

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
);cmpHi.setHours(i); ---> $ <--- (this).AnyTime_current(hr==i,

[WARNING] The symbol hr is declared but is apparently never used.
This code can probably be written in a more compact way.
);$(this).AnyTime_current( ---> hr <--- ==i,((!_this.earliest)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
$(this).AnyTime_current(hr== ---> i <--- ,((!_this.earliest)||(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_current(hr==i,((! ---> _this <--- .earliest)||(cmpHi.getTime()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> cmpHi <--- .getTime()>=_this.earliest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpHi.getTime()>= ---> _this <--- .earliest))&&((!_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest))&&((! ---> _this <--- .latest)||(cmpLo.getTime()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> cmpLo <--- .getTime()<=_this.latest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getTime()<= ---> _this <--- .latest)));if(i<

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.latest)));if( ---> i <--- <23){cmpLo.setHours(cmpLo.

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(i<23){ ---> cmpLo <--- .setHours(cmpLo.getHours()+1

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
i<23){cmpLo.setHours( ---> cmpLo <--- .getHours()+1);}}

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1);}}); ---> cmpLo <--- .setHours(this.time.getHours()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getHours()); ---> cmpHi <--- .setHours(this.time.getHours()

[WARNING] The symbol units is declared but is apparently never used.
This code can probably be written in a more compact way.
.time.getHours());var  ---> units <--- =this.time.getMinutes();var 

[WARNING] The symbol tens is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getMinutes();var  ---> tens <--- =String(Math.floor(units/10

[WARNING] The symbol units is declared but is apparently never used.
This code can probably be written in a more compact way.
var tens=String(Math.floor( ---> units <--- /10));var ones=String(

[WARNING] The symbol ones is declared but is apparently never used.
This code can probably be written in a more compact way.
floor(units/10));var  ---> ones <--- =String(units%10);$(

[WARNING] The symbol units is declared but is apparently never used.
This code can probably be written in a more compact way.
10));var ones=String( ---> units <--- %10);$("#"+this.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
ones=String(units%10); ---> $ <--- ("#"+this.id+" .AnyTime-min-ten-btn:not(.AnyTime-min-ten-btn-empty)").

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
" .AnyTime-min-ten-btn:not(.AnyTime-min-ten-btn-empty)").each(function(){ ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol tens is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> tens <--- ,((!_this.earliest)||(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
this.innerHTML==tens,((! ---> _this <--- .earliest)||(cmpHi.getTime()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> cmpHi <--- .getTime()>=_this.earliest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpHi.getTime()>= ---> _this <--- .earliest))&&((!_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest))&&((! ---> _this <--- .latest)||(cmpLo.getTime()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> cmpLo <--- .getTime()<=_this.latest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getTime()<= ---> _this <--- .latest)));if(cmpLo.

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.latest)));if( ---> cmpLo <--- .getMinutes()<50){cmpLo.

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getMinutes()<50){ ---> cmpLo <--- .setMinutes(cmpLo.getMinutes()+10

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)<50){cmpLo.setMinutes( ---> cmpLo <--- .getMinutes()+10);cmpHi.

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getMinutes()+10); ---> cmpHi <--- .setMinutes(cmpHi.getMinutes()+10

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
)+10);cmpHi.setMinutes( ---> cmpHi <--- .getMinutes()+10);}}

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)+10);}}); ---> cmpLo <--- .setMinutes(Math.floor(this.time

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
()/10)*10); ---> cmpHi <--- .setMinutes(Math.floor(this.time

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
()/10)*10); ---> $ <--- ("#"+this.id+" .AnyTime-min-one-btn:not(.AnyTime-min-one-btn-empty)").

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
" .AnyTime-min-one-btn:not(.AnyTime-min-one-btn-empty)").each(function(){ ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol ones is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> ones <--- ,((!_this.earliest)||(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
this.innerHTML==ones,((! ---> _this <--- .earliest)||(cmpHi.getTime()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> cmpHi <--- .getTime()>=_this.earliest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpHi.getTime()>= ---> _this <--- .earliest))&&((!_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest))&&((! ---> _this <--- .latest)||(cmpLo.getTime()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> cmpLo <--- .getTime()<=_this.latest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getTime()<= ---> _this <--- .latest)));cmpLo.setMinutes(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)<=_this.latest))); ---> cmpLo <--- .setMinutes(cmpLo.getMinutes()+1

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
latest)));cmpLo.setMinutes( ---> cmpLo <--- .getMinutes()+1);cmpHi.

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getMinutes()+1); ---> cmpHi <--- .setMinutes(cmpHi.getMinutes()+1

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1);cmpHi.setMinutes( ---> cmpHi <--- .getMinutes()+1);})

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
()+1);}); ---> cmpLo <--- .setMinutes(this.time.getMinutes()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getMinutes()); ---> cmpHi <--- .setMinutes(this.time.getMinutes()

[WARNING] The symbol units is declared but is apparently never used.
This code can probably be written in a more compact way.
this.time.getMinutes()); ---> units <--- =this.time.getSeconds();tens

[WARNING] The symbol tens is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.time.getSeconds(); ---> tens <--- =String(Math.floor(units/10

[WARNING] The symbol units is declared but is apparently never used.
This code can probably be written in a more compact way.
;tens=String(Math.floor( ---> units <--- /10));ones=String(units

[WARNING] The symbol ones is declared but is apparently never used.
This code can probably be written in a more compact way.
.floor(units/10)); ---> ones <--- =String(units%10);$(

[WARNING] The symbol units is declared but is apparently never used.
This code can probably be written in a more compact way.
/10));ones=String( ---> units <--- %10);$("#"+this.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
ones=String(units%10); ---> $ <--- ("#"+this.id+" .AnyTime-sec-ten-btn:not(.AnyTime-sec-ten-btn-empty)").

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
" .AnyTime-sec-ten-btn:not(.AnyTime-sec-ten-btn-empty)").each(function(){ ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol tens is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> tens <--- ,((!_this.earliest)||(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
this.innerHTML==tens,((! ---> _this <--- .earliest)||(cmpHi.getTime()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> cmpHi <--- .getTime()>=_this.earliest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpHi.getTime()>= ---> _this <--- .earliest))&&((!_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest))&&((! ---> _this <--- .latest)||(cmpLo.getTime()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> cmpLo <--- .getTime()<=_this.latest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getTime()<= ---> _this <--- .latest)));if(cmpLo.

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.latest)));if( ---> cmpLo <--- .getSeconds()<50){cmpLo.

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getSeconds()<50){ ---> cmpLo <--- .setSeconds(cmpLo.getSeconds()+10

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)<50){cmpLo.setSeconds( ---> cmpLo <--- .getSeconds()+10);cmpHi.

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getSeconds()+10); ---> cmpHi <--- .setSeconds(cmpHi.getSeconds()+10

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
)+10);cmpHi.setSeconds( ---> cmpHi <--- .getSeconds()+10);}}

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)+10);}}); ---> cmpLo <--- .setSeconds(Math.floor(this.time

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
()/10)*10); ---> cmpHi <--- .setSeconds(Math.floor(this.time

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
()/10)*10); ---> $ <--- ("#"+this.id+" .AnyTime-sec-one-btn:not(.AnyTime-sec-one-btn-empty)").

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
" .AnyTime-sec-one-btn:not(.AnyTime-sec-one-btn-empty)").each(function(){ ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol ones is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> ones <--- ,((!_this.earliest)||(

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
this.innerHTML==ones,((! ---> _this <--- .earliest)||(cmpHi.getTime()

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> cmpHi <--- .getTime()>=_this.earliest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpHi.getTime()>= ---> _this <--- .earliest))&&((!_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest))&&((! ---> _this <--- .latest)||(cmpLo.getTime()

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> cmpLo <--- .getTime()<=_this.latest))

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(cmpLo.getTime()<= ---> _this <--- .latest)));cmpLo.setSeconds(

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
)<=_this.latest))); ---> cmpLo <--- .setSeconds(cmpLo.getSeconds()+1

[WARNING] The symbol cmpLo is declared but is apparently never used.
This code can probably be written in a more compact way.
latest)));cmpLo.setSeconds( ---> cmpLo <--- .getSeconds()+1);cmpHi.

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
cmpLo.getSeconds()+1); ---> cmpHi <--- .setSeconds(cmpHi.getSeconds()+1

[WARNING] The symbol cmpHi is declared but is apparently never used.
This code can probably be written in a more compact way.
)+1);cmpHi.setSeconds( ---> cmpHi <--- .getSeconds()+1);})

[WARNING] The symbol tzs is declared but is apparently never used.
This code can probably be written in a more compact way.
.setUtcFormatOffsetSubIndex(this.offSI);var  ---> tzs <--- =this.oConv.format(this.time

[WARNING] The symbol tzs is declared but is apparently never used.
This code can probably be written in a more compact way.
time);this.oCur.html( ---> tzs <--- );}if(fBtn){this.

[WARNING] The symbol fBtn is declared but is apparently never used.
This code can probably be written in a more compact way.
.html(tzs);}if( ---> fBtn <--- ){this.setFocus(fBtn);}

[WARNING] The symbol fBtn is declared but is apparently never used.
This code can probably be written in a more compact way.
if(fBtn){this.setFocus( ---> fBtn <--- );}this.conv.setUtcFormatOffsetAlleged(this

[WARNING] The symbol d is declared but is apparently never used.
This code can probably be written in a more compact way.
this.div.show();var  ---> d <--- ,totH=0,totW=0,dYW

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
div.show();var d, ---> totH <--- =0,totW=0,dYW=0

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
);var d,totH=0, ---> totW <--- =0,dYW=0,dMoW=0

[WARNING] The symbol dYW is declared but is apparently never used.
This code can probably be written in a more compact way.
,totH=0,totW=0, ---> dYW <--- =0,dMoW=0,dDoMW=0

[WARNING] The symbol dMoW is declared but is apparently never used.
This code can probably be written in a more compact way.
,totW=0,dYW=0, ---> dMoW <--- =0,dDoMW=0;if(this

[WARNING] The symbol dDoMW is declared but is apparently never used.
This code can probably be written in a more compact way.
,dYW=0,dMoW=0, ---> dDoMW <--- =0;if(this.dY){

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
0;if(this.dY){ ---> totW <--- =dYW=this.dY.outerWidth(true

[WARNING] The symbol dYW is declared but is apparently never used.
This code can probably be written in a more compact way.
if(this.dY){totW= ---> dYW <--- =this.dY.outerWidth(true);

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dY.outerWidth(true); ---> totH <--- =this.yLab.AnyTime_height(true)+

[WARNING] The symbol dMoW is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(this.dMo){ ---> dMoW <--- =this.dMo.outerWidth(true);

[WARNING] The symbol dMoW is declared but is apparently never used.
This code can probably be written in a more compact way.
dMo.outerWidth(true);if( ---> dMoW <--- >totW){totW=dMoW;}totH

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
outerWidth(true);if(dMoW> ---> totW <--- ){totW=dMoW;}totH+=this

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(dMoW>totW){ ---> totW <--- =dMoW;}totH+=this.hMo.

[WARNING] The symbol dMoW is declared but is apparently never used.
This code can probably be written in a more compact way.
if(dMoW>totW){totW= ---> dMoW <--- ;}totH+=this.hMo.AnyTime_height(

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
>totW){totW=dMoW;} ---> totH <--- +=this.hMo.AnyTime_height(true)+

[WARNING] The symbol dDoMW is declared but is apparently never used.
This code can probably be written in a more compact way.
;}if(this.dDoM){ ---> dDoMW <--- =this.dDoM.outerWidth(true);

[WARNING] The symbol dDoMW is declared but is apparently never used.
This code can probably be written in a more compact way.
dDoM.outerWidth(true);if( ---> dDoMW <--- >totW){totW=dDoMW;}if

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
outerWidth(true);if(dDoMW> ---> totW <--- ){totW=dDoMW;}if(__msie6

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(dDoMW>totW){ ---> totW <--- =dDoMW;}if(__msie6||__msie7)

[WARNING] The symbol dDoMW is declared but is apparently never used.
This code can probably be written in a more compact way.
if(dDoMW>totW){totW= ---> dDoMW <--- ;}if(__msie6||__msie7){if

[WARNING] The symbol __msie6 is declared but is apparently never used.
This code can probably be written in a more compact way.
){totW=dDoMW;}if( ---> __msie6 <--- ||__msie7){if(dMoW>dDoMW)

[WARNING] The symbol __msie7 is declared but is apparently never used.
This code can probably be written in a more compact way.
totW=dDoMW;}if(__msie6|| ---> __msie7 <--- ){if(dMoW>dDoMW){this

[WARNING] The symbol dMoW is declared but is apparently never used.
This code can probably be written in a more compact way.
if(__msie6||__msie7){if( ---> dMoW <--- >dDoMW){this.dDoM.css(

[WARNING] The symbol dDoMW is declared but is apparently never used.
This code can probably be written in a more compact way.
__msie6||__msie7){if(dMoW> ---> dDoMW <--- ){this.dDoM.css("width",

[WARNING] The symbol dMoW is declared but is apparently never used.
This code can probably be written in a more compact way.
.dDoM.css("width",String( ---> dMoW <--- )+"px");}else{if(

[WARNING] The symbol dYW is declared but is apparently never used.
This code can probably be written in a more compact way.
+"px");}else{if( ---> dYW <--- >dDoMW){this.dDoM.css(

[WARNING] The symbol dDoMW is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{if(dYW> ---> dDoMW <--- ){this.dDoM.css("width",

[WARNING] The symbol dYW is declared but is apparently never used.
This code can probably be written in a more compact way.
.dDoM.css("width",String( ---> dYW <--- )+"px");}}}totH+=

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
dYW)+"px");}}} ---> totH <--- +=this.hDoM.AnyTime_height(true)+

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
dD.css({width:String( ---> totW <--- )+"px",height:String(totH)

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
totW)+"px",height:String( ---> totH <--- )+"px"});totW+=this.

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
String(totH)+"px"}); ---> totW <--- +=this.dMinW;totH+=this.dMinH

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
});totW+=this.dMinW; ---> totH <--- +=this.dMinH;}var w=0

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
;totH+=this.dMinH;}var  ---> w <--- =0,h=0,timeH=0

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
.dMinH;}var w=0, ---> h <--- =0,timeH=0,timeW=0

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
var w=0,h=0, ---> timeH <--- =0,timeW=0;if(this

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
,h=0,timeH=0, ---> timeW <--- =0;if(this.dH){

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
0;if(this.dH){ ---> w <--- =this.dH.outerWidth(true);

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dH.outerWidth(true); ---> timeW <--- +=w+1;h=this.dH

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
dH.outerWidth(true);timeW+= ---> w <--- +1;h=this.dH.AnyTime_height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
true);timeW+=w+1; ---> h <--- =this.dH.AnyTime_height(true);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
dH.AnyTime_height(true);if( ---> h <--- >timeH){timeH=h;}}

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height(true);if(h> ---> timeH <--- ){timeH=h;}}if(

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(h>timeH){ ---> timeH <--- =h;}}if(this.dM

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(h>timeH){timeH= ---> h <--- ;}}if(this.dM){

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(this.dM){ ---> w <--- =this.dM.outerWidth(true);

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dM.outerWidth(true); ---> timeW <--- +=w+1;h=this.dM

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
dM.outerWidth(true);timeW+= ---> w <--- +1;h=this.dM.AnyTime_height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
true);timeW+=w+1; ---> h <--- =this.dM.AnyTime_height(true);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
dM.AnyTime_height(true);if( ---> h <--- >timeH){timeH=h;}}

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height(true);if(h> ---> timeH <--- ){timeH=h;}}if(

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(h>timeH){ ---> timeH <--- =h;}}if(this.dS

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(h>timeH){timeH= ---> h <--- ;}}if(this.dS){

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(this.dS){ ---> w <--- =this.dS.outerWidth(true);

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
this.dS.outerWidth(true); ---> timeW <--- +=w+1;h=this.dS

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
dS.outerWidth(true);timeW+= ---> w <--- +1;h=this.dS.AnyTime_height

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
true);timeW+=w+1; ---> h <--- =this.dS.AnyTime_height(true);

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
dS.AnyTime_height(true);if( ---> h <--- >timeH){timeH=h;}}

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height(true);if(h> ---> timeH <--- ){timeH=h;}}if(

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(h>timeH){ ---> timeH <--- =h;}}if(this.dO

[WARNING] The symbol h is declared but is apparently never used.
This code can probably be written in a more compact way.
if(h>timeH){timeH= ---> h <--- ;}}if(this.dO){

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
}}if(this.dO){ ---> w <--- =this.oMinW;if(timeW<w

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
{w=this.oMinW;if( ---> timeW <--- <w+1){timeW=w+

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
=this.oMinW;if(timeW< ---> w <--- +1){timeW=w+1;

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
if(timeW<w+1){ ---> timeW <--- =w+1;}timeH+=this.

[WARNING] The symbol w is declared but is apparently never used.
This code can probably be written in a more compact way.
timeW<w+1){timeW= ---> w <--- +1;}timeH+=this.dO.

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
){timeW=w+1;} ---> timeH <--- +=this.dO.AnyTime_height(true);

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
dT.css({width:String( ---> timeW <--- )+"px",height:String(timeH)

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
timeW)+"px",height:String( ---> timeH <--- )+"px"});timeW+=this.

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
String(timeH)+"px"}); ---> timeW <--- +=this.tMinW+1;timeH+=this

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
;timeW+=this.tMinW+1; ---> timeH <--- +=this.tMinH;totW+=timeW;if

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
+1;timeH+=this.tMinH; ---> totW <--- +=timeW;if(timeH>totH){

[WARNING] The symbol timeW is declared but is apparently never used.
This code can probably be written in a more compact way.
;timeH+=this.tMinH;totW+= ---> timeW <--- ;if(timeH>totH){totH=

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
.tMinH;totW+=timeW;if( ---> timeH <--- >totH){totH=timeH;}if

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
;totW+=timeW;if(timeH> ---> totH <--- ){totH=timeH;}if(this

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
timeW;if(timeH>totH){ ---> totH <--- =timeH;}if(this.dO)

[WARNING] The symbol timeH is declared but is apparently never used.
This code can probably be written in a more compact way.
if(timeH>totH){totH= ---> timeH <--- ;}if(this.dO){var 

[WARNING] The symbol dOW is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(this.dO){var  ---> dOW <--- =this.dT.width()-(

[WARNING] The symbol dOW is declared but is apparently never used.
This code can probably be written in a more compact way.
dO.css({width:String( ---> dOW <--- )+"px"});this.oCur.

[WARNING] The symbol dOW is declared but is apparently never used.
This code can probably be written in a more compact way.
oCur.css({width:String( ---> dOW <--- -(this.oListMinW+4))+

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
dB.css({height:String( ---> totH <--- )+"px",width:String(totW)

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
totH)+"px",width:String( ---> totW <--- )+"px"});totH+=this.

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
String(totW)+"px"}); ---> totH <--- +=this.bMinH;totW+=this.bMinW

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
});totH+=this.bMinH; ---> totW <--- +=this.bMinW;totH+=this.hTitle

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
.bMinH;totW+=this.bMinW; ---> totH <--- +=this.hTitle.AnyTime_height(true)+

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_height(true)+this.wMinH; ---> totW <--- +=this.wMinW;if(this.hTitle

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
this.hTitle.outerWidth(true)> ---> totW <--- ){totW=this.hTitle.outerWidth(

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
.outerWidth(true)>totW){ ---> totW <--- =this.hTitle.outerWidth(true);

[WARNING] The symbol totH is declared but is apparently never used.
This code can probably be written in a more compact way.
div.css({height:String( ---> totH <--- )+"px",width:String(totW)

[WARNING] The symbol totW is declared but is apparently never used.
This code can probably be written in a more compact way.
totH)+"px",width:String( ---> totW <--- )+"px"});if(!this

[WARNING] The symbol cur is declared but is apparently never used.
This code can probably be written in a more compact way.
,updODiv:function(fBtn){var  ---> cur <--- ,matched=false,def=null;this

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(fBtn){var cur, ---> matched <--- =false,def=null;this.oDiv

[WARNING] The symbol def is declared but is apparently never used.
This code can probably be written in a more compact way.
){var cur,matched=false, ---> def <--- =null;this.oDiv.find(".AnyTime-off-off-btn"

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(){if(this.AnyTime_offMin== ---> _this <--- .offMin){if(this.AnyTime_offSI==

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
offMin){if(this.AnyTime_offSI== ---> _this <--- .offSI){$(this).AnyTime_current

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
this.AnyTime_offSI==_this.offSI){ ---> $ <--- (this).AnyTime_current(matched=true,

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
){$(this).AnyTime_current( ---> matched <--- =true,true);}else{$

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
=true,true);}else{ ---> $ <--- (this).AnyTime_current(false,true)

[WARNING] The symbol def is declared but is apparently never used.
This code can probably be written in a more compact way.
AnyTime_current(false,true);if( ---> def <--- ==null){def=$(this)

[WARNING] The symbol def is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(def==null){ ---> def <--- =$(this);}}}else

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
if(def==null){def= ---> $ <--- (this);}}}else{$

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(this);}}}else{ ---> $ <--- (this).AnyTime_current(false,true)

[WARNING] The symbol matched is declared but is apparently never used.
This code can probably be written in a more compact way.
;}});if((! ---> matched <--- )&&(def!=null)){def

[WARNING] The symbol def is declared but is apparently never used.
This code can probably be written in a more compact way.
;if((!matched)&&( ---> def <--- !=null)){def.AnyTime_current(true

[WARNING] The symbol def is declared but is apparently never used.
This code can probably be written in a more compact way.
)&&(def!=null)){ ---> def <--- .AnyTime_current(true,true);}this

[WARNING] The symbol fBtn is declared but is apparently never used.
This code can probably be written in a more compact way.
.change();this.upd( ---> fBtn <--- );},updYDiv:function(fBtn)

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
,updYDiv:function(fBtn){var  ---> i <--- ,legal;var era=1;var yearValue

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
:function(fBtn){var i, ---> legal <--- ;var era=1;var yearValue=this

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
fBtn){var i,legal;var  ---> era <--- =1;var yearValue=this.time.

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
,legal;var era=1;var  ---> yearValue <--- =this.time.getFullYear();if

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
.time.getFullYear();if( ---> yearValue <--- <0){era=(-1)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
);if(yearValue<0){ ---> era <--- =(-1);yearValue=0-

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
){era=(-1); ---> yearValue <--- =0-yearValue;}yearValue=AnyTime.

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
(-1);yearValue=0- ---> yearValue <--- ;}yearValue=AnyTime.pad(yearValue,

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
);yearValue=0-yearValue;} ---> yearValue <--- =AnyTime.pad(yearValue,4);

[WARNING] The symbol AnyTime is declared but is apparently never used.
This code can probably be written in a more compact way.
yearValue=0-yearValue;}yearValue= ---> AnyTime <--- .pad(yearValue,4);var eY

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
yearValue;}yearValue=AnyTime.pad( ---> yearValue <--- ,4);var eY=_this.earliest

[WARNING] The symbol eY is declared but is apparently never used.
This code can probably be written in a more compact way.
.pad(yearValue,4);var  ---> eY <--- =_this.earliest&&new Date(_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(yearValue,4);var eY= ---> _this <--- .earliest&&new Date(_this.earliest)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
eY=_this.earliest&&new Date( ---> _this <--- .earliest).getFullYear();var lY

[WARNING] The symbol lY is declared but is apparently never used.
This code can probably be written in a more compact way.
.earliest).getFullYear();var  ---> lY <--- =_this.latest&&new Date(_this.

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
).getFullYear();var lY= ---> _this <--- .latest&&new Date(_this.latest)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
lY=_this.latest&&new Date( ---> _this <--- .latest).getFullYear();i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.latest).getFullYear(); ---> i <--- =0;this.yDiv.find(".AnyTime-mil-btn"

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
".AnyTime-mil-btn").each(function(){ ---> legal <--- =(((!_this.earliest)||

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(){legal=(((! ---> _this <--- .earliest)||(era*(i+

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> era <--- *(i+(era<0?0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest)||(era*( ---> i <--- +(era<0?0:999)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(era*(i+( ---> era <--- <0?0:999))>=eY

[WARNING] The symbol eY is declared but is apparently never used.
This code can probably be written in a more compact way.
<0?0:999))>= ---> eY <--- ))&&((!_this.latest)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)>=eY))&&((! ---> _this <--- .latest)||(era*(i+

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> era <--- *(i+(era>0?0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.latest)||(era*( ---> i <--- +(era>0?0:999)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(era*(i+( ---> era <--- >0?0:999))<=lY

[WARNING] The symbol lY is declared but is apparently never used.
This code can probably be written in a more compact way.
>0?0:999))<= ---> lY <--- )));$(this).AnyTime_current

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
999))<=lY))); ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> yearValue <--- .substring(0,1),legal)

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
yearValue.substring(0,1), ---> legal <--- );i+=1000;});i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(0,1),legal); ---> i <--- +=1000;});i=(Math

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);i+=1000;}); ---> i <--- =(Math.floor(yearValue/1000)

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
);i=(Math.floor( ---> yearValue <--- /1000)*1000);this.yDiv

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
".AnyTime-cent-btn").each(function(){ ---> legal <--- =(((!_this.earliest)||

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(){legal=(((! ---> _this <--- .earliest)||(era*(i+

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> era <--- *(i+(era<0?0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest)||(era*( ---> i <--- +(era<0?0:99)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(era*(i+( ---> era <--- <0?0:99))>=eY

[WARNING] The symbol eY is declared but is apparently never used.
This code can probably be written in a more compact way.
<0?0:99))>= ---> eY <--- ))&&((!_this.latest)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)>=eY))&&((! ---> _this <--- .latest)||(era*(i+

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> era <--- *(i+(era>0?0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.latest)||(era*( ---> i <--- +(era>0?0:99)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(era*(i+( ---> era <--- >0?0:99))<=lY

[WARNING] The symbol lY is declared but is apparently never used.
This code can probably be written in a more compact way.
>0?0:99))<= ---> lY <--- )));$(this).AnyTime_current

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
99))<=lY))); ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> yearValue <--- .substring(1,2),legal)

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
yearValue.substring(1,2), ---> legal <--- );i+=100;});i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(1,2),legal); ---> i <--- +=100;});i=(Math

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);i+=100;}); ---> i <--- =(Math.floor(yearValue/100)

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
);i=(Math.floor( ---> yearValue <--- /100)*100);this.yDiv

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
".AnyTime-dec-btn").each(function(){ ---> legal <--- =(((!_this.earliest)||

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(){legal=(((! ---> _this <--- .earliest)||(era*(i+

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> era <--- *(i+(era<0?0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.earliest)||(era*( ---> i <--- +(era<0?0:9)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(era*(i+( ---> era <--- <0?0:9))>=eY

[WARNING] The symbol eY is declared but is apparently never used.
This code can probably be written in a more compact way.
<0?0:9))>= ---> eY <--- ))&&((!_this.latest)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
)>=eY))&&((! ---> _this <--- .latest)||(era*(i+

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> era <--- *(i+(era>0?0

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
_this.latest)||(era*( ---> i <--- +(era>0?0:9)

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
)||(era*(i+( ---> era <--- >0?0:9))<=lY

[WARNING] The symbol lY is declared but is apparently never used.
This code can probably be written in a more compact way.
>0?0:9))<= ---> lY <--- )));$(this).AnyTime_current

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
9))<=lY))); ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> yearValue <--- .substring(2,3),legal)

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
yearValue.substring(2,3), ---> legal <--- );i+=10;});i

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
(2,3),legal); ---> i <--- +=10;});i=(Math

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
);i+=10;}); ---> i <--- =(Math.floor(yearValue/10)

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
);i=(Math.floor( ---> yearValue <--- /10)*10);this.yDiv

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
".AnyTime-yr-btn").each(function(){ ---> legal <--- =(((!_this.earliest)||

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
(){legal=(((! ---> _this <--- .earliest)||(era*i>=eY

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.earliest)||( ---> era <--- *i>=eY))&&((!

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
!_this.earliest)||(era* ---> i <--- >=eY))&&((!_this.

[WARNING] The symbol eY is declared but is apparently never used.
This code can probably be written in a more compact way.
.earliest)||(era*i>= ---> eY <--- ))&&((!_this.latest)

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
i>=eY))&&((! ---> _this <--- .latest)||(era*i<=lY

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
((!_this.latest)||( ---> era <--- *i<=lY)));$(

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
!_this.latest)||(era* ---> i <--- <=lY)));$(this)

[WARNING] The symbol lY is declared but is apparently never used.
This code can probably be written in a more compact way.
.latest)||(era*i<= ---> lY <--- )));$(this).AnyTime_current

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
era*i<=lY))); ---> $ <--- (this).AnyTime_current(this.innerHTML==

[WARNING] The symbol yearValue is declared but is apparently never used.
This code can probably be written in a more compact way.
this).AnyTime_current(this.innerHTML== ---> yearValue <--- .substring(3),legal);i

[WARNING] The symbol legal is declared but is apparently never used.
This code can probably be written in a more compact way.
innerHTML==yearValue.substring(3), ---> legal <--- );i+=1;});this

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
.substring(3),legal); ---> i <--- +=1;});this.yDiv.

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
".AnyTime-bce-btn").each(function(){ ---> $ <--- (this).AnyTime_current(era<0,

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
){$(this).AnyTime_current( ---> era <--- <0,(!_this.earliest)||

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_current(era<0,(! ---> _this <--- .earliest)||(_this.earliest<0

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
,(!_this.earliest)||( ---> _this <--- .earliest<0));});

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
".AnyTime-ce-btn").each(function(){ ---> $ <--- (this).AnyTime_current(era>0,

[WARNING] The symbol era is declared but is apparently never used.
This code can probably be written in a more compact way.
){$(this).AnyTime_current( ---> era <--- >0,(!_this.latest)||

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
.AnyTime_current(era>0,(! ---> _this <--- .latest)||(_this.latest>0

[WARNING] The symbol _this is declared but is apparently never used.
This code can probably be written in a more compact way.
,(!_this.latest)||( ---> _this <--- .latest>0));});

[WARNING] The symbol fBtn is declared but is apparently never used.
This code can probably be written in a more compact way.
.change();this.upd( ---> fBtn <--- );}};__pickers[id].

[WARNING] The symbol __pickers is declared but is apparently never used.
This code can probably be written in a more compact way.
.upd(fBtn);}}; ---> __pickers <--- [id].initialize(id);}

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
(fBtn);}};__pickers[ ---> id <--- ].initialize(id);};}

[WARNING] The symbol id is declared but is apparently never used.
This code can probably be written in a more compact way.
};__pickers[id].initialize( ---> id <--- );};})(jQuery);

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
jQuery);(function($){ ---> $ <--- .kc_type_of=function(v){if(

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
function(v){if(typeof( ---> v <--- )=="object"){if(v===null

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
(v)=="object"){if( ---> v <--- ===null){return"null";}if(

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
null){return"null";}if( ---> v <--- .constructor==(new Array).constructor)

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
constructor){return"array";}if( ---> v <--- .constructor==(new Date).constructor)

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
constructor){return"date";}if( ---> v <--- .constructor==(new RegExp).constructor)

[WARNING] The symbol v is declared but is apparently never used.
This code can probably be written in a more compact way.
;}return"object";}returntypeof( ---> v <--- );};$.kc_write_kc_field=function(

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
}returntypeof(v);}; ---> $ <--- .kc_write_kc_field=function(field,parent){

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
{try{field_value="";if( ---> field <--- .value){field_value=field.value;

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
if(field.value){field_value= ---> field <--- .value;}if(field.formType)

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
field_value=field.value;}if( ---> field <--- .formType){if(field.formType==

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
if(field.formType){if( ---> field <--- .formType=="TEXTAREA"){parent.append(

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
if(field.formType=="TEXTAREA"){ ---> parent <--- .append("<div class='form_field_holder'></div>");field_div=parent.

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.append("<div class='form_field_holder'></div>");field_div= ---> parent <--- .children(":last");if(field.

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.children(":last");if( ---> field <--- .title){field_div.append("<label for='' class='left'/>")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
children(":last").attr("for", ---> field <--- .name);field_div.children(":last")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
field_div.children(":last").append( ---> field <--- .title);}field_div.append("<textarea name=''/>"

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
children(":last").attr("name", ---> field <--- .name);field_div.children(":last")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
("value",field_value);}if( ---> field <--- .formType=="WYSIWYM"){parent.append(

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
if(field.formType=="WYSIWYM"){ ---> parent <--- .append("<div class='form_field_holder'></div>");field_div=parent.

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.append("<div class='form_field_holder'></div>");field_div= ---> parent <--- .children(":last");field_div.append(

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
field_div.children(":last");if( ---> field <--- .title){label_p.children(":last")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
label_p.children(":last").append( ---> field <--- .title);}field_div.append("<textarea name=''></textarea>"

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
":last");area.attr("name", ---> field <--- .name);area.attr("value",

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
:"fr",});}if( ---> field <--- .formType=="DATE"){parent.append(

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
if(field.formType=="DATE"){ ---> parent <--- .append("<div class='form_field_holder'></div>");field_div=parent.

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.append("<div class='form_field_holder'></div>");field_div= ---> parent <--- .children(":last");if(field.

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.children(":last");if( ---> field <--- .title){field_div.append("<label for='' class='left'/>")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
children(":last").attr("for", ---> field <--- .name);field_div.children(":last")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
field_div.children(":last").append( ---> field <--- .title);}field_div.append("<input class='datepicker' type='text'/>"

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
;input_el.attr("id","field_"+ ---> field <--- .name);input_el.attr("name",

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
name);input_el.attr("name", ---> field <--- .name);input_el.attr("value",

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
firstDOW:1});}if( ---> field <--- .formType=="WYSIWYG"){parent.append(

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
if(field.formType=="WYSIWYG"){ ---> parent <--- .append("<div class='form_field_holder'></div>");field_div=parent.

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.append("<div class='form_field_holder'></div>");field_div= ---> parent <--- .children(":last");field_div.append(

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
field_div.children(":last");if( ---> field <--- .title){label_p.children(":last")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
label_p.children(":last").append( ---> field <--- .title);}field_div.append("<textarea name=''></textarea>"

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
":last");area.attr("name", ---> field <--- .name);area.attr("value",

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
"value",field_value);if(!( ---> field <--- .name in CKEDITOR.instances)){area

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
);}else{CKEDITOR.instances[ ---> field <--- .name];}}}else{parent

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
.name];}}}else{ ---> parent <--- .append("<div class='form_field_holder'></div>");field_div=parent.

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.append("<div class='form_field_holder'></div>");field_div= ---> parent <--- .children(":last");if(field.

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.children(":last");if( ---> field <--- .title){field_div.append("<label for='' class='left'/>")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
children(":last").attr("for", ---> field <--- .name);field_div.children(":last")

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
field_div.children(":last").append( ---> field <--- .title);}field_div.append("<input class='field' type='"

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
);}field_div.append("<input class='field' type='"+ ---> field <--- .dataType+"' value='' name=''/>");field_div.children(

[WARNING] The symbol field is declared but is apparently never used.
This code can probably be written in a more compact way.
children(":last").attr("name", ---> field <--- .name);}}catch(err)

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
field.name);}}catch( ---> err <--- ){console.log("%s: %o","ERROR",

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
{console.log("%s: %o","ERROR", ---> err <--- );}};$.kc_write_kc_form=function

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,"ERROR",err);}}; ---> $ <--- .kc_write_kc_form=function(form,action,acturl

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
action,acturl,parent){try{ ---> parent <--- .append("<form enctype='multipart/form-data' method='POST' action='' class='main_form'></form>");form_widget=parent.

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
parent.append("<form enctype='multipart/form-data' method='POST' action='' class='main_form'></form>");form_widget= ---> parent <--- .children(":last");form_widget.attr(

[WARNING] The symbol acturl is declared but is apparently never used.
This code can probably be written in a more compact way.
":last");form_widget.attr("action", ---> acturl <--- );form_widget.append("<fieldset></fieldset>");fieldset

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
children(":last").attr("value", ---> action <--- );fieldset.append("<legend></legend>");if

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
fieldset.append("<legend></legend>");if( ---> form <--- .title){fieldset.children(":last")

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
fieldset.children(":last").append( ---> form <--- .title);}if(form.notice

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
(form.title);}if( ---> form <--- .notice){fieldset.append("<p></p>")

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
fieldset.children(":last").append( ---> form <--- .notice);}if(form.fields

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
(form.notice);}if( ---> form <--- .fields){var arLen=form.fields

[WARNING] The symbol arLen is declared but is apparently never used.
This code can probably be written in a more compact way.
}if(form.fields){var  ---> arLen <--- =form.fields.length;for(var 

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
(form.fields){var arLen= ---> form <--- .fields.length;for(var i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
form.fields.length;for(var  ---> i <--- =0,len=arLen;i<len

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
length;for(var i=0, ---> len <--- =arLen;i<len;++i)

[WARNING] The symbol arLen is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var i=0,len= ---> arLen <--- ;i<len;++i){$

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
var i=0,len=arLen; ---> i <--- <len;++i){$.kc_write_kc_field

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
=0,len=arLen;i< ---> len <--- ;++i){$.kc_write_kc_field(form

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
len=arLen;i<len;++ ---> i <--- ){$.kc_write_kc_field(form.fields[

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
;i<len;++i){ ---> $ <--- .kc_write_kc_field(form.fields[i],

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
;++i){$.kc_write_kc_field( ---> form <--- .fields[i],fieldset);}

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{$.kc_write_kc_field(form.fields[ ---> i <--- ],fieldset);}}if(form

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
],fieldset);}}if( ---> form <--- .submit){submit=form.submit;

[WARNING] The symbol form is declared but is apparently never used.
This code can probably be written in a more compact way.
if(form.submit){submit= ---> form <--- .submit;}else{submit=action;

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
form.submit;}else{submit= ---> action <--- ;}fieldset.append("<p><input type='submit' class='button' value=''/></p>");fieldset

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
("value",submit);}catch( ---> err <--- ){console.log("%s: %o","ERROR",

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
{console.log("%s: %o","ERROR", ---> err <--- );}};$.kc_write_kc_action=function

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,"ERROR",err);}}; ---> $ <--- .kc_write_kc_action=function(action,parent){

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
function(action,parent){try{ ---> parent <--- .html("");}catch(err

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
.html("");}catch( ---> err <--- ){console.log("%s: %o","ERROR",

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
{console.log("%s: %o","ERROR", ---> err <--- );}try{if(action.label

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
,err);}try{if( ---> action <--- .label){parent.dialog("option",

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
try{if(action.label){ ---> parent <--- .dialog("option","title",action.label

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
{parent.dialog("option","title", ---> action <--- .label);}if($.kc_type_of

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,action.label);}if( ---> $ <--- .kc_type_of(action.form)=="object")

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if($.kc_type_of( ---> action <--- .form)=="object"){$.kc_write_kc_form

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
(action.form)=="object"){ ---> $ <--- .kc_write_kc_form(action.form,action.action

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
)=="object"){$.kc_write_kc_form( ---> action <--- .form,action.action,action.acturl

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
{$.kc_write_kc_form(action.form, ---> action <--- .action,action.acturl,parent);

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
(action.form,action.action, ---> action <--- .acturl,parent);}if($

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
,action.action,action.acturl, ---> parent <--- );}if($.kc_type_of(action

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
.acturl,parent);}if( ---> $ <--- .kc_type_of(action.form)=="array")

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
);}if($.kc_type_of( ---> action <--- .form)=="array"){var arLen=

[WARNING] The symbol arLen is declared but is apparently never used.
This code can probably be written in a more compact way.
action.form)=="array"){var  ---> arLen <--- =action.form.length;for(var 

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
form)=="array"){var arLen= ---> action <--- .form.length;for(var i=

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
action.form.length;for(var  ---> i <--- =0,len=arLen;i<len

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
length;for(var i=0, ---> len <--- =arLen;i<len;++i)

[WARNING] The symbol arLen is declared but is apparently never used.
This code can probably be written in a more compact way.
for(var i=0,len= ---> arLen <--- ;i<len;++i){$

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
var i=0,len=arLen; ---> i <--- <len;++i){$.kc_write_kc_form

[WARNING] The symbol len is declared but is apparently never used.
This code can probably be written in a more compact way.
=0,len=arLen;i< ---> len <--- ;++i){$.kc_write_kc_form(action

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
len=arLen;i<len;++ ---> i <--- ){$.kc_write_kc_form(action.form[

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
;i<len;++i){ ---> $ <--- .kc_write_kc_form(action.form[i],

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
;++i){$.kc_write_kc_form( ---> action <--- .form[i],action.action,

[WARNING] The symbol i is declared but is apparently never used.
This code can probably be written in a more compact way.
{$.kc_write_kc_form(action.form[ ---> i <--- ],action.action,action.acturl,

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
kc_write_kc_form(action.form[i], ---> action <--- .action,action.acturl,parent);

[WARNING] The symbol action is declared but is apparently never used.
This code can probably be written in a more compact way.
form[i],action.action, ---> action <--- .acturl,parent);}}}catch

[WARNING] The symbol parent is declared but is apparently never used.
This code can probably be written in a more compact way.
,action.action,action.acturl, ---> parent <--- );}}}catch(err){

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
,parent);}}}catch( ---> err <--- ){console.log("%s: %o","ERROR",

[WARNING] The symbol err is declared but is apparently never used.
This code can probably be written in a more compact way.
{console.log("%s: %o","ERROR", ---> err <--- );}};$.set_wysiwyg=function

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
,"ERROR",err);}}; ---> $ <--- .set_wysiwyg=function(area){area.

[WARNING] The symbol area is declared but is apparently never used.
This code can probably be written in a more compact way.
$.set_wysiwyg=function(area){ ---> area <--- .wysiwyg({controls:{strikeThrough:{

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
},h4mozilla:{visible:true&& ---> $ <--- .browser.mozilla,className:"h4",command

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
},h5mozilla:{visible:true&& ---> $ <--- .browser.mozilla,className:"h5",command

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
},h6mozilla:{visible:true&& ---> $ <--- .browser.mozilla,className:"h6",command

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
h4:{visible:true&&!( ---> $ <--- .browser.mozilla),className:"h4",

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
h5:{visible:true&&!( ---> $ <--- .browser.mozilla),className:"h5",

[WARNING] The symbol $ is declared but is apparently never used.
This code can probably be written in a more compact way.
h6:{visible:true&&!( ---> $ <--- .browser.mozilla),className:"h6",
